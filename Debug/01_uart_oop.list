
01_uart_oop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f5c  08000f5c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000f5c  08000f5c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f5c  08000f5c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f60  08000f60  00010f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000003c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000200c  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000557  00000000  00000000  000220a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  000225f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a8  00000000  00000000  000226c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001928a  00000000  00000000  00022770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f8b  00000000  00000000  0003b9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c969  00000000  00000000  0003c985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c92ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000628  00000000  00000000  000c9344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08000f00 	.word	0x08000f00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08000f00 	.word	0x08000f00

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0c      	blt.n	80002cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	; (80002d8 <__NVIC_ClearPendingIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	3360      	adds	r3, #96	; 0x60
 80002c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	; (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	; (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <rcc_inc_ticks>:



//increment milisecond Tick
void rcc_inc_ticks()
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	msTicks++;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <rcc_inc_ticks+0x18>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	4a03      	ldr	r2, [pc, #12]	; (8000348 <rcc_inc_ticks+0x18>)
 800033c:	6013      	str	r3, [r2, #0]
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	20000080 	.word	0x20000080

0800034c <rcc_get_ticks>:


//get milisecond Tick
uint32_t rcc_get_ticks(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

	return msTicks;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <rcc_get_ticks+0x14>)
 8000352:	681b      	ldr	r3, [r3, #0]
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000080 	.word	0x20000080

08000364 <rcc_ms_delay>:



//ms DElay
void rcc_ms_delay(uint32_t ms)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	uint32_t start_ticks =rcc_get_ticks();
 800036c:	f7ff ffee 	bl	800034c <rcc_get_ticks>
 8000370:	60f8      	str	r0, [r7, #12]
	while((rcc_get_ticks() - start_ticks) < ms){}
 8000372:	bf00      	nop
 8000374:	f7ff ffea 	bl	800034c <rcc_get_ticks>
 8000378:	4602      	mov	r2, r0
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	429a      	cmp	r2, r3
 8000382:	d8f7      	bhi.n	8000374 <rcc_ms_delay+0x10>


}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <SysTick_Handler>:


//systick handler
void SysTick_Handler (void)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(SysTick_IRQn);
 8000392:	f04f 30ff 	mov.w	r0, #4294967295
 8000396:	f7ff ff83 	bl	80002a0 <__NVIC_ClearPendingIRQ>
	rcc_inc_ticks();
 800039a:	f7ff ffc9 	bl	8000330 <rcc_inc_ticks>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <rcc_Systick_config>:



//trong hàm này với clock của AHB là 16 M thì nạp giá trị 16000 sẽ tạo ra ngắt 1ms
void rcc_Systick_config (uint32_t arr)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	//reset control register
	SysTick->CTRL =0;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <rcc_Systick_config+0x54>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
	//set the reload value
	SysTick->LOAD = arr-1;
 80003b2:	4a11      	ldr	r2, [pc, #68]	; (80003f8 <rcc_Systick_config+0x54>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	6053      	str	r3, [r2, #4]
	//enable systick interrupt from NVIC
	NVIC_SetPriority(SysTick_IRQn,0);
 80003ba:	2100      	movs	r1, #0
 80003bc:	f04f 30ff 	mov.w	r0, #4294967295
 80003c0:	f7ff ff8c 	bl	80002dc <__NVIC_SetPriority>
	//reset systick current value to 0
	SysTick->VAL =0;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <rcc_Systick_config+0x54>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
	//enable systick from control register
	//1.chon nguồn là processor clock (AHB)
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <rcc_Systick_config+0x54>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <rcc_Systick_config+0x54>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6013      	str	r3, [r2, #0]
	//2.enable interrupt khi đếm đến 0
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <rcc_Systick_config+0x54>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <rcc_Systick_config+0x54>)
 80003dc:	f043 0302 	orr.w	r3, r3, #2
 80003e0:	6013      	str	r3, [r2, #0]
	//3.enable systick (cho nó bắt đầu đếm)
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <rcc_Systick_config+0x54>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <rcc_Systick_config+0x54>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6013      	str	r3, [r2, #0]
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	e000e010 	.word	0xe000e010

080003fc <USART1_Init>:




void USART1_Init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

// 1.enable clock access to uart(ABP2)
	RCC->APB2ENR |= 0x01<<4;
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <USART1_Init+0x90>)
 8000402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000404:	4a21      	ldr	r2, [pc, #132]	; (800048c <USART1_Init+0x90>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6453      	str	r3, [r2, #68]	; 0x44

// 2.enable clock access for port (port A)
	RCC->AHB1ENR |= 0x01<<0;
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <USART1_Init+0x90>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a1e      	ldr	r2, [pc, #120]	; (800048c <USART1_Init+0x90>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
// 3.0) enable mode for pin( alternate)
	GPIOA->MODER &= ~(0x0F<<18);
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <USART1_Init+0x94>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <USART1_Init+0x94>)
 800041e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000422:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x0A<<18;
 8000424:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <USART1_Init+0x94>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a19      	ldr	r2, [pc, #100]	; (8000490 <USART1_Init+0x94>)
 800042a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800042e:	6013      	str	r3, [r2, #0]
// 3.enable pins for alternate functions (PA9, PA10, AF7) chọn AF7
	GPIOA->AFR[1] &= ~(0xFF<<4);
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <USART1_Init+0x94>)
 8000432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000434:	4a16      	ldr	r2, [pc, #88]	; (8000490 <USART1_Init+0x94>)
 8000436:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800043a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= 0x77<<4;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <USART1_Init+0x94>)
 800043e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <USART1_Init+0x94>)
 8000442:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000446:	6253      	str	r3, [r2, #36]	; 0x24
// 4.config uart
	//do bài này đặt trong môi trường không quá nhiều nhiễu nên chọn
	//OVER SAMPLE =8
	//Fclk của uart là 16M (mặc định)
	//baudrate: 115200 => tính ra được uart div là 17.361 => uartx 0x113
	USART1->BRR =0x113;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <USART1_Init+0x98>)
 800044a:	f240 1213 	movw	r2, #275	; 0x113
 800044e:	609a      	str	r2, [r3, #8]
	//over8=1
	USART1->CR1 |= USART_CR1_OVER8;
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <USART1_Init+0x98>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	4a0f      	ldr	r2, [pc, #60]	; (8000494 <USART1_Init+0x98>)
 8000456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800045a:	60d3      	str	r3, [r2, #12]
	//enable TE và RE
	USART1->CR1 |= 0xC;
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <USART1_Init+0x98>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <USART1_Init+0x98>)
 8000462:	f043 030c 	orr.w	r3, r3, #12
 8000466:	60d3      	str	r3, [r2, #12]
	//chọn stop bit bằng 1, (cái này mặc định rồi nên không cần làm với CR2
	USART1->CR2 =0x0;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <USART1_Init+0x98>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
	//không chọn flow control
	USART1->CR3 =0x0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <USART1_Init+0x98>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
	//enable uart
	USART1->CR1 |= 1<<13;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <USART1_Init+0x98>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a06      	ldr	r2, [pc, #24]	; (8000494 <USART1_Init+0x98>)
 800047a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800047e:	60d3      	str	r3, [r2, #12]

}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40023800 	.word	0x40023800
 8000490:	40020000 	.word	0x40020000
 8000494:	40011000 	.word	0x40011000

08000498 <uart_uart1_transmit>:

bool uart_uart1_transmit(uint8_t *data, uint8_t len, uint32_t timeout)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	460b      	mov	r3, r1
 80004a2:	607a      	str	r2, [r7, #4]
 80004a4:	72fb      	strb	r3, [r7, #11]
	uint8_t dataIdx =0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	75fb      	strb	r3, [r7, #23]
	uint32_t startTick = rcc_get_ticks();
 80004aa:	f7ff ff4f 	bl	800034c <rcc_get_ticks>
 80004ae:	6138      	str	r0, [r7, #16]
	while (dataIdx < len)
 80004b0:	e01b      	b.n	80004ea <uart_uart1_transmit+0x52>
	{
		if(USART1->SR &= 1<<7)  //make sure transmit buffer is empty:
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <uart_uart1_transmit+0x88>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <uart_uart1_transmit+0x88>)
 80004b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004bc:	6013      	str	r3, [r2, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d009      	beq.n	80004d6 <uart_uart1_transmit+0x3e>
		{
			USART1->DR = data[dataIdx];
 80004c2:	7dfb      	ldrb	r3, [r7, #23]
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	4413      	add	r3, r2
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <uart_uart1_transmit+0x88>)
 80004cc:	605a      	str	r2, [r3, #4]
			dataIdx++;
 80004ce:	7dfb      	ldrb	r3, [r7, #23]
 80004d0:	3301      	adds	r3, #1
 80004d2:	75fb      	strb	r3, [r7, #23]
 80004d4:	e009      	b.n	80004ea <uart_uart1_transmit+0x52>
		}
		else  //manage time out
		{
			if (rcc_get_ticks() - startTick >= timeout) return false;
 80004d6:	f7ff ff39 	bl	800034c <rcc_get_ticks>
 80004da:	4602      	mov	r2, r0
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d801      	bhi.n	80004ea <uart_uart1_transmit+0x52>
 80004e6:	2300      	movs	r3, #0
 80004e8:	e015      	b.n	8000516 <uart_uart1_transmit+0x7e>
	while (dataIdx < len)
 80004ea:	7dfa      	ldrb	r2, [r7, #23]
 80004ec:	7afb      	ldrb	r3, [r7, #11]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d3df      	bcc.n	80004b2 <uart_uart1_transmit+0x1a>
		}
	}

	//wait for busy flag
	while (USART1->SR &	USART_SR_TC)
 80004f2:	e009      	b.n	8000508 <uart_uart1_transmit+0x70>
	{
		if (rcc_get_ticks() - startTick >= timeout) return false;
 80004f4:	f7ff ff2a 	bl	800034c <rcc_get_ticks>
 80004f8:	4602      	mov	r2, r0
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	d801      	bhi.n	8000508 <uart_uart1_transmit+0x70>
 8000504:	2300      	movs	r3, #0
 8000506:	e006      	b.n	8000516 <uart_uart1_transmit+0x7e>
	while (USART1->SR &	USART_SR_TC)
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <uart_uart1_transmit+0x88>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1ef      	bne.n	80004f4 <uart_uart1_transmit+0x5c>
	}
	return true;
 8000514:	2301      	movs	r3, #1
}
 8000516:	4618      	mov	r0, r3
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40011000 	.word	0x40011000

08000524 <main>:

void printmsg(char *format,...);


int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	//tạo ngắt 1ms với 16M ahb (mặc định)
	rcc_Systick_config(16000);
 8000528:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800052c:	f7ff ff3a 	bl	80003a4 <rcc_Systick_config>
	USART1_Init();
 8000530:	f7ff ff64 	bl	80003fc <USART1_Init>

	while(1)
	{

//		uart_uart1_transmit((uint8_t*)data,strlen(data),HUY_MAX_DELAY);
		printmsg("hello world \r\n");
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <main+0x20>)
 8000536:	f000 f807 	bl	8000548 <printmsg>
		rcc_ms_delay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053e:	f7ff ff11 	bl	8000364 <rcc_ms_delay>
		printmsg("hello world \r\n");
 8000542:	e7f7      	b.n	8000534 <main+0x10>
 8000544:	08000f18 	.word	0x08000f18

08000548 <printmsg>:

}


void printmsg(char *format,...)
 {
 8000548:	b40f      	push	{r0, r1, r2, r3}
 800054a:	b580      	push	{r7, lr}
 800054c:	b096      	sub	sp, #88	; 0x58
 800054e:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000550:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000554:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f8b6 	bl	80006d0 <vsiprintf>
	uart_uart1_transmit((uint8_t *)str, strlen(str), HUY_MAX_DELAY);
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff fe41 	bl	80001f0 <strlen>
 800056e:	4603      	mov	r3, r0
 8000570:	b2d9      	uxtb	r1, r3
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	f04f 32ff 	mov.w	r2, #4294967295
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff8c 	bl	8000498 <uart_uart1_transmit>
	va_end(args);

 }
 8000580:	bf00      	nop
 8000582:	3758      	adds	r7, #88	; 0x58
 8000584:	46bd      	mov	sp, r7
 8000586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800058a:	b004      	add	sp, #16
 800058c:	4770      	bx	lr
	...

08000590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <_sbrk+0x5c>)
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <_sbrk+0x60>)
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <_sbrk+0x64>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <_sbrk+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d207      	bcs.n	80005d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c0:	f000 f846 	bl	8000650 <__errno>
 80005c4:	4603      	mov	r3, r0
 80005c6:	220c      	movs	r2, #12
 80005c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	e009      	b.n	80005e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <_sbrk+0x64>)
 80005e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20020000 	.word	0x20020000
 80005f0:	00000400 	.word	0x00000400
 80005f4:	20000084 	.word	0x20000084
 80005f8:	200000a0 	.word	0x200000a0

080005fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000600:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0a      	ldr	r4, [pc, #40]	; (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062a:	f000 f817 	bl	800065c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff ff79 	bl	8000524 <main>

08000632 <LoopForever>:

LoopForever:
    b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   r0, =_estack
 8000634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000640:	08000f64 	.word	0x08000f64
  ldr r2, =_sbss
 8000644:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000648:	200000a0 	.word	0x200000a0

0800064c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC_IRQHandler>
	...

08000650 <__errno>:
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <__errno+0x8>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000

0800065c <__libc_init_array>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4d0d      	ldr	r5, [pc, #52]	; (8000694 <__libc_init_array+0x38>)
 8000660:	4c0d      	ldr	r4, [pc, #52]	; (8000698 <__libc_init_array+0x3c>)
 8000662:	1b64      	subs	r4, r4, r5
 8000664:	10a4      	asrs	r4, r4, #2
 8000666:	2600      	movs	r6, #0
 8000668:	42a6      	cmp	r6, r4
 800066a:	d109      	bne.n	8000680 <__libc_init_array+0x24>
 800066c:	4d0b      	ldr	r5, [pc, #44]	; (800069c <__libc_init_array+0x40>)
 800066e:	4c0c      	ldr	r4, [pc, #48]	; (80006a0 <__libc_init_array+0x44>)
 8000670:	f000 fc46 	bl	8000f00 <_init>
 8000674:	1b64      	subs	r4, r4, r5
 8000676:	10a4      	asrs	r4, r4, #2
 8000678:	2600      	movs	r6, #0
 800067a:	42a6      	cmp	r6, r4
 800067c:	d105      	bne.n	800068a <__libc_init_array+0x2e>
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f855 3b04 	ldr.w	r3, [r5], #4
 8000684:	4798      	blx	r3
 8000686:	3601      	adds	r6, #1
 8000688:	e7ee      	b.n	8000668 <__libc_init_array+0xc>
 800068a:	f855 3b04 	ldr.w	r3, [r5], #4
 800068e:	4798      	blx	r3
 8000690:	3601      	adds	r6, #1
 8000692:	e7f2      	b.n	800067a <__libc_init_array+0x1e>
 8000694:	08000f5c 	.word	0x08000f5c
 8000698:	08000f5c 	.word	0x08000f5c
 800069c:	08000f5c 	.word	0x08000f5c
 80006a0:	08000f60 	.word	0x08000f60

080006a4 <_vsiprintf_r>:
 80006a4:	b500      	push	{lr}
 80006a6:	b09b      	sub	sp, #108	; 0x6c
 80006a8:	9100      	str	r1, [sp, #0]
 80006aa:	9104      	str	r1, [sp, #16]
 80006ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80006b0:	9105      	str	r1, [sp, #20]
 80006b2:	9102      	str	r1, [sp, #8]
 80006b4:	4905      	ldr	r1, [pc, #20]	; (80006cc <_vsiprintf_r+0x28>)
 80006b6:	9103      	str	r1, [sp, #12]
 80006b8:	4669      	mov	r1, sp
 80006ba:	f000 f86f 	bl	800079c <_svfiprintf_r>
 80006be:	9b00      	ldr	r3, [sp, #0]
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
 80006c4:	b01b      	add	sp, #108	; 0x6c
 80006c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ca:	bf00      	nop
 80006cc:	ffff0208 	.word	0xffff0208

080006d0 <vsiprintf>:
 80006d0:	4613      	mov	r3, r2
 80006d2:	460a      	mov	r2, r1
 80006d4:	4601      	mov	r1, r0
 80006d6:	4802      	ldr	r0, [pc, #8]	; (80006e0 <vsiprintf+0x10>)
 80006d8:	6800      	ldr	r0, [r0, #0]
 80006da:	f7ff bfe3 	b.w	80006a4 <_vsiprintf_r>
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000

080006e4 <__ssputs_r>:
 80006e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006e8:	688e      	ldr	r6, [r1, #8]
 80006ea:	429e      	cmp	r6, r3
 80006ec:	4682      	mov	sl, r0
 80006ee:	460c      	mov	r4, r1
 80006f0:	4690      	mov	r8, r2
 80006f2:	461f      	mov	r7, r3
 80006f4:	d838      	bhi.n	8000768 <__ssputs_r+0x84>
 80006f6:	898a      	ldrh	r2, [r1, #12]
 80006f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80006fc:	d032      	beq.n	8000764 <__ssputs_r+0x80>
 80006fe:	6825      	ldr	r5, [r4, #0]
 8000700:	6909      	ldr	r1, [r1, #16]
 8000702:	eba5 0901 	sub.w	r9, r5, r1
 8000706:	6965      	ldr	r5, [r4, #20]
 8000708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800070c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000710:	3301      	adds	r3, #1
 8000712:	444b      	add	r3, r9
 8000714:	106d      	asrs	r5, r5, #1
 8000716:	429d      	cmp	r5, r3
 8000718:	bf38      	it	cc
 800071a:	461d      	movcc	r5, r3
 800071c:	0553      	lsls	r3, r2, #21
 800071e:	d531      	bpl.n	8000784 <__ssputs_r+0xa0>
 8000720:	4629      	mov	r1, r5
 8000722:	f000 fb47 	bl	8000db4 <_malloc_r>
 8000726:	4606      	mov	r6, r0
 8000728:	b950      	cbnz	r0, 8000740 <__ssputs_r+0x5c>
 800072a:	230c      	movs	r3, #12
 800072c:	f8ca 3000 	str.w	r3, [sl]
 8000730:	89a3      	ldrh	r3, [r4, #12]
 8000732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000736:	81a3      	strh	r3, [r4, #12]
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000740:	6921      	ldr	r1, [r4, #16]
 8000742:	464a      	mov	r2, r9
 8000744:	f000 fabe 	bl	8000cc4 <memcpy>
 8000748:	89a3      	ldrh	r3, [r4, #12]
 800074a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	81a3      	strh	r3, [r4, #12]
 8000754:	6126      	str	r6, [r4, #16]
 8000756:	6165      	str	r5, [r4, #20]
 8000758:	444e      	add	r6, r9
 800075a:	eba5 0509 	sub.w	r5, r5, r9
 800075e:	6026      	str	r6, [r4, #0]
 8000760:	60a5      	str	r5, [r4, #8]
 8000762:	463e      	mov	r6, r7
 8000764:	42be      	cmp	r6, r7
 8000766:	d900      	bls.n	800076a <__ssputs_r+0x86>
 8000768:	463e      	mov	r6, r7
 800076a:	4632      	mov	r2, r6
 800076c:	6820      	ldr	r0, [r4, #0]
 800076e:	4641      	mov	r1, r8
 8000770:	f000 fab6 	bl	8000ce0 <memmove>
 8000774:	68a3      	ldr	r3, [r4, #8]
 8000776:	6822      	ldr	r2, [r4, #0]
 8000778:	1b9b      	subs	r3, r3, r6
 800077a:	4432      	add	r2, r6
 800077c:	60a3      	str	r3, [r4, #8]
 800077e:	6022      	str	r2, [r4, #0]
 8000780:	2000      	movs	r0, #0
 8000782:	e7db      	b.n	800073c <__ssputs_r+0x58>
 8000784:	462a      	mov	r2, r5
 8000786:	f000 fb6f 	bl	8000e68 <_realloc_r>
 800078a:	4606      	mov	r6, r0
 800078c:	2800      	cmp	r0, #0
 800078e:	d1e1      	bne.n	8000754 <__ssputs_r+0x70>
 8000790:	6921      	ldr	r1, [r4, #16]
 8000792:	4650      	mov	r0, sl
 8000794:	f000 fabe 	bl	8000d14 <_free_r>
 8000798:	e7c7      	b.n	800072a <__ssputs_r+0x46>
	...

0800079c <_svfiprintf_r>:
 800079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007a0:	4698      	mov	r8, r3
 80007a2:	898b      	ldrh	r3, [r1, #12]
 80007a4:	061b      	lsls	r3, r3, #24
 80007a6:	b09d      	sub	sp, #116	; 0x74
 80007a8:	4607      	mov	r7, r0
 80007aa:	460d      	mov	r5, r1
 80007ac:	4614      	mov	r4, r2
 80007ae:	d50e      	bpl.n	80007ce <_svfiprintf_r+0x32>
 80007b0:	690b      	ldr	r3, [r1, #16]
 80007b2:	b963      	cbnz	r3, 80007ce <_svfiprintf_r+0x32>
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	f000 fafd 	bl	8000db4 <_malloc_r>
 80007ba:	6028      	str	r0, [r5, #0]
 80007bc:	6128      	str	r0, [r5, #16]
 80007be:	b920      	cbnz	r0, 80007ca <_svfiprintf_r+0x2e>
 80007c0:	230c      	movs	r3, #12
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	e0d1      	b.n	800096e <_svfiprintf_r+0x1d2>
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	616b      	str	r3, [r5, #20]
 80007ce:	2300      	movs	r3, #0
 80007d0:	9309      	str	r3, [sp, #36]	; 0x24
 80007d2:	2320      	movs	r3, #32
 80007d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80007d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80007dc:	2330      	movs	r3, #48	; 0x30
 80007de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000988 <_svfiprintf_r+0x1ec>
 80007e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80007e6:	f04f 0901 	mov.w	r9, #1
 80007ea:	4623      	mov	r3, r4
 80007ec:	469a      	mov	sl, r3
 80007ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80007f2:	b10a      	cbz	r2, 80007f8 <_svfiprintf_r+0x5c>
 80007f4:	2a25      	cmp	r2, #37	; 0x25
 80007f6:	d1f9      	bne.n	80007ec <_svfiprintf_r+0x50>
 80007f8:	ebba 0b04 	subs.w	fp, sl, r4
 80007fc:	d00b      	beq.n	8000816 <_svfiprintf_r+0x7a>
 80007fe:	465b      	mov	r3, fp
 8000800:	4622      	mov	r2, r4
 8000802:	4629      	mov	r1, r5
 8000804:	4638      	mov	r0, r7
 8000806:	f7ff ff6d 	bl	80006e4 <__ssputs_r>
 800080a:	3001      	adds	r0, #1
 800080c:	f000 80aa 	beq.w	8000964 <_svfiprintf_r+0x1c8>
 8000810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000812:	445a      	add	r2, fp
 8000814:	9209      	str	r2, [sp, #36]	; 0x24
 8000816:	f89a 3000 	ldrb.w	r3, [sl]
 800081a:	2b00      	cmp	r3, #0
 800081c:	f000 80a2 	beq.w	8000964 <_svfiprintf_r+0x1c8>
 8000820:	2300      	movs	r3, #0
 8000822:	f04f 32ff 	mov.w	r2, #4294967295
 8000826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800082a:	f10a 0a01 	add.w	sl, sl, #1
 800082e:	9304      	str	r3, [sp, #16]
 8000830:	9307      	str	r3, [sp, #28]
 8000832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000836:	931a      	str	r3, [sp, #104]	; 0x68
 8000838:	4654      	mov	r4, sl
 800083a:	2205      	movs	r2, #5
 800083c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000840:	4851      	ldr	r0, [pc, #324]	; (8000988 <_svfiprintf_r+0x1ec>)
 8000842:	f7ff fcdd 	bl	8000200 <memchr>
 8000846:	9a04      	ldr	r2, [sp, #16]
 8000848:	b9d8      	cbnz	r0, 8000882 <_svfiprintf_r+0xe6>
 800084a:	06d0      	lsls	r0, r2, #27
 800084c:	bf44      	itt	mi
 800084e:	2320      	movmi	r3, #32
 8000850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000854:	0711      	lsls	r1, r2, #28
 8000856:	bf44      	itt	mi
 8000858:	232b      	movmi	r3, #43	; 0x2b
 800085a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800085e:	f89a 3000 	ldrb.w	r3, [sl]
 8000862:	2b2a      	cmp	r3, #42	; 0x2a
 8000864:	d015      	beq.n	8000892 <_svfiprintf_r+0xf6>
 8000866:	9a07      	ldr	r2, [sp, #28]
 8000868:	4654      	mov	r4, sl
 800086a:	2000      	movs	r0, #0
 800086c:	f04f 0c0a 	mov.w	ip, #10
 8000870:	4621      	mov	r1, r4
 8000872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000876:	3b30      	subs	r3, #48	; 0x30
 8000878:	2b09      	cmp	r3, #9
 800087a:	d94e      	bls.n	800091a <_svfiprintf_r+0x17e>
 800087c:	b1b0      	cbz	r0, 80008ac <_svfiprintf_r+0x110>
 800087e:	9207      	str	r2, [sp, #28]
 8000880:	e014      	b.n	80008ac <_svfiprintf_r+0x110>
 8000882:	eba0 0308 	sub.w	r3, r0, r8
 8000886:	fa09 f303 	lsl.w	r3, r9, r3
 800088a:	4313      	orrs	r3, r2
 800088c:	9304      	str	r3, [sp, #16]
 800088e:	46a2      	mov	sl, r4
 8000890:	e7d2      	b.n	8000838 <_svfiprintf_r+0x9c>
 8000892:	9b03      	ldr	r3, [sp, #12]
 8000894:	1d19      	adds	r1, r3, #4
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	9103      	str	r1, [sp, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	bfbb      	ittet	lt
 800089e:	425b      	neglt	r3, r3
 80008a0:	f042 0202 	orrlt.w	r2, r2, #2
 80008a4:	9307      	strge	r3, [sp, #28]
 80008a6:	9307      	strlt	r3, [sp, #28]
 80008a8:	bfb8      	it	lt
 80008aa:	9204      	strlt	r2, [sp, #16]
 80008ac:	7823      	ldrb	r3, [r4, #0]
 80008ae:	2b2e      	cmp	r3, #46	; 0x2e
 80008b0:	d10c      	bne.n	80008cc <_svfiprintf_r+0x130>
 80008b2:	7863      	ldrb	r3, [r4, #1]
 80008b4:	2b2a      	cmp	r3, #42	; 0x2a
 80008b6:	d135      	bne.n	8000924 <_svfiprintf_r+0x188>
 80008b8:	9b03      	ldr	r3, [sp, #12]
 80008ba:	1d1a      	adds	r2, r3, #4
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	9203      	str	r2, [sp, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bfb8      	it	lt
 80008c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80008c8:	3402      	adds	r4, #2
 80008ca:	9305      	str	r3, [sp, #20]
 80008cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000998 <_svfiprintf_r+0x1fc>
 80008d0:	7821      	ldrb	r1, [r4, #0]
 80008d2:	2203      	movs	r2, #3
 80008d4:	4650      	mov	r0, sl
 80008d6:	f7ff fc93 	bl	8000200 <memchr>
 80008da:	b140      	cbz	r0, 80008ee <_svfiprintf_r+0x152>
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	eba0 000a 	sub.w	r0, r0, sl
 80008e2:	fa03 f000 	lsl.w	r0, r3, r0
 80008e6:	9b04      	ldr	r3, [sp, #16]
 80008e8:	4303      	orrs	r3, r0
 80008ea:	3401      	adds	r4, #1
 80008ec:	9304      	str	r3, [sp, #16]
 80008ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008f2:	4826      	ldr	r0, [pc, #152]	; (800098c <_svfiprintf_r+0x1f0>)
 80008f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80008f8:	2206      	movs	r2, #6
 80008fa:	f7ff fc81 	bl	8000200 <memchr>
 80008fe:	2800      	cmp	r0, #0
 8000900:	d038      	beq.n	8000974 <_svfiprintf_r+0x1d8>
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <_svfiprintf_r+0x1f4>)
 8000904:	bb1b      	cbnz	r3, 800094e <_svfiprintf_r+0x1b2>
 8000906:	9b03      	ldr	r3, [sp, #12]
 8000908:	3307      	adds	r3, #7
 800090a:	f023 0307 	bic.w	r3, r3, #7
 800090e:	3308      	adds	r3, #8
 8000910:	9303      	str	r3, [sp, #12]
 8000912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000914:	4433      	add	r3, r6
 8000916:	9309      	str	r3, [sp, #36]	; 0x24
 8000918:	e767      	b.n	80007ea <_svfiprintf_r+0x4e>
 800091a:	fb0c 3202 	mla	r2, ip, r2, r3
 800091e:	460c      	mov	r4, r1
 8000920:	2001      	movs	r0, #1
 8000922:	e7a5      	b.n	8000870 <_svfiprintf_r+0xd4>
 8000924:	2300      	movs	r3, #0
 8000926:	3401      	adds	r4, #1
 8000928:	9305      	str	r3, [sp, #20]
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 0c0a 	mov.w	ip, #10
 8000930:	4620      	mov	r0, r4
 8000932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000936:	3a30      	subs	r2, #48	; 0x30
 8000938:	2a09      	cmp	r2, #9
 800093a:	d903      	bls.n	8000944 <_svfiprintf_r+0x1a8>
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0c5      	beq.n	80008cc <_svfiprintf_r+0x130>
 8000940:	9105      	str	r1, [sp, #20]
 8000942:	e7c3      	b.n	80008cc <_svfiprintf_r+0x130>
 8000944:	fb0c 2101 	mla	r1, ip, r1, r2
 8000948:	4604      	mov	r4, r0
 800094a:	2301      	movs	r3, #1
 800094c:	e7f0      	b.n	8000930 <_svfiprintf_r+0x194>
 800094e:	ab03      	add	r3, sp, #12
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	462a      	mov	r2, r5
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <_svfiprintf_r+0x1f8>)
 8000956:	a904      	add	r1, sp, #16
 8000958:	4638      	mov	r0, r7
 800095a:	f3af 8000 	nop.w
 800095e:	1c42      	adds	r2, r0, #1
 8000960:	4606      	mov	r6, r0
 8000962:	d1d6      	bne.n	8000912 <_svfiprintf_r+0x176>
 8000964:	89ab      	ldrh	r3, [r5, #12]
 8000966:	065b      	lsls	r3, r3, #25
 8000968:	f53f af2c 	bmi.w	80007c4 <_svfiprintf_r+0x28>
 800096c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800096e:	b01d      	add	sp, #116	; 0x74
 8000970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000974:	ab03      	add	r3, sp, #12
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	462a      	mov	r2, r5
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <_svfiprintf_r+0x1f8>)
 800097c:	a904      	add	r1, sp, #16
 800097e:	4638      	mov	r0, r7
 8000980:	f000 f87a 	bl	8000a78 <_printf_i>
 8000984:	e7eb      	b.n	800095e <_svfiprintf_r+0x1c2>
 8000986:	bf00      	nop
 8000988:	08000f27 	.word	0x08000f27
 800098c:	08000f31 	.word	0x08000f31
 8000990:	00000000 	.word	0x00000000
 8000994:	080006e5 	.word	0x080006e5
 8000998:	08000f2d 	.word	0x08000f2d

0800099c <_printf_common>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	4616      	mov	r6, r2
 80009a2:	4699      	mov	r9, r3
 80009a4:	688a      	ldr	r2, [r1, #8]
 80009a6:	690b      	ldr	r3, [r1, #16]
 80009a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	bfb8      	it	lt
 80009b0:	4613      	movlt	r3, r2
 80009b2:	6033      	str	r3, [r6, #0]
 80009b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80009b8:	4607      	mov	r7, r0
 80009ba:	460c      	mov	r4, r1
 80009bc:	b10a      	cbz	r2, 80009c2 <_printf_common+0x26>
 80009be:	3301      	adds	r3, #1
 80009c0:	6033      	str	r3, [r6, #0]
 80009c2:	6823      	ldr	r3, [r4, #0]
 80009c4:	0699      	lsls	r1, r3, #26
 80009c6:	bf42      	ittt	mi
 80009c8:	6833      	ldrmi	r3, [r6, #0]
 80009ca:	3302      	addmi	r3, #2
 80009cc:	6033      	strmi	r3, [r6, #0]
 80009ce:	6825      	ldr	r5, [r4, #0]
 80009d0:	f015 0506 	ands.w	r5, r5, #6
 80009d4:	d106      	bne.n	80009e4 <_printf_common+0x48>
 80009d6:	f104 0a19 	add.w	sl, r4, #25
 80009da:	68e3      	ldr	r3, [r4, #12]
 80009dc:	6832      	ldr	r2, [r6, #0]
 80009de:	1a9b      	subs	r3, r3, r2
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	dc26      	bgt.n	8000a32 <_printf_common+0x96>
 80009e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80009e8:	1e13      	subs	r3, r2, #0
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	bf18      	it	ne
 80009ee:	2301      	movne	r3, #1
 80009f0:	0692      	lsls	r2, r2, #26
 80009f2:	d42b      	bmi.n	8000a4c <_printf_common+0xb0>
 80009f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80009f8:	4649      	mov	r1, r9
 80009fa:	4638      	mov	r0, r7
 80009fc:	47c0      	blx	r8
 80009fe:	3001      	adds	r0, #1
 8000a00:	d01e      	beq.n	8000a40 <_printf_common+0xa4>
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	68e5      	ldr	r5, [r4, #12]
 8000a06:	6832      	ldr	r2, [r6, #0]
 8000a08:	f003 0306 	and.w	r3, r3, #6
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	bf08      	it	eq
 8000a10:	1aad      	subeq	r5, r5, r2
 8000a12:	68a3      	ldr	r3, [r4, #8]
 8000a14:	6922      	ldr	r2, [r4, #16]
 8000a16:	bf0c      	ite	eq
 8000a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000a1c:	2500      	movne	r5, #0
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	bfc4      	itt	gt
 8000a22:	1a9b      	subgt	r3, r3, r2
 8000a24:	18ed      	addgt	r5, r5, r3
 8000a26:	2600      	movs	r6, #0
 8000a28:	341a      	adds	r4, #26
 8000a2a:	42b5      	cmp	r5, r6
 8000a2c:	d11a      	bne.n	8000a64 <_printf_common+0xc8>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	e008      	b.n	8000a44 <_printf_common+0xa8>
 8000a32:	2301      	movs	r3, #1
 8000a34:	4652      	mov	r2, sl
 8000a36:	4649      	mov	r1, r9
 8000a38:	4638      	mov	r0, r7
 8000a3a:	47c0      	blx	r8
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	d103      	bne.n	8000a48 <_printf_common+0xac>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	3501      	adds	r5, #1
 8000a4a:	e7c6      	b.n	80009da <_printf_common+0x3e>
 8000a4c:	18e1      	adds	r1, r4, r3
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	2030      	movs	r0, #48	; 0x30
 8000a52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000a56:	4422      	add	r2, r4
 8000a58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000a5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000a60:	3302      	adds	r3, #2
 8000a62:	e7c7      	b.n	80009f4 <_printf_common+0x58>
 8000a64:	2301      	movs	r3, #1
 8000a66:	4622      	mov	r2, r4
 8000a68:	4649      	mov	r1, r9
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	47c0      	blx	r8
 8000a6e:	3001      	adds	r0, #1
 8000a70:	d0e6      	beq.n	8000a40 <_printf_common+0xa4>
 8000a72:	3601      	adds	r6, #1
 8000a74:	e7d9      	b.n	8000a2a <_printf_common+0x8e>
	...

08000a78 <_printf_i>:
 8000a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a7c:	460c      	mov	r4, r1
 8000a7e:	4691      	mov	r9, r2
 8000a80:	7e27      	ldrb	r7, [r4, #24]
 8000a82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000a84:	2f78      	cmp	r7, #120	; 0x78
 8000a86:	4680      	mov	r8, r0
 8000a88:	469a      	mov	sl, r3
 8000a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000a8e:	d807      	bhi.n	8000aa0 <_printf_i+0x28>
 8000a90:	2f62      	cmp	r7, #98	; 0x62
 8000a92:	d80a      	bhi.n	8000aaa <_printf_i+0x32>
 8000a94:	2f00      	cmp	r7, #0
 8000a96:	f000 80d8 	beq.w	8000c4a <_printf_i+0x1d2>
 8000a9a:	2f58      	cmp	r7, #88	; 0x58
 8000a9c:	f000 80a3 	beq.w	8000be6 <_printf_i+0x16e>
 8000aa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000aa8:	e03a      	b.n	8000b20 <_printf_i+0xa8>
 8000aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000aae:	2b15      	cmp	r3, #21
 8000ab0:	d8f6      	bhi.n	8000aa0 <_printf_i+0x28>
 8000ab2:	a001      	add	r0, pc, #4	; (adr r0, 8000ab8 <_printf_i+0x40>)
 8000ab4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000ab8:	08000b11 	.word	0x08000b11
 8000abc:	08000b25 	.word	0x08000b25
 8000ac0:	08000aa1 	.word	0x08000aa1
 8000ac4:	08000aa1 	.word	0x08000aa1
 8000ac8:	08000aa1 	.word	0x08000aa1
 8000acc:	08000aa1 	.word	0x08000aa1
 8000ad0:	08000b25 	.word	0x08000b25
 8000ad4:	08000aa1 	.word	0x08000aa1
 8000ad8:	08000aa1 	.word	0x08000aa1
 8000adc:	08000aa1 	.word	0x08000aa1
 8000ae0:	08000aa1 	.word	0x08000aa1
 8000ae4:	08000c31 	.word	0x08000c31
 8000ae8:	08000b55 	.word	0x08000b55
 8000aec:	08000c13 	.word	0x08000c13
 8000af0:	08000aa1 	.word	0x08000aa1
 8000af4:	08000aa1 	.word	0x08000aa1
 8000af8:	08000c53 	.word	0x08000c53
 8000afc:	08000aa1 	.word	0x08000aa1
 8000b00:	08000b55 	.word	0x08000b55
 8000b04:	08000aa1 	.word	0x08000aa1
 8000b08:	08000aa1 	.word	0x08000aa1
 8000b0c:	08000c1b 	.word	0x08000c1b
 8000b10:	680b      	ldr	r3, [r1, #0]
 8000b12:	1d1a      	adds	r2, r3, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	600a      	str	r2, [r1, #0]
 8000b18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000b20:	2301      	movs	r3, #1
 8000b22:	e0a3      	b.n	8000c6c <_printf_i+0x1f4>
 8000b24:	6825      	ldr	r5, [r4, #0]
 8000b26:	6808      	ldr	r0, [r1, #0]
 8000b28:	062e      	lsls	r6, r5, #24
 8000b2a:	f100 0304 	add.w	r3, r0, #4
 8000b2e:	d50a      	bpl.n	8000b46 <_printf_i+0xce>
 8000b30:	6805      	ldr	r5, [r0, #0]
 8000b32:	600b      	str	r3, [r1, #0]
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	da03      	bge.n	8000b40 <_printf_i+0xc8>
 8000b38:	232d      	movs	r3, #45	; 0x2d
 8000b3a:	426d      	negs	r5, r5
 8000b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000b40:	485e      	ldr	r0, [pc, #376]	; (8000cbc <_printf_i+0x244>)
 8000b42:	230a      	movs	r3, #10
 8000b44:	e019      	b.n	8000b7a <_printf_i+0x102>
 8000b46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000b4a:	6805      	ldr	r5, [r0, #0]
 8000b4c:	600b      	str	r3, [r1, #0]
 8000b4e:	bf18      	it	ne
 8000b50:	b22d      	sxthne	r5, r5
 8000b52:	e7ef      	b.n	8000b34 <_printf_i+0xbc>
 8000b54:	680b      	ldr	r3, [r1, #0]
 8000b56:	6825      	ldr	r5, [r4, #0]
 8000b58:	1d18      	adds	r0, r3, #4
 8000b5a:	6008      	str	r0, [r1, #0]
 8000b5c:	0628      	lsls	r0, r5, #24
 8000b5e:	d501      	bpl.n	8000b64 <_printf_i+0xec>
 8000b60:	681d      	ldr	r5, [r3, #0]
 8000b62:	e002      	b.n	8000b6a <_printf_i+0xf2>
 8000b64:	0669      	lsls	r1, r5, #25
 8000b66:	d5fb      	bpl.n	8000b60 <_printf_i+0xe8>
 8000b68:	881d      	ldrh	r5, [r3, #0]
 8000b6a:	4854      	ldr	r0, [pc, #336]	; (8000cbc <_printf_i+0x244>)
 8000b6c:	2f6f      	cmp	r7, #111	; 0x6f
 8000b6e:	bf0c      	ite	eq
 8000b70:	2308      	moveq	r3, #8
 8000b72:	230a      	movne	r3, #10
 8000b74:	2100      	movs	r1, #0
 8000b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000b7a:	6866      	ldr	r6, [r4, #4]
 8000b7c:	60a6      	str	r6, [r4, #8]
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	bfa2      	ittt	ge
 8000b82:	6821      	ldrge	r1, [r4, #0]
 8000b84:	f021 0104 	bicge.w	r1, r1, #4
 8000b88:	6021      	strge	r1, [r4, #0]
 8000b8a:	b90d      	cbnz	r5, 8000b90 <_printf_i+0x118>
 8000b8c:	2e00      	cmp	r6, #0
 8000b8e:	d04d      	beq.n	8000c2c <_printf_i+0x1b4>
 8000b90:	4616      	mov	r6, r2
 8000b92:	fbb5 f1f3 	udiv	r1, r5, r3
 8000b96:	fb03 5711 	mls	r7, r3, r1, r5
 8000b9a:	5dc7      	ldrb	r7, [r0, r7]
 8000b9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ba0:	462f      	mov	r7, r5
 8000ba2:	42bb      	cmp	r3, r7
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	d9f4      	bls.n	8000b92 <_printf_i+0x11a>
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	d10b      	bne.n	8000bc4 <_printf_i+0x14c>
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	07df      	lsls	r7, r3, #31
 8000bb0:	d508      	bpl.n	8000bc4 <_printf_i+0x14c>
 8000bb2:	6923      	ldr	r3, [r4, #16]
 8000bb4:	6861      	ldr	r1, [r4, #4]
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	bfde      	ittt	le
 8000bba:	2330      	movle	r3, #48	; 0x30
 8000bbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000bc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000bc4:	1b92      	subs	r2, r2, r6
 8000bc6:	6122      	str	r2, [r4, #16]
 8000bc8:	f8cd a000 	str.w	sl, [sp]
 8000bcc:	464b      	mov	r3, r9
 8000bce:	aa03      	add	r2, sp, #12
 8000bd0:	4621      	mov	r1, r4
 8000bd2:	4640      	mov	r0, r8
 8000bd4:	f7ff fee2 	bl	800099c <_printf_common>
 8000bd8:	3001      	adds	r0, #1
 8000bda:	d14c      	bne.n	8000c76 <_printf_i+0x1fe>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	b004      	add	sp, #16
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	4835      	ldr	r0, [pc, #212]	; (8000cbc <_printf_i+0x244>)
 8000be8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	680e      	ldr	r6, [r1, #0]
 8000bf0:	061f      	lsls	r7, r3, #24
 8000bf2:	f856 5b04 	ldr.w	r5, [r6], #4
 8000bf6:	600e      	str	r6, [r1, #0]
 8000bf8:	d514      	bpl.n	8000c24 <_printf_i+0x1ac>
 8000bfa:	07d9      	lsls	r1, r3, #31
 8000bfc:	bf44      	itt	mi
 8000bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8000c02:	6023      	strmi	r3, [r4, #0]
 8000c04:	b91d      	cbnz	r5, 8000c0e <_printf_i+0x196>
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	f023 0320 	bic.w	r3, r3, #32
 8000c0c:	6023      	str	r3, [r4, #0]
 8000c0e:	2310      	movs	r3, #16
 8000c10:	e7b0      	b.n	8000b74 <_printf_i+0xfc>
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	6023      	str	r3, [r4, #0]
 8000c1a:	2378      	movs	r3, #120	; 0x78
 8000c1c:	4828      	ldr	r0, [pc, #160]	; (8000cc0 <_printf_i+0x248>)
 8000c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c22:	e7e3      	b.n	8000bec <_printf_i+0x174>
 8000c24:	065e      	lsls	r6, r3, #25
 8000c26:	bf48      	it	mi
 8000c28:	b2ad      	uxthmi	r5, r5
 8000c2a:	e7e6      	b.n	8000bfa <_printf_i+0x182>
 8000c2c:	4616      	mov	r6, r2
 8000c2e:	e7bb      	b.n	8000ba8 <_printf_i+0x130>
 8000c30:	680b      	ldr	r3, [r1, #0]
 8000c32:	6826      	ldr	r6, [r4, #0]
 8000c34:	6960      	ldr	r0, [r4, #20]
 8000c36:	1d1d      	adds	r5, r3, #4
 8000c38:	600d      	str	r5, [r1, #0]
 8000c3a:	0635      	lsls	r5, r6, #24
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	d501      	bpl.n	8000c44 <_printf_i+0x1cc>
 8000c40:	6018      	str	r0, [r3, #0]
 8000c42:	e002      	b.n	8000c4a <_printf_i+0x1d2>
 8000c44:	0671      	lsls	r1, r6, #25
 8000c46:	d5fb      	bpl.n	8000c40 <_printf_i+0x1c8>
 8000c48:	8018      	strh	r0, [r3, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	6123      	str	r3, [r4, #16]
 8000c4e:	4616      	mov	r6, r2
 8000c50:	e7ba      	b.n	8000bc8 <_printf_i+0x150>
 8000c52:	680b      	ldr	r3, [r1, #0]
 8000c54:	1d1a      	adds	r2, r3, #4
 8000c56:	600a      	str	r2, [r1, #0]
 8000c58:	681e      	ldr	r6, [r3, #0]
 8000c5a:	6862      	ldr	r2, [r4, #4]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4630      	mov	r0, r6
 8000c60:	f7ff face 	bl	8000200 <memchr>
 8000c64:	b108      	cbz	r0, 8000c6a <_printf_i+0x1f2>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	6060      	str	r0, [r4, #4]
 8000c6a:	6863      	ldr	r3, [r4, #4]
 8000c6c:	6123      	str	r3, [r4, #16]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000c74:	e7a8      	b.n	8000bc8 <_printf_i+0x150>
 8000c76:	6923      	ldr	r3, [r4, #16]
 8000c78:	4632      	mov	r2, r6
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	4640      	mov	r0, r8
 8000c7e:	47d0      	blx	sl
 8000c80:	3001      	adds	r0, #1
 8000c82:	d0ab      	beq.n	8000bdc <_printf_i+0x164>
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	079b      	lsls	r3, r3, #30
 8000c88:	d413      	bmi.n	8000cb2 <_printf_i+0x23a>
 8000c8a:	68e0      	ldr	r0, [r4, #12]
 8000c8c:	9b03      	ldr	r3, [sp, #12]
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	bfb8      	it	lt
 8000c92:	4618      	movlt	r0, r3
 8000c94:	e7a4      	b.n	8000be0 <_printf_i+0x168>
 8000c96:	2301      	movs	r3, #1
 8000c98:	4632      	mov	r2, r6
 8000c9a:	4649      	mov	r1, r9
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	47d0      	blx	sl
 8000ca0:	3001      	adds	r0, #1
 8000ca2:	d09b      	beq.n	8000bdc <_printf_i+0x164>
 8000ca4:	3501      	adds	r5, #1
 8000ca6:	68e3      	ldr	r3, [r4, #12]
 8000ca8:	9903      	ldr	r1, [sp, #12]
 8000caa:	1a5b      	subs	r3, r3, r1
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	dcf2      	bgt.n	8000c96 <_printf_i+0x21e>
 8000cb0:	e7eb      	b.n	8000c8a <_printf_i+0x212>
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	f104 0619 	add.w	r6, r4, #25
 8000cb8:	e7f5      	b.n	8000ca6 <_printf_i+0x22e>
 8000cba:	bf00      	nop
 8000cbc:	08000f38 	.word	0x08000f38
 8000cc0:	08000f49 	.word	0x08000f49

08000cc4 <memcpy>:
 8000cc4:	440a      	add	r2, r1
 8000cc6:	4291      	cmp	r1, r2
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	d100      	bne.n	8000cd0 <memcpy+0xc>
 8000cce:	4770      	bx	lr
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000cda:	4291      	cmp	r1, r2
 8000cdc:	d1f9      	bne.n	8000cd2 <memcpy+0xe>
 8000cde:	bd10      	pop	{r4, pc}

08000ce0 <memmove>:
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	b510      	push	{r4, lr}
 8000ce4:	eb01 0402 	add.w	r4, r1, r2
 8000ce8:	d902      	bls.n	8000cf0 <memmove+0x10>
 8000cea:	4284      	cmp	r4, r0
 8000cec:	4623      	mov	r3, r4
 8000cee:	d807      	bhi.n	8000d00 <memmove+0x20>
 8000cf0:	1e43      	subs	r3, r0, #1
 8000cf2:	42a1      	cmp	r1, r4
 8000cf4:	d008      	beq.n	8000d08 <memmove+0x28>
 8000cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000cfe:	e7f8      	b.n	8000cf2 <memmove+0x12>
 8000d00:	4402      	add	r2, r0
 8000d02:	4601      	mov	r1, r0
 8000d04:	428a      	cmp	r2, r1
 8000d06:	d100      	bne.n	8000d0a <memmove+0x2a>
 8000d08:	bd10      	pop	{r4, pc}
 8000d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000d12:	e7f7      	b.n	8000d04 <memmove+0x24>

08000d14 <_free_r>:
 8000d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d048      	beq.n	8000dac <_free_r+0x98>
 8000d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d1e:	9001      	str	r0, [sp, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f1a1 0404 	sub.w	r4, r1, #4
 8000d26:	bfb8      	it	lt
 8000d28:	18e4      	addlt	r4, r4, r3
 8000d2a:	f000 f8d3 	bl	8000ed4 <__malloc_lock>
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <_free_r+0x9c>)
 8000d30:	9801      	ldr	r0, [sp, #4]
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	4615      	mov	r5, r2
 8000d36:	b933      	cbnz	r3, 8000d46 <_free_r+0x32>
 8000d38:	6063      	str	r3, [r4, #4]
 8000d3a:	6014      	str	r4, [r2, #0]
 8000d3c:	b003      	add	sp, #12
 8000d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d42:	f000 b8cd 	b.w	8000ee0 <__malloc_unlock>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d90b      	bls.n	8000d62 <_free_r+0x4e>
 8000d4a:	6821      	ldr	r1, [r4, #0]
 8000d4c:	1862      	adds	r2, r4, r1
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	bf04      	itt	eq
 8000d52:	681a      	ldreq	r2, [r3, #0]
 8000d54:	685b      	ldreq	r3, [r3, #4]
 8000d56:	6063      	str	r3, [r4, #4]
 8000d58:	bf04      	itt	eq
 8000d5a:	1852      	addeq	r2, r2, r1
 8000d5c:	6022      	streq	r2, [r4, #0]
 8000d5e:	602c      	str	r4, [r5, #0]
 8000d60:	e7ec      	b.n	8000d3c <_free_r+0x28>
 8000d62:	461a      	mov	r2, r3
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	b10b      	cbz	r3, 8000d6c <_free_r+0x58>
 8000d68:	42a3      	cmp	r3, r4
 8000d6a:	d9fa      	bls.n	8000d62 <_free_r+0x4e>
 8000d6c:	6811      	ldr	r1, [r2, #0]
 8000d6e:	1855      	adds	r5, r2, r1
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	d10b      	bne.n	8000d8c <_free_r+0x78>
 8000d74:	6824      	ldr	r4, [r4, #0]
 8000d76:	4421      	add	r1, r4
 8000d78:	1854      	adds	r4, r2, r1
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	6011      	str	r1, [r2, #0]
 8000d7e:	d1dd      	bne.n	8000d3c <_free_r+0x28>
 8000d80:	681c      	ldr	r4, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	6053      	str	r3, [r2, #4]
 8000d86:	4421      	add	r1, r4
 8000d88:	6011      	str	r1, [r2, #0]
 8000d8a:	e7d7      	b.n	8000d3c <_free_r+0x28>
 8000d8c:	d902      	bls.n	8000d94 <_free_r+0x80>
 8000d8e:	230c      	movs	r3, #12
 8000d90:	6003      	str	r3, [r0, #0]
 8000d92:	e7d3      	b.n	8000d3c <_free_r+0x28>
 8000d94:	6825      	ldr	r5, [r4, #0]
 8000d96:	1961      	adds	r1, r4, r5
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf04      	itt	eq
 8000d9c:	6819      	ldreq	r1, [r3, #0]
 8000d9e:	685b      	ldreq	r3, [r3, #4]
 8000da0:	6063      	str	r3, [r4, #4]
 8000da2:	bf04      	itt	eq
 8000da4:	1949      	addeq	r1, r1, r5
 8000da6:	6021      	streq	r1, [r4, #0]
 8000da8:	6054      	str	r4, [r2, #4]
 8000daa:	e7c7      	b.n	8000d3c <_free_r+0x28>
 8000dac:	b003      	add	sp, #12
 8000dae:	bd30      	pop	{r4, r5, pc}
 8000db0:	20000088 	.word	0x20000088

08000db4 <_malloc_r>:
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db6:	1ccd      	adds	r5, r1, #3
 8000db8:	f025 0503 	bic.w	r5, r5, #3
 8000dbc:	3508      	adds	r5, #8
 8000dbe:	2d0c      	cmp	r5, #12
 8000dc0:	bf38      	it	cc
 8000dc2:	250c      	movcc	r5, #12
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	4606      	mov	r6, r0
 8000dc8:	db01      	blt.n	8000dce <_malloc_r+0x1a>
 8000dca:	42a9      	cmp	r1, r5
 8000dcc:	d903      	bls.n	8000dd6 <_malloc_r+0x22>
 8000dce:	230c      	movs	r3, #12
 8000dd0:	6033      	str	r3, [r6, #0]
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dd6:	f000 f87d 	bl	8000ed4 <__malloc_lock>
 8000dda:	4921      	ldr	r1, [pc, #132]	; (8000e60 <_malloc_r+0xac>)
 8000ddc:	680a      	ldr	r2, [r1, #0]
 8000dde:	4614      	mov	r4, r2
 8000de0:	b99c      	cbnz	r4, 8000e0a <_malloc_r+0x56>
 8000de2:	4f20      	ldr	r7, [pc, #128]	; (8000e64 <_malloc_r+0xb0>)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b923      	cbnz	r3, 8000df2 <_malloc_r+0x3e>
 8000de8:	4621      	mov	r1, r4
 8000dea:	4630      	mov	r0, r6
 8000dec:	f000 f862 	bl	8000eb4 <_sbrk_r>
 8000df0:	6038      	str	r0, [r7, #0]
 8000df2:	4629      	mov	r1, r5
 8000df4:	4630      	mov	r0, r6
 8000df6:	f000 f85d 	bl	8000eb4 <_sbrk_r>
 8000dfa:	1c43      	adds	r3, r0, #1
 8000dfc:	d123      	bne.n	8000e46 <_malloc_r+0x92>
 8000dfe:	230c      	movs	r3, #12
 8000e00:	6033      	str	r3, [r6, #0]
 8000e02:	4630      	mov	r0, r6
 8000e04:	f000 f86c 	bl	8000ee0 <__malloc_unlock>
 8000e08:	e7e3      	b.n	8000dd2 <_malloc_r+0x1e>
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	1b5b      	subs	r3, r3, r5
 8000e0e:	d417      	bmi.n	8000e40 <_malloc_r+0x8c>
 8000e10:	2b0b      	cmp	r3, #11
 8000e12:	d903      	bls.n	8000e1c <_malloc_r+0x68>
 8000e14:	6023      	str	r3, [r4, #0]
 8000e16:	441c      	add	r4, r3
 8000e18:	6025      	str	r5, [r4, #0]
 8000e1a:	e004      	b.n	8000e26 <_malloc_r+0x72>
 8000e1c:	6863      	ldr	r3, [r4, #4]
 8000e1e:	42a2      	cmp	r2, r4
 8000e20:	bf0c      	ite	eq
 8000e22:	600b      	streq	r3, [r1, #0]
 8000e24:	6053      	strne	r3, [r2, #4]
 8000e26:	4630      	mov	r0, r6
 8000e28:	f000 f85a 	bl	8000ee0 <__malloc_unlock>
 8000e2c:	f104 000b 	add.w	r0, r4, #11
 8000e30:	1d23      	adds	r3, r4, #4
 8000e32:	f020 0007 	bic.w	r0, r0, #7
 8000e36:	1ac2      	subs	r2, r0, r3
 8000e38:	d0cc      	beq.n	8000dd4 <_malloc_r+0x20>
 8000e3a:	1a1b      	subs	r3, r3, r0
 8000e3c:	50a3      	str	r3, [r4, r2]
 8000e3e:	e7c9      	b.n	8000dd4 <_malloc_r+0x20>
 8000e40:	4622      	mov	r2, r4
 8000e42:	6864      	ldr	r4, [r4, #4]
 8000e44:	e7cc      	b.n	8000de0 <_malloc_r+0x2c>
 8000e46:	1cc4      	adds	r4, r0, #3
 8000e48:	f024 0403 	bic.w	r4, r4, #3
 8000e4c:	42a0      	cmp	r0, r4
 8000e4e:	d0e3      	beq.n	8000e18 <_malloc_r+0x64>
 8000e50:	1a21      	subs	r1, r4, r0
 8000e52:	4630      	mov	r0, r6
 8000e54:	f000 f82e 	bl	8000eb4 <_sbrk_r>
 8000e58:	3001      	adds	r0, #1
 8000e5a:	d1dd      	bne.n	8000e18 <_malloc_r+0x64>
 8000e5c:	e7cf      	b.n	8000dfe <_malloc_r+0x4a>
 8000e5e:	bf00      	nop
 8000e60:	20000088 	.word	0x20000088
 8000e64:	2000008c 	.word	0x2000008c

08000e68 <_realloc_r>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	4607      	mov	r7, r0
 8000e6c:	4614      	mov	r4, r2
 8000e6e:	460e      	mov	r6, r1
 8000e70:	b921      	cbnz	r1, 8000e7c <_realloc_r+0x14>
 8000e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000e76:	4611      	mov	r1, r2
 8000e78:	f7ff bf9c 	b.w	8000db4 <_malloc_r>
 8000e7c:	b922      	cbnz	r2, 8000e88 <_realloc_r+0x20>
 8000e7e:	f7ff ff49 	bl	8000d14 <_free_r>
 8000e82:	4625      	mov	r5, r4
 8000e84:	4628      	mov	r0, r5
 8000e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e88:	f000 f830 	bl	8000eec <_malloc_usable_size_r>
 8000e8c:	42a0      	cmp	r0, r4
 8000e8e:	d20f      	bcs.n	8000eb0 <_realloc_r+0x48>
 8000e90:	4621      	mov	r1, r4
 8000e92:	4638      	mov	r0, r7
 8000e94:	f7ff ff8e 	bl	8000db4 <_malloc_r>
 8000e98:	4605      	mov	r5, r0
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d0f2      	beq.n	8000e84 <_realloc_r+0x1c>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4622      	mov	r2, r4
 8000ea2:	f7ff ff0f 	bl	8000cc4 <memcpy>
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	4638      	mov	r0, r7
 8000eaa:	f7ff ff33 	bl	8000d14 <_free_r>
 8000eae:	e7e9      	b.n	8000e84 <_realloc_r+0x1c>
 8000eb0:	4635      	mov	r5, r6
 8000eb2:	e7e7      	b.n	8000e84 <_realloc_r+0x1c>

08000eb4 <_sbrk_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4d06      	ldr	r5, [pc, #24]	; (8000ed0 <_sbrk_r+0x1c>)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	602b      	str	r3, [r5, #0]
 8000ec0:	f7ff fb66 	bl	8000590 <_sbrk>
 8000ec4:	1c43      	adds	r3, r0, #1
 8000ec6:	d102      	bne.n	8000ece <_sbrk_r+0x1a>
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	b103      	cbz	r3, 8000ece <_sbrk_r+0x1a>
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	bd38      	pop	{r3, r4, r5, pc}
 8000ed0:	20000090 	.word	0x20000090

08000ed4 <__malloc_lock>:
 8000ed4:	4801      	ldr	r0, [pc, #4]	; (8000edc <__malloc_lock+0x8>)
 8000ed6:	f000 b811 	b.w	8000efc <__retarget_lock_acquire_recursive>
 8000eda:	bf00      	nop
 8000edc:	20000098 	.word	0x20000098

08000ee0 <__malloc_unlock>:
 8000ee0:	4801      	ldr	r0, [pc, #4]	; (8000ee8 <__malloc_unlock+0x8>)
 8000ee2:	f000 b80c 	b.w	8000efe <__retarget_lock_release_recursive>
 8000ee6:	bf00      	nop
 8000ee8:	20000098 	.word	0x20000098

08000eec <_malloc_usable_size_r>:
 8000eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ef0:	1f18      	subs	r0, r3, #4
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bfbc      	itt	lt
 8000ef6:	580b      	ldrlt	r3, [r1, r0]
 8000ef8:	18c0      	addlt	r0, r0, r3
 8000efa:	4770      	bx	lr

08000efc <__retarget_lock_acquire_recursive>:
 8000efc:	4770      	bx	lr

08000efe <__retarget_lock_release_recursive>:
 8000efe:	4770      	bx	lr

08000f00 <_init>:
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	bf00      	nop
 8000f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f06:	bc08      	pop	{r3}
 8000f08:	469e      	mov	lr, r3
 8000f0a:	4770      	bx	lr

08000f0c <_fini>:
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	bf00      	nop
 8000f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f12:	bc08      	pop	{r3}
 8000f14:	469e      	mov	lr, r3
 8000f16:	4770      	bx	lr
