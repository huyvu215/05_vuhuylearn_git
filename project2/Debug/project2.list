
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f694  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cbc  0800f838  0800f838  0001f838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104f4  080104f4  0003055c  2**0
                  CONTENTS
  4 .ARM          00000008  080104f4  080104f4  000204f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104fc  080104fc  0003055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104fc  080104fc  000204fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010500  08010500  00020500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000055c  20000000  08010504  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000055c  08010a60  0003055c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08010a60  000306b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003055c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026ec0  00000000  00000000  0003058c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bff  00000000  00000000  0005744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  0005b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002088  00000000  00000000  0005d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001883c  00000000  00000000  0005f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001921f  00000000  00000000  00077a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090626  00000000  00000000  00090c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4c4  00000000  00000000  001212bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000055c 	.word	0x2000055c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f81c 	.word	0x0800f81c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000560 	.word	0x20000560
 80001dc:	0800f81c 	.word	0x0800f81c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <rawMessageHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Callback handler to log sent or received messages (optional) */
static void rawMessageHandler (void* parameter, uint8_t* msg, int msgSize, bool sent)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	70fb      	strb	r3, [r7, #3]
    if (sent)
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <rawMessageHandler+0x1c>
        printf("SEND: ");
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <rawMessageHandler+0x54>)
 8000ec6:	f00c fa63 	bl	800d390 <iprintf>
 8000eca:	e002      	b.n	8000ed2 <rawMessageHandler+0x22>
    else
        printf("RCVD: ");
 8000ecc:	480e      	ldr	r0, [pc, #56]	; (8000f08 <rawMessageHandler+0x58>)
 8000ece:	f00c fa5f 	bl	800d390 <iprintf>

    int i;
    for (i = 0; i < msgSize; i++) {
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e00a      	b.n	8000eee <rawMessageHandler+0x3e>
        printf("%02x ", msg[i]);
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480a      	ldr	r0, [pc, #40]	; (8000f0c <rawMessageHandler+0x5c>)
 8000ee4:	f00c fa54 	bl	800d390 <iprintf>
    for (i = 0; i < msgSize; i++) {
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbf0      	blt.n	8000ed8 <rawMessageHandler+0x28>
    }

    printf("\n");
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f00c fa62 	bl	800d3c0 <putchar>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	0800f838 	.word	0x0800f838
 8000f08:	0800f840 	.word	0x0800f840
 8000f0c:	0800f848 	.word	0x0800f848

08000f10 <asduReceivedHandler>:

static bool asduReceivedHandler (void* parameter, int address, CS101_ASDU asdu)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
    printf("RECVD ASDU type: %s(%i) elements: %i\n",
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f003 fa2d 	bl	800437c <CS101_ASDU_getTypeID>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 ff73 	bl	8005e10 <TypeID_toString>
 8000f2a:	4604      	mov	r4, r0
            TypeID_toString(CS101_ASDU_getTypeID(asdu)),
            CS101_ASDU_getTypeID(asdu),
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f003 fa25 	bl	800437c <CS101_ASDU_getTypeID>
 8000f32:	4603      	mov	r3, r0
    printf("RECVD ASDU type: %s(%i) elements: %i\n",
 8000f34:	461d      	mov	r5, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f003 fa41 	bl	80043be <CS101_ASDU_getNumberOfElements>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	462a      	mov	r2, r5
 8000f40:	4621      	mov	r1, r4
 8000f42:	485f      	ldr	r0, [pc, #380]	; (80010c0 <asduReceivedHandler+0x1b0>)
 8000f44:	f00c fa24 	bl	800d390 <iprintf>
            CS101_ASDU_getNumberOfElements(asdu));

    if (CS101_ASDU_getTypeID(asdu) == M_ME_TE_1) {
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f003 fa17 	bl	800437c <CS101_ASDU_getTypeID>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b23      	cmp	r3, #35	; 0x23
 8000f52:	d125      	bne.n	8000fa0 <asduReceivedHandler+0x90>

        printf("  measured scaled values with CP56Time2a timestamp:\n");
 8000f54:	485b      	ldr	r0, [pc, #364]	; (80010c4 <asduReceivedHandler+0x1b4>)
 8000f56:	f00c fab7 	bl	800d4c8 <puts>

        int i;

        for (i = 0; i < CS101_ASDU_getNumberOfElements(asdu); i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f5e:	e017      	b.n	8000f90 <asduReceivedHandler+0x80>

            MeasuredValueScaledWithCP56Time2a io =
                    (MeasuredValueScaledWithCP56Time2a) CS101_ASDU_getElement(asdu, i);
 8000f60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f003 fa3b 	bl	80043de <CS101_ASDU_getElement>
 8000f68:	6138      	str	r0, [r7, #16]

            printf("    IOA: %i value: %i\n",
 8000f6a:	6938      	ldr	r0, [r7, #16]
 8000f6c:	f005 f993 	bl	8006296 <InformationObject_getObjectAddress>
 8000f70:	4604      	mov	r4, r0
 8000f72:	6938      	ldr	r0, [r7, #16]
 8000f74:	f006 fe17 	bl	8007ba6 <MeasuredValueScaled_getValue>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	4852      	ldr	r0, [pc, #328]	; (80010c8 <asduReceivedHandler+0x1b8>)
 8000f80:	f00c fa06 	bl	800d390 <iprintf>
                    InformationObject_getObjectAddress((InformationObject) io),
                    MeasuredValueScaled_getValue((MeasuredValueScaled) io)
            );

            MeasuredValueScaledWithCP56Time2a_destroy(io);
 8000f84:	6938      	ldr	r0, [r7, #16]
 8000f86:	f006 ff71 	bl	8007e6c <MeasuredValueScaledWithCP56Time2a_destroy>
        for (i = 0; i < CS101_ASDU_getNumberOfElements(asdu); i++) {
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f003 fa14 	bl	80043be <CS101_ASDU_getNumberOfElements>
 8000f96:	4602      	mov	r2, r0
 8000f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	dbe0      	blt.n	8000f60 <asduReceivedHandler+0x50>
 8000f9e:	e089      	b.n	80010b4 <asduReceivedHandler+0x1a4>
        }
    }
    else if (CS101_ASDU_getTypeID(asdu) == M_SP_NA_1) {
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f003 f9eb 	bl	800437c <CS101_ASDU_getTypeID>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d125      	bne.n	8000ff8 <asduReceivedHandler+0xe8>
        printmsg("single point information:\n\r");
 8000fac:	4847      	ldr	r0, [pc, #284]	; (80010cc <asduReceivedHandler+0x1bc>)
 8000fae:	f000 fb83 	bl	80016b8 <printmsg>

        int i;

        for (i = 0; i < CS101_ASDU_getNumberOfElements(asdu); i++) {
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb6:	e017      	b.n	8000fe8 <asduReceivedHandler+0xd8>

            SinglePointInformation io =
                    (SinglePointInformation) CS101_ASDU_getElement(asdu, i);
 8000fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f003 fa0f 	bl	80043de <CS101_ASDU_getElement>
 8000fc0:	6178      	str	r0, [r7, #20]

            printmsg("    IOA: %d value: %i\n\r",
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f005 f967 	bl	8006296 <InformationObject_getObjectAddress>
 8000fc8:	4604      	mov	r4, r0
                    InformationObject_getObjectAddress((InformationObject) io),
                    SinglePointInformation_getValue((SinglePointInformation) io)
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f005 faa8 	bl	8006520 <SinglePointInformation_getValue>
 8000fd0:	4603      	mov	r3, r0
            printmsg("    IOA: %d value: %i\n\r",
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	483e      	ldr	r0, [pc, #248]	; (80010d0 <asduReceivedHandler+0x1c0>)
 8000fd8:	f000 fb6e 	bl	80016b8 <printmsg>
            );

            SinglePointInformation_destroy(io);
 8000fdc:	6978      	ldr	r0, [r7, #20]
 8000fde:	f005 fa3f 	bl	8006460 <SinglePointInformation_destroy>
        for (i = 0; i < CS101_ASDU_getNumberOfElements(asdu); i++) {
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f003 f9e8 	bl	80043be <CS101_ASDU_getNumberOfElements>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	dbe0      	blt.n	8000fb8 <asduReceivedHandler+0xa8>
 8000ff6:	e05d      	b.n	80010b4 <asduReceivedHandler+0x1a4>
        }
    }

    else if (CS101_ASDU_getTypeID(asdu) == M_ME_NB_1) {
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f003 f9bf 	bl	800437c <CS101_ASDU_getTypeID>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b0b      	cmp	r3, #11
 8001002:	d125      	bne.n	8001050 <asduReceivedHandler+0x140>
        printmsg("scaled measure value:\n\r");
 8001004:	4833      	ldr	r0, [pc, #204]	; (80010d4 <asduReceivedHandler+0x1c4>)
 8001006:	f000 fb57 	bl	80016b8 <printmsg>

        int i;

        for (i = 0; i < CS101_ASDU_getNumberOfElements(asdu); i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
 800100e:	e017      	b.n	8001040 <asduReceivedHandler+0x130>

        	MeasuredValueScaled io =
                    (MeasuredValueScaled) CS101_ASDU_getElement(asdu, i);
 8001010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f003 f9e3 	bl	80043de <CS101_ASDU_getElement>
 8001018:	61b8      	str	r0, [r7, #24]

            printmsg("    IOA: %d value: %i\n\r",
 800101a:	69b8      	ldr	r0, [r7, #24]
 800101c:	f005 f93b 	bl	8006296 <InformationObject_getObjectAddress>
 8001020:	4604      	mov	r4, r0
 8001022:	69b8      	ldr	r0, [r7, #24]
 8001024:	f006 fdbf 	bl	8007ba6 <MeasuredValueScaled_getValue>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4621      	mov	r1, r4
 800102e:	4828      	ldr	r0, [pc, #160]	; (80010d0 <asduReceivedHandler+0x1c0>)
 8001030:	f000 fb42 	bl	80016b8 <printmsg>
                    InformationObject_getObjectAddress((InformationObject) io),
                    MeasuredValueScaled_getValue((MeasuredValueScaled)io)
            );

            MeasuredValueScaled_destroy(io);
 8001034:	69b8      	ldr	r0, [r7, #24]
 8001036:	f006 fdab 	bl	8007b90 <MeasuredValueScaled_destroy>
        for (i = 0; i < CS101_ASDU_getNumberOfElements(asdu); i++) {
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	3301      	adds	r3, #1
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f003 f9bc 	bl	80043be <CS101_ASDU_getNumberOfElements>
 8001046:	4602      	mov	r2, r0
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	4293      	cmp	r3, r2
 800104c:	dbe0      	blt.n	8001010 <asduReceivedHandler+0x100>
 800104e:	e031      	b.n	80010b4 <asduReceivedHandler+0x1a4>
        }
    }

    else if (CS101_ASDU_getTypeID(asdu) == M_ME_NC_1) {
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f003 f993 	bl	800437c <CS101_ASDU_getTypeID>
 8001056:	4603      	mov	r3, r0
 8001058:	2b0d      	cmp	r3, #13
 800105a:	d12b      	bne.n	80010b4 <asduReceivedHandler+0x1a4>
        printmsg("float value:\n\r");
 800105c:	481e      	ldr	r0, [pc, #120]	; (80010d8 <asduReceivedHandler+0x1c8>)
 800105e:	f000 fb2b 	bl	80016b8 <printmsg>

        int i;

        for (i = 0; i < CS101_ASDU_getNumberOfElements(asdu); i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
 8001066:	e01e      	b.n	80010a6 <asduReceivedHandler+0x196>

        	MeasuredValueShort io =
                    (MeasuredValueShort) CS101_ASDU_getElement(asdu, i);
 8001068:	6a39      	ldr	r1, [r7, #32]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f003 f9b7 	bl	80043de <CS101_ASDU_getElement>
 8001070:	61f8      	str	r0, [r7, #28]

            printmsg("    IOA: %d value: %f\n\r",
 8001072:	69f8      	ldr	r0, [r7, #28]
 8001074:	f005 f90f 	bl	8006296 <InformationObject_getObjectAddress>
 8001078:	4604      	mov	r4, r0
                    InformationObject_getObjectAddress((InformationObject) io),
					MeasuredValueShort_getValue((MeasuredValueShort)io)
 800107a:	69f8      	ldr	r0, [r7, #28]
 800107c:	f006 ffb3 	bl	8007fe6 <MeasuredValueShort_getValue>
 8001080:	ee10 3a10 	vmov	r3, s0
            printmsg("    IOA: %d value: %f\n\r",
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa67 	bl	8000558 <__aeabi_f2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	ec43 2b10 	vmov	d0, r2, r3
 8001092:	4621      	mov	r1, r4
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <asduReceivedHandler+0x1cc>)
 8001096:	f000 fb0f 	bl	80016b8 <printmsg>
            );

            MeasuredValueShort_destroy(io);
 800109a:	69f8      	ldr	r0, [r7, #28]
 800109c:	f006 ff98 	bl	8007fd0 <MeasuredValueShort_destroy>
        for (i = 0; i < CS101_ASDU_getNumberOfElements(asdu); i++) {
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	3301      	adds	r3, #1
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f003 f989 	bl	80043be <CS101_ASDU_getNumberOfElements>
 80010ac:	4602      	mov	r2, r0
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	4293      	cmp	r3, r2
 80010b2:	dbd9      	blt.n	8001068 <asduReceivedHandler+0x158>
        }
    }

    return true;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3730      	adds	r7, #48	; 0x30
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdb0      	pop	{r4, r5, r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800f850 	.word	0x0800f850
 80010c4:	0800f878 	.word	0x0800f878
 80010c8:	0800f8ac 	.word	0x0800f8ac
 80010cc:	0800f8c4 	.word	0x0800f8c4
 80010d0:	0800f8e0 	.word	0x0800f8e0
 80010d4:	0800f8f8 	.word	0x0800f8f8
 80010d8:	0800f910 	.word	0x0800f910
 80010dc:	0800f920 	.word	0x0800f920

080010e0 <linkLayerStateChanged>:
static void linkLayerStateChanged(void* parameter, int address, LinkLayerState state)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	4613      	mov	r3, r2
 80010ec:	71fb      	strb	r3, [r7, #7]
    printf("Link layer state: ");
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <linkLayerStateChanged+0x58>)
 80010f0:	f00c f94e 	bl	800d390 <iprintf>

    switch (state) {
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d81a      	bhi.n	8001130 <linkLayerStateChanged+0x50>
 80010fa:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <linkLayerStateChanged+0x20>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	08001111 	.word	0x08001111
 8001104:	08001119 	.word	0x08001119
 8001108:	08001121 	.word	0x08001121
 800110c:	08001129 	.word	0x08001129
    case LL_STATE_IDLE:
        printf("IDLE\n");
 8001110:	480a      	ldr	r0, [pc, #40]	; (800113c <linkLayerStateChanged+0x5c>)
 8001112:	f00c f9d9 	bl	800d4c8 <puts>
        break;
 8001116:	e00b      	b.n	8001130 <linkLayerStateChanged+0x50>
    case LL_STATE_ERROR:
        printf("ERROR\n");
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <linkLayerStateChanged+0x60>)
 800111a:	f00c f9d5 	bl	800d4c8 <puts>
        break;
 800111e:	e007      	b.n	8001130 <linkLayerStateChanged+0x50>
    case LL_STATE_BUSY:
        printf("BUSY\n");
 8001120:	4808      	ldr	r0, [pc, #32]	; (8001144 <linkLayerStateChanged+0x64>)
 8001122:	f00c f9d1 	bl	800d4c8 <puts>
        break;
 8001126:	e003      	b.n	8001130 <linkLayerStateChanged+0x50>
    case LL_STATE_AVAILABLE:
        printf("AVAILABLE\n");
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <linkLayerStateChanged+0x68>)
 800112a:	f00c f9cd 	bl	800d4c8 <puts>
        break;
 800112e:	bf00      	nop
    }
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	0800f938 	.word	0x0800f938
 800113c:	0800f94c 	.word	0x0800f94c
 8001140:	0800f954 	.word	0x0800f954
 8001144:	0800f95c 	.word	0x0800f95c
 8001148:	0800f964 	.word	0x0800f964

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b09c      	sub	sp, #112	; 0x70
 8001150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001152:	f000 fd57 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001156:	f000 f959 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115a:	f000 fa29 	bl	80015b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800115e:	f000 f9fd 	bl	800155c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001162:	f000 f9bd 	bl	80014e0 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001166:	f000 f9cf 	bl	8001508 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  SerialPort port = SerialPort_create(serialPort, 9600, 8, 'E', 1);
//
//   CS101_Master master = CS101_Master_create(port, NULL, NULL, IEC60870_LINK_LAYER_BALANCED);
  CS101_Master master = CS101_Master_create(NULL, NULL, NULL, IEC60870_LINK_LAYER_BALANCED);
 800116a:	2300      	movs	r3, #0
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2000      	movs	r0, #0
 8001172:	f00a fdab 	bl	800bccc <CS101_Master_create>
 8001176:	6678      	str	r0, [r7, #100]	; 0x64


     CS101_Master_setOwnAddress(master, 2);
 8001178:	2102      	movs	r1, #2
 800117a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800117c:	f00a fdba 	bl	800bcf4 <CS101_Master_setOwnAddress>

     /* Set the address of the slave (optional for balanced master */
     CS101_Master_useSlaveAddress(master, 3);
 8001180:	2103      	movs	r1, #3
 8001182:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001184:	f00a fdc9 	bl	800bd1a <CS101_Master_useSlaveAddress>

     /* set handler for received ASDUs (application layer data) */
     CS101_Master_setASDUReceivedHandler(master, asduReceivedHandler, NULL);
 8001188:	2200      	movs	r2, #0
 800118a:	498a      	ldr	r1, [pc, #552]	; (80013b4 <main+0x268>)
 800118c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800118e:	f00a ff05 	bl	800bf9c <CS101_Master_setASDUReceivedHandler>

     /* modify some of the default parameters */
     LinkLayerParameters llParams = CS101_Master_getLinkLayerParameters(master);
 8001192:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001194:	f00a fdd7 	bl	800bd46 <CS101_Master_getLinkLayerParameters>
 8001198:	6638      	str	r0, [r7, #96]	; 0x60
     llParams->useSingleCharACK = false;
 800119a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800119c:	2200      	movs	r2, #0
 800119e:	731a      	strb	r2, [r3, #12]

     /* set handler for link layer state changes */
     /* set handler for link layer state changes */
     CS101_Master_setLinkLayerStateChanged(master, linkLayerStateChanged, NULL);
 80011a0:	2200      	movs	r2, #0
 80011a2:	4985      	ldr	r1, [pc, #532]	; (80013b8 <main+0x26c>)
 80011a4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80011a6:	f00a ff0b 	bl	800bfc0 <CS101_Master_setLinkLayerStateChanged>

     /* uncomment to log messages */
     CS101_Master_setRawMessageHandler(master, rawMessageHandler, NULL);
 80011aa:	2200      	movs	r2, #0
 80011ac:	4983      	ldr	r1, [pc, #524]	; (80013bc <main+0x270>)
 80011ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80011b0:	f00a ff24 	bl	800bffc <CS101_Master_setRawMessageHandler>

//     SerialPort_open(port);

     uint8_t slave_len =0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
     uint8_t slave_asdu[40] ;

     HAL_UART_Transmit(&huart2,(uint8_t *) menu, sizeof(menu), HAL_MAX_DELAY);
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	2299      	movs	r2, #153	; 0x99
 80011c0:	497f      	ldr	r1, [pc, #508]	; (80013c0 <main+0x274>)
 80011c2:	4880      	ldr	r0, [pc, #512]	; (80013c4 <main+0x278>)
 80011c4:	f001 fe05 	bl	8002dd2 <HAL_UART_Transmit>
     HAL_UART_Receive_IT(&huart2, &recvd_data, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	497f      	ldr	r1, [pc, #508]	; (80013c8 <main+0x27c>)
 80011cc:	487d      	ldr	r0, [pc, #500]	; (80013c4 <main+0x278>)
 80011ce:	f001 ff34 	bl	800303a <HAL_UART_Receive_IT>

	  CS101_StaticASDU cs101_interrogation = (CS101_StaticASDU) GLOBAL_MALLOC(sizeof(sCS101_StaticASDU));
 80011d2:	f44f 708a 	mov.w	r0, #276	; 0x114
 80011d6:	f002 fe55 	bl	8003e84 <Memory_malloc>
 80011da:	65f8      	str	r0, [r7, #92]	; 0x5c
	  struct sCS101_AppLayerParameters huy;
	  struct sCS101_AppLayerParameters *para =&huy;
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	65bb      	str	r3, [r7, #88]	; 0x58
	//  CS101_AppLayerParameters para;
	//  para = (CS101_AppLayerParameters)huy;
	  para->sizeOfCA = 2;
 80011e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011e2:	2202      	movs	r2, #2
 80011e4:	611a      	str	r2, [r3, #16]
	  para->sizeOfIOA = 3;
 80011e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011e8:	2203      	movs	r2, #3
 80011ea:	615a      	str	r2, [r3, #20]
	  para->sizeOfCOT = 2;
 80011ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011ee:	2202      	movs	r2, #2
 80011f0:	609a      	str	r2, [r3, #8]

	  cs101_interrogation ->parameters =para;
 80011f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011f6:	601a      	str	r2, [r3, #0]
	  cs101_interrogation ->asdu =asdu;
 80011f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011fa:	4a74      	ldr	r2, [pc, #464]	; (80013cc <main+0x280>)
 80011fc:	605a      	str	r2, [r3, #4]
	  cs101_interrogation ->asduHeaderLength =6;
 80011fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001200:	2206      	movs	r2, #6
 8001202:	609a      	str	r2, [r3, #8]
	  cs101_interrogation ->payloadSize =18;
 8001204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001206:	2212      	movs	r2, #18
 8001208:	611a      	str	r2, [r3, #16]
	  cs101_interrogation ->payload = asdu +6;
 800120a:	4a71      	ldr	r2, [pc, #452]	; (80013d0 <main+0x284>)
 800120c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120e:	60da      	str	r2, [r3, #12]


//mai làm hàm hẳn hoi gửi tổng số byte ở đầu.
//sẽ gửi length trước rồi gửi data sau.

	  if(master_send_interrogation ==1)
 8001210:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <main+0x288>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d177      	bne.n	8001308 <main+0x1bc>
	  {
		  CS101_Master_sendInterrogationCommand(master, CS101_COT_ACTIVATION, 1, IEC60870_QOI_STATION);
 8001218:	2314      	movs	r3, #20
 800121a:	2201      	movs	r2, #1
 800121c:	2106      	movs	r1, #6
 800121e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001220:	f00a fd9e 	bl	800bd60 <CS101_Master_sendInterrogationCommand>

//		  data_interrogation[size_data_interrogation] = size_data_interrogation;
		  HAL_UART_Transmit(&huart1, &size_data_interrogation, 1, HAL_MAX_DELAY);
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	2201      	movs	r2, #1
 800122a:	496b      	ldr	r1, [pc, #428]	; (80013d8 <main+0x28c>)
 800122c:	486b      	ldr	r0, [pc, #428]	; (80013dc <main+0x290>)
 800122e:	f001 fdd0 	bl	8002dd2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, data_interrogation, size_data_interrogation, HAL_MAX_DELAY);
 8001232:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <main+0x294>)
 8001234:	6819      	ldr	r1, [r3, #0]
 8001236:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <main+0x28c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b29a      	uxth	r2, r3
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	4866      	ldr	r0, [pc, #408]	; (80013dc <main+0x290>)
 8001242:	f001 fdc6 	bl	8002dd2 <HAL_UART_Transmit>

		  //receive len(confirm)
		  HAL_UART_Receive(&huart1, &slave_len, 1, HAL_MAX_DELAY);
 8001246:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	2201      	movs	r2, #1
 8001250:	4862      	ldr	r0, [pc, #392]	; (80013dc <main+0x290>)
 8001252:	f001 fe50 	bl	8002ef6 <HAL_UART_Receive>
		  //receive asdu:(confirm)
		  HAL_UART_Receive(&huart1, slave_asdu, slave_len, HAL_MAX_DELAY);
 8001256:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800125a:	b29a      	uxth	r2, r3
 800125c:	f107 0120 	add.w	r1, r7, #32
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	485d      	ldr	r0, [pc, #372]	; (80013dc <main+0x290>)
 8001266:	f001 fe46 	bl	8002ef6 <HAL_UART_Receive>
		  if((slave_asdu[2] & 0x3f) == CS101_COT_ACTIVATION_CON)
 800126a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800126e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001272:	2b07      	cmp	r3, #7
 8001274:	d13b      	bne.n	80012ee <main+0x1a2>
		  {
			  //confirm to terminal
			  printmsg("ACTIVATION_CONFIRM\r\n");
 8001276:	485b      	ldr	r0, [pc, #364]	; (80013e4 <main+0x298>)
 8001278:	f000 fa1e 	bl	80016b8 <printmsg>

			  while (1)
			  {
				  //receive asdu (len)
				  HAL_UART_Receive(&huart1, &slave_len, 1, HAL_MAX_DELAY);
 800127c:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	2201      	movs	r2, #1
 8001286:	4855      	ldr	r0, [pc, #340]	; (80013dc <main+0x290>)
 8001288:	f001 fe35 	bl	8002ef6 <HAL_UART_Receive>
				  //receive asdu
				  HAL_UART_Receive(&huart1, slave_asdu, slave_len, HAL_MAX_DELAY);
 800128c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001290:	b29a      	uxth	r2, r3
 8001292:	f107 0120 	add.w	r1, r7, #32
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	4850      	ldr	r0, [pc, #320]	; (80013dc <main+0x290>)
 800129c:	f001 fe2b 	bl	8002ef6 <HAL_UART_Receive>
//				  for(uint8_t i=0; i<slave_len; i++)
//				  {
//					  printmsg("0x%x",slave_asdu[i] );
//				  }
//				  printmsg("\r\n");
				  if((slave_asdu[2] & 0x3f )== CS101_COT_ACTIVATION_TERMINATION)
 80012a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012a8:	2b0a      	cmp	r3, #10
 80012aa:	d107      	bne.n	80012bc <main+0x170>
				  {
					  printmsg("TERMINATION\r\n");
 80012ac:	484e      	ldr	r0, [pc, #312]	; (80013e8 <main+0x29c>)
 80012ae:	f000 fa03 	bl	80016b8 <printmsg>
					  break;
 80012b2:	bf00      	nop
				  asduReceivedHandler(para, 0, asdu_huy);

			  }

			  //process asdu
			  master_send_interrogation=0;
 80012b4:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <main+0x288>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e01b      	b.n	80012f4 <main+0x1a8>
				  cs101_interrogation->payloadSize =  slave_len - (cs101_interrogation->asduHeaderLength);
 80012bc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80012c0:	461a      	mov	r2, r3
 80012c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	1ad2      	subs	r2, r2, r3
 80012c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ca:	611a      	str	r2, [r3, #16]
				  cs101_interrogation->asdu =slave_asdu;
 80012cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ce:	f107 0220 	add.w	r2, r7, #32
 80012d2:	605a      	str	r2, [r3, #4]
				  cs101_interrogation->payload =slave_asdu+6;
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	3306      	adds	r3, #6
 80012da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012dc:	60d3      	str	r3, [r2, #12]
				  CS101_ASDU asdu_huy =(CS101_ASDU) cs101_interrogation;
 80012de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e0:	657b      	str	r3, [r7, #84]	; 0x54
				  asduReceivedHandler(para, 0, asdu_huy);
 80012e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012e4:	2100      	movs	r1, #0
 80012e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80012e8:	f7ff fe12 	bl	8000f10 <asduReceivedHandler>
			  {
 80012ec:	e7c6      	b.n	800127c <main+0x130>
			  //process asdu
		  }
		  else
		  {
			  printmsg("error");
 80012ee:	483f      	ldr	r0, [pc, #252]	; (80013ec <main+0x2a0>)
 80012f0:	f000 f9e2 	bl	80016b8 <printmsg>
		  }

		  HAL_UART_Transmit(&huart2,(uint8_t *) menu, sizeof(menu), HAL_MAX_DELAY);
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	2299      	movs	r2, #153	; 0x99
 80012fa:	4931      	ldr	r1, [pc, #196]	; (80013c0 <main+0x274>)
 80012fc:	4831      	ldr	r0, [pc, #196]	; (80013c4 <main+0x278>)
 80012fe:	f001 fd68 	bl	8002dd2 <HAL_UART_Transmit>
//		  HAL_UART_Receive_IT(&huart2, &recvd_data, 1);

		  master_send_interrogation=0;
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <main+0x288>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]

	  }


	  if(master_send_single_command ==1)
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <main+0x2a4>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d148      	bne.n	80013a2 <main+0x256>
	  {
		  int a= (((global_single_buffer[2]-48)+500));
 8001310:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <main+0x2a8>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001318:	653b      	str	r3, [r7, #80]	; 0x50


		  InformationObject sc = (InformationObject)
				  SingleCommand_create(NULL, (((global_single_buffer[2]-48)+500)),( global_single_buffer[1]-48), false, 0);
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <main+0x2a8>)
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <main+0x2a8>)
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	3b30      	subs	r3, #48	; 0x30
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2da      	uxtb	r2, r3
 8001332:	2300      	movs	r3, #0
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f007 ffd2 	bl	80092e2 <SingleCommand_create>
 800133e:	64f8      	str	r0, [r7, #76]	; 0x4c

		  printf("Send control command C_SC_NA_1\n");
 8001340:	482d      	ldr	r0, [pc, #180]	; (80013f8 <main+0x2ac>)
 8001342:	f00c f8c1 	bl	800d4c8 <puts>
		  CS101_Master_sendProcessCommand(master, CS101_COT_ACTIVATION, 1, sc);
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	2201      	movs	r2, #1
 800134a:	2106      	movs	r1, #6
 800134c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800134e:	f00a fd63 	bl	800be18 <CS101_Master_sendProcessCommand>

		  HAL_UART_Transmit(&huart1, &size_data_single_command, 1, HAL_MAX_DELAY);
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	2201      	movs	r2, #1
 8001358:	4928      	ldr	r1, [pc, #160]	; (80013fc <main+0x2b0>)
 800135a:	4820      	ldr	r0, [pc, #128]	; (80013dc <main+0x290>)
 800135c:	f001 fd39 	bl	8002dd2 <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001360:	200a      	movs	r0, #10
 8001362:	f000 fcc1 	bl	8001ce8 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, data_single_command, size_data_single_command, HAL_MAX_DELAY);
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <main+0x2b4>)
 8001368:	6819      	ldr	r1, [r3, #0]
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <main+0x2b0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b29a      	uxth	r2, r3
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <main+0x290>)
 8001376:	f001 fd2c 	bl	8002dd2 <HAL_UART_Transmit>
		  InformationObject_destroy(sc);
 800137a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800137c:	f004 ff7e 	bl	800627c <InformationObject_destroy>
		  master_send_single_command=0;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <main+0x2a4>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
		  printmsg("confirmation!!!!!\r\n");
 8001386:	481f      	ldr	r0, [pc, #124]	; (8001404 <main+0x2b8>)
 8001388:	f000 f996 	bl	80016b8 <printmsg>
		  HAL_Delay(1000);
 800138c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001390:	f000 fcaa 	bl	8001ce8 <HAL_Delay>
		  HAL_UART_Transmit(&huart2,(uint8_t *) menu, sizeof(menu), HAL_MAX_DELAY);
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	2299      	movs	r2, #153	; 0x99
 800139a:	4909      	ldr	r1, [pc, #36]	; (80013c0 <main+0x274>)
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <main+0x278>)
 800139e:	f001 fd18 	bl	8002dd2 <HAL_UART_Transmit>
//		  HAL_UART_Transmit(&huart2, menu, sizeof(menu), HAL_MAX_DELAY);
//		  }
	  }


	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80013a2:	2120      	movs	r1, #32
 80013a4:	4818      	ldr	r0, [pc, #96]	; (8001408 <main+0x2bc>)
 80013a6:	f001 f820 	bl	80023ea <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80013aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ae:	f000 fc9b 	bl	8001ce8 <HAL_Delay>
	  if(master_send_interrogation ==1)
 80013b2:	e72d      	b.n	8001210 <main+0xc4>
 80013b4:	08000f11 	.word	0x08000f11
 80013b8:	080010e1 	.word	0x080010e1
 80013bc:	08000eb1 	.word	0x08000eb1
 80013c0:	20000018 	.word	0x20000018
 80013c4:	200005fc 	.word	0x200005fc
 80013c8:	200005a0 	.word	0x200005a0
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000006 	.word	0x20000006
 80013d4:	2000057c 	.word	0x2000057c
 80013d8:	2000057e 	.word	0x2000057e
 80013dc:	200005a4 	.word	0x200005a4
 80013e0:	20000594 	.word	0x20000594
 80013e4:	0800f970 	.word	0x0800f970
 80013e8:	0800f988 	.word	0x0800f988
 80013ec:	0800f998 	.word	0x0800f998
 80013f0:	2000057d 	.word	0x2000057d
 80013f4:	200005f4 	.word	0x200005f4
 80013f8:	0800f9a0 	.word	0x0800f9a0
 80013fc:	2000057f 	.word	0x2000057f
 8001400:	200005f8 	.word	0x200005f8
 8001404:	0800f9c0 	.word	0x0800f9c0
 8001408:	40020000 	.word	0x40020000

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	; 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2230      	movs	r2, #48	; 0x30
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f00b fa8c 	bl	800c938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <SystemClock_Config+0xcc>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <SystemClock_Config+0xcc>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	; 0x40
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <SystemClock_Config+0xcc>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <SystemClock_Config+0xd0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <SystemClock_Config+0xd0>)
 800145a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <SystemClock_Config+0xd0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001470:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001476:	2302      	movs	r3, #2
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001480:	2304      	movs	r3, #4
 8001482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001484:	2354      	movs	r3, #84	; 0x54
 8001486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001488:	2302      	movs	r3, #2
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800148c:	2307      	movs	r3, #7
 800148e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	4618      	mov	r0, r3
 8001496:	f000 ffdb 	bl	8002450 <HAL_RCC_OscConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014a0:	f000 f99d 	bl	80017de <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a4:	230f      	movs	r3, #15
 80014a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a8:	2302      	movs	r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2102      	movs	r1, #2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fa3d 	bl	8002940 <HAL_RCC_ClockConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014cc:	f000 f987 	bl	80017de <Error_Handler>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3750      	adds	r7, #80	; 0x50
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000

080014e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_CRC_Init+0x20>)
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <MX_CRC_Init+0x24>)
 80014e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_CRC_Init+0x20>)
 80014ec:	f000 fd31 	bl	8001f52 <HAL_CRC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80014f6:	f000 f972 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000598 	.word	0x20000598
 8001504:	40023000 	.word	0x40023000

08001508 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_USART1_UART_Init+0x50>)
 8001510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART1_UART_Init+0x4c>)
 8001540:	f001 fbfa 	bl	8002d38 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800154a:	f000 f948 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200005a4 	.word	0x200005a4
 8001558:	40011000 	.word	0x40011000

0800155c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <MX_USART2_UART_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART2_UART_Init+0x4c>)
 8001594:	f001 fbd0 	bl	8002d38 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800159e:	f000 f91e 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200005fc 	.word	0x200005fc
 80015ac:	40004400 	.word	0x40004400

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <MX_GPIO_Init+0xfc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a37      	ldr	r2, [pc, #220]	; (80016ac <MX_GPIO_Init+0xfc>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <MX_GPIO_Init+0xfc>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <MX_GPIO_Init+0xfc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a30      	ldr	r2, [pc, #192]	; (80016ac <MX_GPIO_Init+0xfc>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <MX_GPIO_Init+0xfc>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <MX_GPIO_Init+0xfc>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a29      	ldr	r2, [pc, #164]	; (80016ac <MX_GPIO_Init+0xfc>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_GPIO_Init+0xfc>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <MX_GPIO_Init+0xfc>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <MX_GPIO_Init+0xfc>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <MX_GPIO_Init+0xfc>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2120      	movs	r1, #32
 800163a:	481d      	ldr	r0, [pc, #116]	; (80016b0 <MX_GPIO_Init+0x100>)
 800163c:	f000 febc 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4817      	ldr	r0, [pc, #92]	; (80016b4 <MX_GPIO_Init+0x104>)
 8001656:	f000 fd2b 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800165a:	2320      	movs	r3, #32
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480f      	ldr	r0, [pc, #60]	; (80016b0 <MX_GPIO_Init+0x100>)
 8001672:	f000 fd1d 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800167c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001682:	2301      	movs	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <MX_GPIO_Init+0x104>)
 800168e:	f000 fd0f 	bl	80020b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	210f      	movs	r1, #15
 8001696:	2028      	movs	r0, #40	; 0x28
 8001698:	f000 fc25 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800169c:	2028      	movs	r0, #40	; 0x28
 800169e:	f000 fc3e 	bl	8001f1e <HAL_NVIC_EnableIRQ>

}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020800 	.word	0x40020800

080016b8 <printmsg>:

/* USER CODE BEGIN 4 */

void printmsg(char *format,...)
 {
 80016b8:	b40f      	push	{r0, r1, r2, r3}
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b09a      	sub	sp, #104	; 0x68
 80016be:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[100];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80016c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016c4:	603b      	str	r3, [r7, #0]
	vsprintf(str, format,args);
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00b ff29 	bl	800d524 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fd83 	bl	80001e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	1d39      	adds	r1, r7, #4
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <printmsg+0x40>)
 80016e6:	f001 fb74 	bl	8002dd2 <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 80016ea:	bf00      	nop
 80016ec:	3768      	adds	r7, #104	; 0x68
 80016ee:	46bd      	mov	sp, r7
 80016f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016f4:	b004      	add	sp, #16
 80016f6:	4770      	bx	lr
 80016f8:	200005fc 	.word	0x200005fc

080016fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <HAL_UART_RxCpltCallback+0xa8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d147      	bne.n	800179c <HAL_UART_RxCpltCallback+0xa0>
	{

		 if(recvd_data == '\r')
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_UART_RxCpltCallback+0xac>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b0d      	cmp	r3, #13
 8001712:	d12d      	bne.n	8001770 <HAL_UART_RxCpltCallback+0x74>
		 {
			 count =0;
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_UART_RxCpltCallback+0xb0>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
			 if (data_buffer[0] == '1')
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <HAL_UART_RxCpltCallback+0xb4>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b31      	cmp	r3, #49	; 0x31
 8001720:	d102      	bne.n	8001728 <HAL_UART_RxCpltCallback+0x2c>
			 {
				 master_send_interrogation =1;
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_UART_RxCpltCallback+0xb8>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
//				 HAL_UART_Transmit(&huart2, menu, sizeof(menu), HAL_MAX_DELAY);
			 }

			 if(data_buffer[0] =='2')
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_UART_RxCpltCallback+0xb4>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b32      	cmp	r3, #50	; 0x32
 800172e:	d11f      	bne.n	8001770 <HAL_UART_RxCpltCallback+0x74>
			 {
//				 uint8_t single_buffer[10];
				 master_send_single_command=1;
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <HAL_UART_RxCpltCallback+0xbc>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
				 HAL_UART_Transmit(&huart2,(uint8_t *) menu_single_command, sizeof(menu_single_command), HAL_MAX_DELAY);
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	2262      	movs	r2, #98	; 0x62
 800173c:	491f      	ldr	r1, [pc, #124]	; (80017bc <HAL_UART_RxCpltCallback+0xc0>)
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <HAL_UART_RxCpltCallback+0xa8>)
 8001740:	f001 fb47 	bl	8002dd2 <HAL_UART_Transmit>
				 HAL_UART_Receive(&huart2, single_buffer, 5, HAL_MAX_DELAY);
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	2205      	movs	r2, #5
 800174a:	491d      	ldr	r1, [pc, #116]	; (80017c0 <HAL_UART_RxCpltCallback+0xc4>)
 800174c:	4815      	ldr	r0, [pc, #84]	; (80017a4 <HAL_UART_RxCpltCallback+0xa8>)
 800174e:	f001 fbd2 	bl	8002ef6 <HAL_UART_Receive>
				 global_single_buffer[2] = single_buffer[3];
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_UART_RxCpltCallback+0xc4>)
 8001754:	78da      	ldrb	r2, [r3, #3]
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_UART_RxCpltCallback+0xc8>)
 8001758:	709a      	strb	r2, [r3, #2]

				 HAL_UART_Receive(&huart2, single_buffer, 3, HAL_MAX_DELAY);
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	2203      	movs	r2, #3
 8001760:	4917      	ldr	r1, [pc, #92]	; (80017c0 <HAL_UART_RxCpltCallback+0xc4>)
 8001762:	4810      	ldr	r0, [pc, #64]	; (80017a4 <HAL_UART_RxCpltCallback+0xa8>)
 8001764:	f001 fbc7 	bl	8002ef6 <HAL_UART_Receive>
				 global_single_buffer[1] = single_buffer[1];
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_UART_RxCpltCallback+0xc4>)
 800176a:	785a      	ldrb	r2, [r3, #1]
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_UART_RxCpltCallback+0xc8>)
 800176e:	705a      	strb	r2, [r3, #1]
			 }
		 }
		 if(recvd_data == '\n')
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_UART_RxCpltCallback+0xac>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d103      	bne.n	8001780 <HAL_UART_RxCpltCallback+0x84>
		 {
			 count =0;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_UART_RxCpltCallback+0xb0>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e008      	b.n	8001792 <HAL_UART_RxCpltCallback+0x96>

		 }
		 else
		 {
			 data_buffer[count++] =recvd_data;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_UART_RxCpltCallback+0xb0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	4909      	ldr	r1, [pc, #36]	; (80017ac <HAL_UART_RxCpltCallback+0xb0>)
 8001788:	600a      	str	r2, [r1, #0]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_UART_RxCpltCallback+0xac>)
 800178c:	7811      	ldrb	r1, [r2, #0]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_UART_RxCpltCallback+0xb4>)
 8001790:	54d1      	strb	r1, [r2, r3]
		 }

		 HAL_UART_Receive_IT(&huart2,&recvd_data,1);
 8001792:	2201      	movs	r2, #1
 8001794:	4904      	ldr	r1, [pc, #16]	; (80017a8 <HAL_UART_RxCpltCallback+0xac>)
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <HAL_UART_RxCpltCallback+0xa8>)
 8001798:	f001 fc4f 	bl	800303a <HAL_UART_Receive_IT>
	}
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200005fc 	.word	0x200005fc
 80017a8:	200005a0 	.word	0x200005a0
 80017ac:	20000578 	.word	0x20000578
 80017b0:	20000640 	.word	0x20000640
 80017b4:	2000057c 	.word	0x2000057c
 80017b8:	2000057d 	.word	0x2000057d
 80017bc:	200000b4 	.word	0x200000b4
 80017c0:	200005e8 	.word	0x200005e8
 80017c4:	200005f4 	.word	0x200005f4

080017c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]


}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e2:	b672      	cpsid	i
}
 80017e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <Error_Handler+0x8>

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <HAL_MspInit+0x4c>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_MspInit+0x4c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_MspInit+0x4c>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_MspInit+0x4c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_CRC_MspInit+0x3c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10d      	bne.n	8001866 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_CRC_MspInit+0x40>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a09      	ldr	r2, [pc, #36]	; (8001878 <HAL_CRC_MspInit+0x40>)
 8001854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_CRC_MspInit+0x40>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023000 	.word	0x40023000
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	; 0x30
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a36      	ldr	r2, [pc, #216]	; (8001974 <HAL_UART_MspInit+0xf8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12d      	bne.n	80018fa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_UART_MspInit+0xfc>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <HAL_UART_MspInit+0xfc>)
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_UART_MspInit+0xfc>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_UART_MspInit+0xfc>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <HAL_UART_MspInit+0xfc>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_UART_MspInit+0xfc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e8:	2307      	movs	r3, #7
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4822      	ldr	r0, [pc, #136]	; (800197c <HAL_UART_MspInit+0x100>)
 80018f4:	f000 fbdc 	bl	80020b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f8:	e038      	b.n	800196c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a20      	ldr	r2, [pc, #128]	; (8001980 <HAL_UART_MspInit+0x104>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d133      	bne.n	800196c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_UART_MspInit+0xfc>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <HAL_UART_MspInit+0xfc>)
 800190e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_UART_MspInit+0xfc>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_UART_MspInit+0xfc>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_UART_MspInit+0xfc>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6313      	str	r3, [r2, #48]	; 0x30
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_UART_MspInit+0xfc>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800193c:	230c      	movs	r3, #12
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194c:	2307      	movs	r3, #7
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4809      	ldr	r0, [pc, #36]	; (800197c <HAL_UART_MspInit+0x100>)
 8001958:	f000 fbaa 	bl	80020b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	210f      	movs	r1, #15
 8001960:	2026      	movs	r0, #38	; 0x26
 8001962:	f000 fac0 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001966:	2026      	movs	r0, #38	; 0x26
 8001968:	f000 fad9 	bl	8001f1e <HAL_NVIC_EnableIRQ>
}
 800196c:	bf00      	nop
 800196e:	3730      	adds	r7, #48	; 0x30
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40011000 	.word	0x40011000
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000
 8001980:	40004400 	.word	0x40004400

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 f96a 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <USART2_IRQHandler+0x10>)
 80019de:	f001 fb5d 	bl	800309c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200005fc 	.word	0x200005fc

080019ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
HAL_Delay(100);
 80019f0:	2064      	movs	r0, #100	; 0x64
 80019f2:	f000 f979 	bl	8001ce8 <HAL_Delay>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80019f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019fa:	f000 fd11 	bl	8002420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
	return 1;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <_kill>:

int _kill(int pid, int sig)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a1c:	f00a ff44 	bl	800c8a8 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2216      	movs	r2, #22
 8001a24:	601a      	str	r2, [r3, #0]
	return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_exit>:

void _exit (int status)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffe7 	bl	8001a12 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a44:	e7fe      	b.n	8001a44 <_exit+0x12>

08001a46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e00a      	b.n	8001a6e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a58:	f3af 8000 	nop.w
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	60ba      	str	r2, [r7, #8]
 8001a64:	b2ca      	uxtb	r2, r1
 8001a66:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbf0      	blt.n	8001a58 <_read+0x12>
	}

return len;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e009      	b.n	8001aa6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	60ba      	str	r2, [r7, #8]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dbf1      	blt.n	8001a92 <_write+0x12>
	}
	return len;
 8001aae:	687b      	ldr	r3, [r7, #4]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_close>:

int _close(int file)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae0:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_isatty>:

int _isatty(int file)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	return 1;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
	return 0;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f00a feaa 	bl	800c8a8 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20018000 	.word	0x20018000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	20000580 	.word	0x20000580
 8001b88:	200006b8 	.word	0x200006b8

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <Reset_Handler>:
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopFillZerobss+0x12>
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <LoopFillZerobss+0x16>)
 8001bb6:	490e      	ldr	r1, [pc, #56]	; (8001bf0 <LoopFillZerobss+0x1a>)
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <LoopFillZerobss+0x1e>)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:
 8001bbe:	58d4      	ldr	r4, [r2, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:
 8001bc4:	18c4      	adds	r4, r0, r3
 8001bc6:	428c      	cmp	r4, r1
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x22>)
 8001bcc:	4c0b      	ldr	r4, [pc, #44]	; (8001bfc <LoopFillZerobss+0x26>)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:
 8001bd6:	42a2      	cmp	r2, r4
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>
 8001bda:	f7ff ffd7 	bl	8001b8c <SystemInit>
 8001bde:	f00a fe69 	bl	800c8b4 <__libc_init_array>
 8001be2:	f7ff fab3 	bl	800114c <main>
 8001be6:	4770      	bx	lr
 8001be8:	20018000 	.word	0x20018000
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	2000055c 	.word	0x2000055c
 8001bf4:	08010504 	.word	0x08010504
 8001bf8:	2000055c 	.word	0x2000055c
 8001bfc:	200006b8 	.word	0x200006b8

08001c00 <ADC_IRQHandler>:
 8001c00:	e7fe      	b.n	8001c00 <ADC_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_Init+0x40>)
 8001c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_Init+0x40>)
 8001c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x40>)
 8001c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f94f 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fdd6 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f967 	bl	8001f3a <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f92f 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000118 	.word	0x20000118
 8001ca0:	20000120 	.word	0x20000120
 8001ca4:	2000011c 	.word	0x2000011c

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000120 	.word	0x20000120
 8001ccc:	200006a4 	.word	0x200006a4

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	200006a4 	.word	0x200006a4

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000120 	.word	0x20000120

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff3e 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff8e 	bl	8001e24 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff31 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e00e      	b.n	8001f82 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	795b      	ldrb	r3, [r3, #5]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fc5f 	bl	8001838 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff fe9a 	bl	8001cd0 <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d008      	beq.n	8001fbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e052      	b.n	8002062 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0216 	bic.w	r2, r2, #22
 8001fca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <HAL_DMA_Abort+0x62>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0208 	bic.w	r2, r2, #8
 8001ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200c:	e013      	b.n	8002036 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200e:	f7ff fe5f 	bl	8001cd0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b05      	cmp	r3, #5
 800201a:	d90c      	bls.n	8002036 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e015      	b.n	8002062 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e4      	bne.n	800200e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	223f      	movs	r2, #63	; 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d004      	beq.n	8002088 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e00c      	b.n	80020a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2205      	movs	r2, #5
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e159      	b.n	8002380 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8148 	bne.w	800237a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d005      	beq.n	8002102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d130      	bne.n	8002164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b03      	cmp	r3, #3
 800216e:	d017      	beq.n	80021a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d123      	bne.n	80021f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a2 	beq.w	800237a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b57      	ldr	r3, [pc, #348]	; (8002398 <HAL_GPIO_Init+0x2e8>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a56      	ldr	r2, [pc, #344]	; (8002398 <HAL_GPIO_Init+0x2e8>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b54      	ldr	r3, [pc, #336]	; (8002398 <HAL_GPIO_Init+0x2e8>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002252:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_GPIO_Init+0x2ec>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a49      	ldr	r2, [pc, #292]	; (80023a0 <HAL_GPIO_Init+0x2f0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <HAL_GPIO_Init+0x202>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <HAL_GPIO_Init+0x2f4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_Init+0x1fe>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a47      	ldr	r2, [pc, #284]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_GPIO_Init+0x1fa>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a46      	ldr	r2, [pc, #280]	; (80023ac <HAL_GPIO_Init+0x2fc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <HAL_GPIO_Init+0x1f6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a45      	ldr	r2, [pc, #276]	; (80023b0 <HAL_GPIO_Init+0x300>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_GPIO_Init+0x1f2>
 800229e:	2304      	movs	r3, #4
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022a2:	2307      	movs	r3, #7
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022b2:	2300      	movs	r3, #0
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c4:	4935      	ldr	r1, [pc, #212]	; (800239c <HAL_GPIO_Init+0x2ec>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d2:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <HAL_GPIO_Init+0x304>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f6:	4a2f      	ldr	r2, [pc, #188]	; (80023b4 <HAL_GPIO_Init+0x304>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_GPIO_Init+0x304>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002320:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <HAL_GPIO_Init+0x304>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_GPIO_Init+0x304>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_GPIO_Init+0x304>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_GPIO_Init+0x304>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <HAL_GPIO_Init+0x304>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	f67f aea2 	bls.w	80020cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023fc:	887a      	ldrh	r2, [r7, #2]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	041a      	lsls	r2, r3, #16
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43d9      	mvns	r1, r3
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	400b      	ands	r3, r1
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f9c2 	bl	80017c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e264      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d075      	beq.n	800255a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246e:	4ba3      	ldr	r3, [pc, #652]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d00c      	beq.n	8002494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4ba0      	ldr	r3, [pc, #640]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002482:	2b08      	cmp	r3, #8
 8002484:	d112      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002486:	4b9d      	ldr	r3, [pc, #628]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4b99      	ldr	r3, [pc, #612]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05b      	beq.n	8002558 <HAL_RCC_OscConfig+0x108>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d157      	bne.n	8002558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e23f      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x74>
 80024b6:	4b91      	ldr	r3, [pc, #580]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a90      	ldr	r2, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x98>
 80024ce:	4b8b      	ldr	r3, [pc, #556]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a8a      	ldr	r2, [pc, #552]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a87      	ldr	r2, [pc, #540]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024e8:	4b84      	ldr	r3, [pc, #528]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a83      	ldr	r2, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b81      	ldr	r3, [pc, #516]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a80      	ldr	r2, [pc, #512]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fbe2 	bl	8001cd0 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fbde 	bl	8001cd0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e204      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xc0>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fbce 	bl	8001cd0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fbca 	bl	8001cd0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1f0      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0xe8>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d063      	beq.n	800262e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b5f      	ldr	r3, [pc, #380]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1c4      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4952      	ldr	r1, [pc, #328]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b4f      	ldr	r3, [pc, #316]	; (8002700 <HAL_RCC_OscConfig+0x2b0>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7ff fb83 	bl	8001cd0 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ce:	f7ff fb7f 	bl	8001cd0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1a5      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4940      	ldr	r1, [pc, #256]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <HAL_RCC_OscConfig+0x2b0>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7ff fb62 	bl	8001cd0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002610:	f7ff fb5e 	bl	8001cd0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e184      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d030      	beq.n	800269c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCC_OscConfig+0x2b4>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7ff fb42 	bl	8001cd0 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff fb3e 	bl	8001cd0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e164      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x200>
 800266e:	e015      	b.n	800269c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_OscConfig+0x2b4>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff fb2b 	bl	8001cd0 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267e:	f7ff fb27 	bl	8001cd0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e14d      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a0 	beq.w	80027ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x2b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d121      	bne.n	800272a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_RCC_OscConfig+0x2b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <HAL_RCC_OscConfig+0x2b8>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7ff faed 	bl	8001cd0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e011      	b.n	800271e <HAL_RCC_OscConfig+0x2ce>
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	42470000 	.word	0x42470000
 8002704:	42470e80 	.word	0x42470e80
 8002708:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270c:	f7ff fae0 	bl	8001cd0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e106      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b85      	ldr	r3, [pc, #532]	; (8002934 <HAL_RCC_OscConfig+0x4e4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d106      	bne.n	8002740 <HAL_RCC_OscConfig+0x2f0>
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a80      	ldr	r2, [pc, #512]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	e01c      	b.n	800277a <HAL_RCC_OscConfig+0x32a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b05      	cmp	r3, #5
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x312>
 8002748:	4b7b      	ldr	r3, [pc, #492]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a7a      	ldr	r2, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
 8002754:	4b78      	ldr	r3, [pc, #480]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a77      	ldr	r2, [pc, #476]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
 8002760:	e00b      	b.n	800277a <HAL_RCC_OscConfig+0x32a>
 8002762:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a74      	ldr	r2, [pc, #464]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	4b72      	ldr	r3, [pc, #456]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a71      	ldr	r2, [pc, #452]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 8002774:	f023 0304 	bic.w	r3, r3, #4
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d015      	beq.n	80027ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7ff faa5 	bl	8001cd0 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7ff faa1 	bl	8001cd0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0c5      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ee      	beq.n	800278a <HAL_RCC_OscConfig+0x33a>
 80027ac:	e014      	b.n	80027d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7ff fa8f 	bl	8001cd0 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7ff fa8b 	bl	8001cd0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0af      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ee      	bne.n	80027b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 809b 	beq.w	800292a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d05c      	beq.n	80028ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d141      	bne.n	800288c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002808:	4b4c      	ldr	r3, [pc, #304]	; (800293c <HAL_RCC_OscConfig+0x4ec>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7ff fa5f 	bl	8001cd0 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002816:	f7ff fa5b 	bl	8001cd0 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e081      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002828:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	019b      	lsls	r3, r3, #6
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	061b      	lsls	r3, r3, #24
 8002858:	4937      	ldr	r1, [pc, #220]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_OscConfig+0x4ec>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff fa34 	bl	8001cd0 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7ff fa30 	bl	8001cd0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e056      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x41c>
 800288a:	e04e      	b.n	800292a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_OscConfig+0x4ec>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff fa1d 	bl	8001cd0 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289a:	f7ff fa19 	bl	8001cd0 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e03f      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x44a>
 80028b8:	e037      	b.n	800292a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e032      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_RCC_OscConfig+0x4e8>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d028      	beq.n	8002926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d121      	bne.n	8002926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d11a      	bne.n	8002926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f6:	4013      	ands	r3, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fe:	4293      	cmp	r3, r2
 8002900:	d111      	bne.n	8002926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	3b01      	subs	r3, #1
 8002910:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40007000 	.word	0x40007000
 8002938:	40023800 	.word	0x40023800
 800293c:	42470060 	.word	0x42470060

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0cc      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90c      	bls.n	800297c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b65      	ldr	r3, [pc, #404]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b8      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	494d      	ldr	r1, [pc, #308]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d044      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e067      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4934      	ldr	r1, [pc, #208]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7ff f94e 	bl	8001cd0 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7ff f94a 	bl	8001cd0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d20c      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e032      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4916      	ldr	r1, [pc, #88]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490e      	ldr	r1, [pc, #56]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac6:	f000 f821 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490a      	ldr	r1, [pc, #40]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f8ae 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00
 8002afc:	40023800 	.word	0x40023800
 8002b00:	080100f8 	.word	0x080100f8
 8002b04:	20000118 	.word	0x20000118
 8002b08:	2000011c 	.word	0x2000011c

08002b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b24:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	f200 80bd 	bhi.w	8002cb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3e:	e0b7      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b42:	60bb      	str	r3, [r7, #8]
       break;
 8002b44:	e0b7      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b46:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b48:	60bb      	str	r3, [r7, #8]
      break;
 8002b4a:	e0b4      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b56:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d04d      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b72:	f04f 0100 	mov.w	r1, #0
 8002b76:	ea02 0800 	and.w	r8, r2, r0
 8002b7a:	ea03 0901 	and.w	r9, r3, r1
 8002b7e:	4640      	mov	r0, r8
 8002b80:	4649      	mov	r1, r9
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	014b      	lsls	r3, r1, #5
 8002b8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b90:	0142      	lsls	r2, r0, #5
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	ebb0 0008 	subs.w	r0, r0, r8
 8002b9a:	eb61 0109 	sbc.w	r1, r1, r9
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	018b      	lsls	r3, r1, #6
 8002ba8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bac:	0182      	lsls	r2, r0, #6
 8002bae:	1a12      	subs	r2, r2, r0
 8002bb0:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb4:	f04f 0000 	mov.w	r0, #0
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	00d9      	lsls	r1, r3, #3
 8002bbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bc2:	00d0      	lsls	r0, r2, #3
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	eb12 0208 	adds.w	r2, r2, r8
 8002bcc:	eb43 0309 	adc.w	r3, r3, r9
 8002bd0:	f04f 0000 	mov.w	r0, #0
 8002bd4:	f04f 0100 	mov.w	r1, #0
 8002bd8:	0259      	lsls	r1, r3, #9
 8002bda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bde:	0250      	lsls	r0, r2, #9
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	f7fd ffe2 	bl	8000bb8 <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e04a      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfe:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	461a      	mov	r2, r3
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	ea02 0400 	and.w	r4, r2, r0
 8002c16:	ea03 0501 	and.w	r5, r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	014b      	lsls	r3, r1, #5
 8002c28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c2c:	0142      	lsls	r2, r0, #5
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	1b00      	subs	r0, r0, r4
 8002c34:	eb61 0105 	sbc.w	r1, r1, r5
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	018b      	lsls	r3, r1, #6
 8002c42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c46:	0182      	lsls	r2, r0, #6
 8002c48:	1a12      	subs	r2, r2, r0
 8002c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	00d9      	lsls	r1, r3, #3
 8002c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c5c:	00d0      	lsls	r0, r2, #3
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	1912      	adds	r2, r2, r4
 8002c64:	eb45 0303 	adc.w	r3, r5, r3
 8002c68:	f04f 0000 	mov.w	r0, #0
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	0299      	lsls	r1, r3, #10
 8002c72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c76:	0290      	lsls	r0, r2, #10
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	f7fd ff96 	bl	8000bb8 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4613      	mov	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	60bb      	str	r3, [r7, #8]
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cb2:	60bb      	str	r3, [r7, #8]
      break;
 8002cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	007a1200 	.word	0x007a1200

08002cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000118 	.word	0x20000118

08002ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cec:	f7ff fff0 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0a9b      	lsrs	r3, r3, #10
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08010108 	.word	0x08010108

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d14:	f7ff ffdc 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0b5b      	lsrs	r3, r3, #13
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08010108 	.word	0x08010108

08002d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e03f      	b.n	8002dca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fd8c 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	; 0x24
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fe7d 	bl	8003a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b08a      	sub	sp, #40	; 0x28
 8002dd6:	af02      	add	r7, sp, #8
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d17c      	bne.n	8002eec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_UART_Transmit+0x2c>
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e075      	b.n	8002eee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_UART_Transmit+0x3e>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e06e      	b.n	8002eee <HAL_UART_Transmit+0x11c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e26:	f7fe ff53 	bl	8001cd0 <HAL_GetTick>
 8002e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	88fa      	ldrh	r2, [r7, #6]
 8002e30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	88fa      	ldrh	r2, [r7, #6]
 8002e36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e40:	d108      	bne.n	8002e54 <HAL_UART_Transmit+0x82>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d104      	bne.n	8002e54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	e003      	b.n	8002e5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e64:	e02a      	b.n	8002ebc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fbc1 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e036      	b.n	8002eee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	3302      	adds	r3, #2
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e007      	b.n	8002eae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1cf      	bne.n	8002e66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2140      	movs	r1, #64	; 0x40
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fb91 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e006      	b.n	8002eee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b08a      	sub	sp, #40	; 0x28
 8002efa:	af02      	add	r7, sp, #8
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	f040 808c 	bne.w	8003030 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_UART_Receive+0x2e>
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e084      	b.n	8003032 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Receive+0x40>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e07d      	b.n	8003032 <HAL_UART_Receive+0x13c>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2222      	movs	r2, #34	; 0x22
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f52:	f7fe febd 	bl	8001cd0 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	88fa      	ldrh	r2, [r7, #6]
 8002f62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d108      	bne.n	8002f80 <HAL_UART_Receive+0x8a>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e003      	b.n	8002f88 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f90:	e043      	b.n	800301a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2120      	movs	r1, #32
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fb2b 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e042      	b.n	8003032 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10c      	bne.n	8002fcc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e01f      	b.n	800300c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d007      	beq.n	8002fe6 <HAL_UART_Receive+0xf0>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_UART_Receive+0xfe>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e008      	b.n	8003006 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003000:	b2da      	uxtb	r2, r3
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3301      	adds	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1b6      	bne.n	8002f92 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	d11d      	bne.n	8003090 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Receive_IT+0x26>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e016      	b.n	8003092 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_UART_Receive_IT+0x38>
 800306e:	2302      	movs	r3, #2
 8003070:	e00f      	b.n	8003092 <HAL_UART_Receive_IT+0x58>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	461a      	mov	r2, r3
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fb24 	bl	80036d4 <UART_Start_Receive_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	e000      	b.n	8003092 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0ba      	sub	sp, #232	; 0xe8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_UART_IRQHandler+0x66>
 80030ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fc03 	bl	8003906 <UART_Receive_IT>
      return;
 8003100:	e256      	b.n	80035b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80de 	beq.w	80032c8 <HAL_UART_IRQHandler+0x22c>
 800310c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80d1 	beq.w	80032c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0xae>
 8003132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_UART_IRQHandler+0xd2>
 8003156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xf6>
 800317a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d011      	beq.n	80031c2 <HAL_UART_IRQHandler+0x126>
 800319e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 81ed 	beq.w	80035a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_UART_IRQHandler+0x14e>
 80031d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fb8e 	bl	8003906 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_UART_IRQHandler+0x17a>
 800320e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d04f      	beq.n	80032b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa96 	bl	8003748 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d141      	bne.n	80032ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3314      	adds	r3, #20
 8003230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003240:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003256:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800325a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800326e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1d9      	bne.n	800322a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	2b00      	cmp	r3, #0
 800327c:	d013      	beq.n	80032a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	4a7d      	ldr	r2, [pc, #500]	; (8003478 <HAL_UART_IRQHandler+0x3dc>)
 8003284:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe feed 	bl	800206a <HAL_DMA_Abort_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e00e      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f990 	bl	80035cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e00a      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f98c 	bl	80035cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	e006      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f988 	bl	80035cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032c2:	e170      	b.n	80035a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	bf00      	nop
    return;
 80032c6:	e16e      	b.n	80035a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 814a 	bne.w	8003566 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8143 	beq.w	8003566 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 813c 	beq.w	8003566 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	f040 80b4 	bne.w	800347c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003320:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8140 	beq.w	80035aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800332e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003332:	429a      	cmp	r2, r3
 8003334:	f080 8139 	bcs.w	80035aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800333e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334a:	f000 8088 	beq.w	800345e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003364:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800337a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800337e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003386:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1d9      	bne.n	800334e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e1      	bne.n	800339a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003400:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e3      	bne.n	80033d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800342c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342e:	f023 0310 	bic.w	r3, r3, #16
 8003432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003440:	65ba      	str	r2, [r7, #88]	; 0x58
 8003442:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003446:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800344e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e3      	bne.n	800341c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fd96 	bl	8001f8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003466:	b29b      	uxth	r3, r3
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	b29b      	uxth	r3, r3
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8b6 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003474:	e099      	b.n	80035aa <HAL_UART_IRQHandler+0x50e>
 8003476:	bf00      	nop
 8003478:	0800380f 	.word	0x0800380f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003484:	b29b      	uxth	r3, r3
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 808b 	beq.w	80035ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8086 	beq.w	80035ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034c6:	647a      	str	r2, [r7, #68]	; 0x44
 80034c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e3      	bne.n	80034a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3314      	adds	r3, #20
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	623b      	str	r3, [r7, #32]
   return(result);
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e3      	bne.n	80034da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0310 	bic.w	r3, r3, #16
 8003536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003544:	61fa      	str	r2, [r7, #28]
 8003546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	69b9      	ldr	r1, [r7, #24]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	617b      	str	r3, [r7, #20]
   return(result);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e3      	bne.n	8003520 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f83e 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003564:	e023      	b.n	80035ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_UART_IRQHandler+0x4ea>
 8003572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f959 	bl	8003836 <UART_Transmit_IT>
    return;
 8003584:	e014      	b.n	80035b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00e      	beq.n	80035b0 <HAL_UART_IRQHandler+0x514>
 8003592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f999 	bl	80038d6 <UART_EndTransmit_IT>
    return;
 80035a4:	e004      	b.n	80035b0 <HAL_UART_IRQHandler+0x514>
    return;
 80035a6:	bf00      	nop
 80035a8:	e002      	b.n	80035b0 <HAL_UART_IRQHandler+0x514>
      return;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HAL_UART_IRQHandler+0x514>
      return;
 80035ae:	bf00      	nop
  }
}
 80035b0:	37e8      	adds	r7, #232	; 0xe8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop

080035b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b090      	sub	sp, #64	; 0x40
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003608:	e050      	b.n	80036ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d04c      	beq.n	80036ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <UART_WaitOnFlagUntilTimeout+0x30>
 8003618:	f7fe fb5a 	bl	8001cd0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003624:	429a      	cmp	r2, r3
 8003626:	d241      	bcs.n	80036ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003648:	637a      	str	r2, [r7, #52]	; 0x34
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e5      	bne.n	8003628 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	613b      	str	r3, [r7, #16]
   return(result);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800367c:	623a      	str	r2, [r7, #32]
 800367e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	69f9      	ldr	r1, [r7, #28]
 8003682:	6a3a      	ldr	r2, [r7, #32]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	61bb      	str	r3, [r7, #24]
   return(result);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e00f      	b.n	80036cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4013      	ands	r3, r2
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d09f      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3740      	adds	r7, #64	; 0x40
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2222      	movs	r2, #34	; 0x22
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003718:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0220 	orr.w	r2, r2, #32
 8003738:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003748:	b480      	push	{r7}
 800374a:	b095      	sub	sp, #84	; 0x54
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003770:	643a      	str	r2, [r7, #64]	; 0x40
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	61fb      	str	r3, [r7, #28]
   return(result);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d119      	bne.n	80037f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0310 	bic.w	r3, r3, #16
 80037d6:	647b      	str	r3, [r7, #68]	; 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037e0:	61ba      	str	r2, [r7, #24]
 80037e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6979      	ldr	r1, [r7, #20]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	613b      	str	r3, [r7, #16]
   return(result);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003802:	bf00      	nop
 8003804:	3754      	adds	r7, #84	; 0x54
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fecf 	bl	80035cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b21      	cmp	r3, #33	; 0x21
 8003848:	d13e      	bne.n	80038c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	d114      	bne.n	800387e <UART_Transmit_IT+0x48>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d110      	bne.n	800387e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003870:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	1c9a      	adds	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	621a      	str	r2, [r3, #32]
 800387c:	e008      	b.n	8003890 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6211      	str	r1, [r2, #32]
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29b      	uxth	r3, r3
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4619      	mov	r1, r3
 800389e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10f      	bne.n	80038c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fe5e 	bl	80035b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b08c      	sub	sp, #48	; 0x30
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b22      	cmp	r3, #34	; 0x22
 8003918:	f040 80ab 	bne.w	8003a72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d117      	bne.n	8003956 <UART_Receive_IT+0x50>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d113      	bne.n	8003956 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	b29a      	uxth	r2, r3
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003948:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	1c9a      	adds	r2, r3, #2
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	629a      	str	r2, [r3, #40]	; 0x28
 8003954:	e026      	b.n	80039a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003968:	d007      	beq.n	800397a <UART_Receive_IT+0x74>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <UART_Receive_IT+0x82>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e008      	b.n	800399a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003994:	b2da      	uxtb	r2, r3
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4619      	mov	r1, r3
 80039b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d15a      	bne.n	8003a6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0220 	bic.w	r2, r2, #32
 80039c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d135      	bne.n	8003a64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	330c      	adds	r3, #12
 8003a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f023 0310 	bic.w	r3, r3, #16
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	623a      	str	r2, [r7, #32]
 8003a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	69f9      	ldr	r1, [r7, #28]
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e5      	bne.n	80039fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d10a      	bne.n	8003a56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fdbf 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
 8003a62:	e002      	b.n	8003a6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fd fe49 	bl	80016fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e002      	b.n	8003a74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3730      	adds	r7, #48	; 0x30
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a80:	b09f      	sub	sp, #124	; 0x7c
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	68d9      	ldr	r1, [r3, #12]
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	ea40 0301 	orr.w	r3, r0, r1
 8003a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ac0:	f021 010c 	bic.w	r1, r1, #12
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aca:	430b      	orrs	r3, r1
 8003acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ada:	6999      	ldr	r1, [r3, #24]
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	ea40 0301 	orr.w	r3, r0, r1
 8003ae4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4bc5      	ldr	r3, [pc, #788]	; (8003e00 <UART_SetConfig+0x384>)
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d004      	beq.n	8003afa <UART_SetConfig+0x7e>
 8003af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4bc3      	ldr	r3, [pc, #780]	; (8003e04 <UART_SetConfig+0x388>)
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d103      	bne.n	8003b02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003afa:	f7ff f909 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8003afe:	6778      	str	r0, [r7, #116]	; 0x74
 8003b00:	e002      	b.n	8003b08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b02:	f7ff f8f1 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8003b06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b10:	f040 80b6 	bne.w	8003c80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b16:	461c      	mov	r4, r3
 8003b18:	f04f 0500 	mov.w	r5, #0
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	462b      	mov	r3, r5
 8003b20:	1891      	adds	r1, r2, r2
 8003b22:	6439      	str	r1, [r7, #64]	; 0x40
 8003b24:	415b      	adcs	r3, r3
 8003b26:	647b      	str	r3, [r7, #68]	; 0x44
 8003b28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b2c:	1912      	adds	r2, r2, r4
 8003b2e:	eb45 0303 	adc.w	r3, r5, r3
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	00d9      	lsls	r1, r3, #3
 8003b3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b40:	00d0      	lsls	r0, r2, #3
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	1911      	adds	r1, r2, r4
 8003b48:	6639      	str	r1, [r7, #96]	; 0x60
 8003b4a:	416b      	adcs	r3, r5
 8003b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b68:	f7fd f826 	bl	8000bb8 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4ba5      	ldr	r3, [pc, #660]	; (8003e08 <UART_SetConfig+0x38c>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	011e      	lsls	r6, r3, #4
 8003b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7c:	461c      	mov	r4, r3
 8003b7e:	f04f 0500 	mov.w	r5, #0
 8003b82:	4622      	mov	r2, r4
 8003b84:	462b      	mov	r3, r5
 8003b86:	1891      	adds	r1, r2, r2
 8003b88:	6339      	str	r1, [r7, #48]	; 0x30
 8003b8a:	415b      	adcs	r3, r3
 8003b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b92:	1912      	adds	r2, r2, r4
 8003b94:	eb45 0303 	adc.w	r3, r5, r3
 8003b98:	f04f 0000 	mov.w	r0, #0
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	00d9      	lsls	r1, r3, #3
 8003ba2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ba6:	00d0      	lsls	r0, r2, #3
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	1911      	adds	r1, r2, r4
 8003bae:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bb0:	416b      	adcs	r3, r5
 8003bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	1891      	adds	r1, r2, r2
 8003bc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bc2:	415b      	adcs	r3, r3
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003bce:	f7fc fff3 	bl	8000bb8 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4b8c      	ldr	r3, [pc, #560]	; (8003e08 <UART_SetConfig+0x38c>)
 8003bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	2164      	movs	r1, #100	; 0x64
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	3332      	adds	r3, #50	; 0x32
 8003bea:	4a87      	ldr	r2, [pc, #540]	; (8003e08 <UART_SetConfig+0x38c>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bf8:	441e      	add	r6, r3
 8003bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	1894      	adds	r4, r2, r2
 8003c08:	623c      	str	r4, [r7, #32]
 8003c0a:	415b      	adcs	r3, r3
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c12:	1812      	adds	r2, r2, r0
 8003c14:	eb41 0303 	adc.w	r3, r1, r3
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	f04f 0500 	mov.w	r5, #0
 8003c20:	00dd      	lsls	r5, r3, #3
 8003c22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c26:	00d4      	lsls	r4, r2, #3
 8003c28:	4622      	mov	r2, r4
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	1814      	adds	r4, r2, r0
 8003c2e:	653c      	str	r4, [r7, #80]	; 0x50
 8003c30:	414b      	adcs	r3, r1
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	1891      	adds	r1, r2, r2
 8003c40:	61b9      	str	r1, [r7, #24]
 8003c42:	415b      	adcs	r3, r3
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c4e:	f7fc ffb3 	bl	8000bb8 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b6c      	ldr	r3, [pc, #432]	; (8003e08 <UART_SetConfig+0x38c>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a67      	ldr	r2, [pc, #412]	; (8003e08 <UART_SetConfig+0x38c>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4432      	add	r2, r6
 8003c7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c7e:	e0b9      	b.n	8003df4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c82:	461c      	mov	r4, r3
 8003c84:	f04f 0500 	mov.w	r5, #0
 8003c88:	4622      	mov	r2, r4
 8003c8a:	462b      	mov	r3, r5
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	6139      	str	r1, [r7, #16]
 8003c90:	415b      	adcs	r3, r3
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c98:	1912      	adds	r2, r2, r4
 8003c9a:	eb45 0303 	adc.w	r3, r5, r3
 8003c9e:	f04f 0000 	mov.w	r0, #0
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	00d9      	lsls	r1, r3, #3
 8003ca8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cac:	00d0      	lsls	r0, r2, #3
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	eb12 0804 	adds.w	r8, r2, r4
 8003cb6:	eb43 0905 	adc.w	r9, r3, r5
 8003cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	008b      	lsls	r3, r1, #2
 8003cce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cd2:	0082      	lsls	r2, r0, #2
 8003cd4:	4640      	mov	r0, r8
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	f7fc ff6e 	bl	8000bb8 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <UART_SetConfig+0x38c>)
 8003ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	011e      	lsls	r6, r3, #4
 8003cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cec:	4618      	mov	r0, r3
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	1894      	adds	r4, r2, r2
 8003cf8:	60bc      	str	r4, [r7, #8]
 8003cfa:	415b      	adcs	r3, r3
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d02:	1812      	adds	r2, r2, r0
 8003d04:	eb41 0303 	adc.w	r3, r1, r3
 8003d08:	f04f 0400 	mov.w	r4, #0
 8003d0c:	f04f 0500 	mov.w	r5, #0
 8003d10:	00dd      	lsls	r5, r3, #3
 8003d12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d16:	00d4      	lsls	r4, r2, #3
 8003d18:	4622      	mov	r2, r4
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	1814      	adds	r4, r2, r0
 8003d1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d20:	414b      	adcs	r3, r1
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	008b      	lsls	r3, r1, #2
 8003d38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d3c:	0082      	lsls	r2, r0, #2
 8003d3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d42:	f7fc ff39 	bl	8000bb8 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <UART_SetConfig+0x38c>)
 8003d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	3332      	adds	r3, #50	; 0x32
 8003d5e:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <UART_SetConfig+0x38c>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6a:	441e      	add	r6, r3
 8003d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f04f 0100 	mov.w	r1, #0
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	1894      	adds	r4, r2, r2
 8003d7a:	603c      	str	r4, [r7, #0]
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d84:	1812      	adds	r2, r2, r0
 8003d86:	eb41 0303 	adc.w	r3, r1, r3
 8003d8a:	f04f 0400 	mov.w	r4, #0
 8003d8e:	f04f 0500 	mov.w	r5, #0
 8003d92:	00dd      	lsls	r5, r3, #3
 8003d94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d98:	00d4      	lsls	r4, r2, #3
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	eb12 0a00 	adds.w	sl, r2, r0
 8003da2:	eb43 0b01 	adc.w	fp, r3, r1
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	008b      	lsls	r3, r1, #2
 8003dba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dbe:	0082      	lsls	r2, r0, #2
 8003dc0:	4650      	mov	r0, sl
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	f7fc fef8 	bl	8000bb8 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <UART_SetConfig+0x38c>)
 8003dce:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2164      	movs	r1, #100	; 0x64
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	3332      	adds	r3, #50	; 0x32
 8003de0:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <UART_SetConfig+0x38c>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4432      	add	r2, r6
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	377c      	adds	r7, #124	; 0x7c
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfe:	bf00      	nop
 8003e00:	40011000 	.word	0x40011000
 8003e04:	40011400 	.word	0x40011400
 8003e08:	51eb851f 	.word	0x51eb851f

08003e0c <LinkedList_create>:
    return list;
}

LinkedList
LinkedList_create()
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
    LinkedList newList;

    newList = (LinkedList) GLOBAL_MALLOC(sizeof(struct sLinkedList));
 8003e12:	2008      	movs	r0, #8
 8003e14:	f000 f836 	bl	8003e84 <Memory_malloc>
 8003e18:	6078      	str	r0, [r7, #4]
    newList->data = NULL;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
    newList->next = NULL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	605a      	str	r2, [r3, #4]

    return newList;
 8003e26:	687b      	ldr	r3, [r7, #4]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <LinkedList_getNext>:
    return newElement;
}

LinkedList
LinkedList_getNext(LinkedList list)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
    return list->next;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LinkedList_getData>:
    return element;
}

void*
LinkedList_getData(LinkedList self)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    return self->data;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <noMemoryAvailableHandler>:
static MemoryExceptionHandler exceptionHandler = NULL;
static void* exceptionHandlerParameter = NULL;

static void
noMemoryAvailableHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    if (exceptionHandler != NULL)
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <noMemoryAvailableHandler+0x1c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <noMemoryAvailableHandler+0x18>
        exceptionHandler(exceptionHandlerParameter);
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <noMemoryAvailableHandler+0x1c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a03      	ldr	r2, [pc, #12]	; (8003e80 <noMemoryAvailableHandler+0x20>)
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4610      	mov	r0, r2
 8003e76:	4798      	blx	r3
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000584 	.word	0x20000584
 8003e80:	20000588 	.word	0x20000588

08003e84 <Memory_malloc>:
    exceptionHandlerParameter = parameter;
}

void*
Memory_malloc(size_t size)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
    void* memory = malloc(size);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f008 fd35 	bl	800c8fc <malloc>
 8003e92:	4603      	mov	r3, r0
 8003e94:	60fb      	str	r3, [r7, #12]

    if (memory == NULL)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <Memory_malloc+0x1c>
        noMemoryAvailableHandler();
 8003e9c:	f7ff ffe0 	bl	8003e60 <noMemoryAvailableHandler>

    return memory;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <Memory_free>:
    return memory;
}

void
Memory_free(void* memb)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
    free(memb);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f008 fd2a 	bl	800c90c <free>
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <CP16Time2a_getFromBuffer>:
 *  CP16Time2a type
 **********************************/

bool
CP16Time2a_getFromBuffer (CP16Time2a self, uint8_t* msg, int msgSize, int startIndex)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
    if (msgSize < startIndex + 2)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	dc01      	bgt.n	8003edc <CP16Time2a_getFromBuffer+0x1c>
        return false;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e015      	b.n	8003f08 <CP16Time2a_getFromBuffer+0x48>

    int i;

    for (i = 0; i < 2; i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	e00e      	b.n	8003f00 <CP16Time2a_getFromBuffer+0x40>
        self->encodedValue[i] = msg[startIndex + i];
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4413      	add	r3, r2
 8003eee:	7819      	ldrb	r1, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 2; i++)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3301      	adds	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	dded      	ble.n	8003ee2 <CP16Time2a_getFromBuffer+0x22>

    return true;
 8003f06:	2301      	movs	r3, #1
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <CP24Time2a_getFromBuffer>:
 *  CP24Time2a type
 **********************************/

bool
CP24Time2a_getFromBuffer (CP24Time2a self, uint8_t* msg, int msgSize, int startIndex)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
    if (msgSize < startIndex + 3)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	3302      	adds	r3, #2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	dc01      	bgt.n	8003f30 <CP24Time2a_getFromBuffer+0x1c>
        return false;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e015      	b.n	8003f5c <CP24Time2a_getFromBuffer+0x48>

    int i;

    for (i = 0; i < 3; i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e00e      	b.n	8003f54 <CP24Time2a_getFromBuffer+0x40>
        self->encodedValue[i] = msg[startIndex + i];
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4413      	add	r3, r2
 8003f42:	7819      	ldrb	r1, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4413      	add	r3, r2
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 3; i++)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3301      	adds	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	dded      	ble.n	8003f36 <CP24Time2a_getFromBuffer+0x22>

    return true;
 8003f5a:	2301      	movs	r3, #1
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <CP56Time2a_getFromBuffer>:
    return msTimestamp;
}

/* private */ bool
CP56Time2a_getFromBuffer(CP56Time2a self, uint8_t* msg, int msgSize, int startIndex)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
    if (msgSize < startIndex + 7)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	3306      	adds	r3, #6
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	dc01      	bgt.n	8003f84 <CP56Time2a_getFromBuffer+0x1c>
        return false;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e015      	b.n	8003fb0 <CP56Time2a_getFromBuffer+0x48>

    int i;

    for (i = 0; i < 7; i++)
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e00e      	b.n	8003fa8 <CP56Time2a_getFromBuffer+0x40>
        self->encodedValue[i] = msg[startIndex + i];
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	4413      	add	r3, r2
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4413      	add	r3, r2
 8003f96:	7819      	ldrb	r1, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	460a      	mov	r2, r1
 8003fa0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 7; i++)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	dded      	ble.n	8003f8a <CP56Time2a_getFromBuffer+0x22>

    return true;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <asduFrame_destroy>:
    CS101_ASDU asdu;
};

static void
asduFrame_destroy(Frame self)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    UNUSED_PARAMETER(self);
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <asduFrame_setNextByte>:

static void
asduFrame_setNextByte(Frame self, uint8_t byte)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
    ASDUFrame frame = (ASDUFrame) self;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

    frame->asdu->payload[frame->asdu->payloadSize++] = byte;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68d9      	ldr	r1, [r3, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	1c50      	adds	r0, r2, #1
 8003fee:	6118      	str	r0, [r3, #16]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	701a      	strb	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <asduFrame_appendBytes>:

static void
asduFrame_appendBytes(Frame self, uint8_t* bytes, int numberOfBytes)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
    ASDUFrame frame = (ASDUFrame) self;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	61bb      	str	r3, [r7, #24]

    uint8_t* target = frame->asdu->payload + frame->asdu->payloadSize;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	6852      	ldr	r2, [r2, #4]
 800401e:	6912      	ldr	r2, [r2, #16]
 8004020:	4413      	add	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

    int i;
    for (i = 0; i < numberOfBytes; i++)
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e00a      	b.n	8004040 <asduFrame_appendBytes+0x3c>
        target[i] = bytes[i];
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	441a      	add	r2, r3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	6979      	ldr	r1, [r7, #20]
 8004034:	440b      	add	r3, r1
 8004036:	7812      	ldrb	r2, [r2, #0]
 8004038:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfBytes; i++)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3301      	adds	r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	dbf0      	blt.n	800402a <asduFrame_appendBytes+0x26>

    frame->asdu->payloadSize += numberOfBytes;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	6919      	ldr	r1, [r3, #16]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	440a      	add	r2, r1
 8004056:	611a      	str	r2, [r3, #16]
}
 8004058:	bf00      	nop
 800405a:	3724      	adds	r7, #36	; 0x24
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <asduFrame_getSpaceLeft>:

static int
asduFrame_getSpaceLeft(Frame self)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
    ASDUFrame frame = (ASDUFrame) self;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60fb      	str	r3, [r7, #12]

    return (frame->asdu->parameters->maxSizeOfASDU - frame->asdu->payloadSize - frame->asdu->asduHeaderLength);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	1ad3      	subs	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <CS101_ASDU_initializeStatic>:
}

CS101_ASDU
CS101_ASDU_initializeStatic(CS101_StaticASDU self, CS101_AppLayerParameters parameters, bool isSequence, CS101_CauseOfTransmission cot, int oa, int ca,
        bool isTest, bool isNegative)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	4611      	mov	r1, r2
 80040a0:	461a      	mov	r2, r3
 80040a2:	460b      	mov	r3, r1
 80040a4:	71fb      	strb	r3, [r7, #7]
 80040a6:	4613      	mov	r3, r2
 80040a8:	71bb      	strb	r3, [r7, #6]
    int asduHeaderLength = 2 + parameters->sizeOfCOT + parameters->sizeOfCA;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

    self->encodedData[0] = (uint8_t) 0;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	751a      	strb	r2, [r3, #20]

    if (isSequence)
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <CS101_ASDU_initializeStatic+0x38>
        self->encodedData[1] = 0x80;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2280      	movs	r2, #128	; 0x80
 80040c8:	755a      	strb	r2, [r3, #21]
 80040ca:	e002      	b.n	80040d2 <CS101_ASDU_initializeStatic+0x3e>
    else
        self->encodedData[1] = 0;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	755a      	strb	r2, [r3, #21]

    self->encodedData[2] = (uint8_t) (cot & 0x3f);
 80040d2:	79bb      	ldrb	r3, [r7, #6]
 80040d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	759a      	strb	r2, [r3, #22]

    if (isTest)
 80040de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <CS101_ASDU_initializeStatic+0x60>
        self->encodedData[2] |= 0x80;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	7d9b      	ldrb	r3, [r3, #22]
 80040ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	759a      	strb	r2, [r3, #22]

    if (isNegative)
 80040f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d006      	beq.n	800410a <CS101_ASDU_initializeStatic+0x76>
        self->encodedData[2] |= 0x40;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	7d9b      	ldrb	r3, [r3, #22]
 8004100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004104:	b2da      	uxtb	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	759a      	strb	r2, [r3, #22]

    int caIndex;

    if (parameters->sizeOfCOT > 1) {
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b01      	cmp	r3, #1
 8004110:	dd06      	ble.n	8004120 <CS101_ASDU_initializeStatic+0x8c>
        self->encodedData[3] = (uint8_t) oa;
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	75da      	strb	r2, [r3, #23]
        caIndex = 4;
 800411a:	2304      	movs	r3, #4
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e001      	b.n	8004124 <CS101_ASDU_initializeStatic+0x90>
    }
    else
        caIndex = 3;
 8004120:	2303      	movs	r3, #3
 8004122:	617b      	str	r3, [r7, #20]

    self->encodedData[caIndex] = ca % 0x100;
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	425a      	negs	r2, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	bf58      	it	pl
 800412e:	4253      	negpl	r3, r2
 8004130:	b2d9      	uxtb	r1, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4413      	add	r3, r2
 8004138:	3314      	adds	r3, #20
 800413a:	460a      	mov	r2, r1
 800413c:	701a      	strb	r2, [r3, #0]

    if (parameters->sizeOfCA > 1)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b01      	cmp	r3, #1
 8004144:	dd0c      	ble.n	8004160 <CS101_ASDU_initializeStatic+0xcc>
        self->encodedData[caIndex + 1] = ca / 0x100;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	da00      	bge.n	800414e <CS101_ASDU_initializeStatic+0xba>
 800414c:	33ff      	adds	r3, #255	; 0xff
 800414e:	121b      	asrs	r3, r3, #8
 8004150:	461a      	mov	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	3301      	adds	r3, #1
 8004156:	b2d1      	uxtb	r1, r2
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	460a      	mov	r2, r1
 800415e:	751a      	strb	r2, [r3, #20]

    self->asdu = self->encodedData;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f103 0214 	add.w	r2, r3, #20
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	605a      	str	r2, [r3, #4]
    self->asduHeaderLength = asduHeaderLength;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	609a      	str	r2, [r3, #8]
    self->payload = self->encodedData + asduHeaderLength;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f103 0214 	add.w	r2, r3, #20
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	441a      	add	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	60da      	str	r2, [r3, #12]
    self->payloadSize = 0;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	611a      	str	r2, [r3, #16]
    self->parameters = parameters;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	601a      	str	r2, [r3, #0]

    return (CS101_ASDU) self;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <CS101_ASDU_destroy>:

void
CS101_ASDU_destroy(CS101_ASDU self)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fe82 	bl	8003eaa <Memory_free>
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <CS101_ASDU_encode>:

void
CS101_ASDU_encode(CS101_ASDU self, Frame frame)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
    Frame_appendBytes(frame, self->asdu, self->asduHeaderLength + self->payloadSize);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	461a      	mov	r2, r3
 80041c8:	6838      	ldr	r0, [r7, #0]
 80041ca:	f008 f81a 	bl	800c202 <Frame_appendBytes>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <CS101_ASDU_createFromBuffer>:

CS101_ASDU
CS101_ASDU_createFromBuffer(CS101_AppLayerParameters parameters, uint8_t* msg, int msgLength)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
    int asduHeaderLength = 2 + parameters->sizeOfCOT + parameters->sizeOfCA;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	1c9a      	adds	r2, r3, #2
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	4413      	add	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

    if (msgLength < asduHeaderLength)
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	da01      	bge.n	80041fc <CS101_ASDU_createFromBuffer+0x26>
        return NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e01a      	b.n	8004232 <CS101_ASDU_createFromBuffer+0x5c>

    CS101_ASDU self = (CS101_ASDU) GLOBAL_MALLOC(sizeof(struct sCS101_ASDU));
 80041fc:	2014      	movs	r0, #20
 80041fe:	f7ff fe41 	bl	8003e84 <Memory_malloc>
 8004202:	6138      	str	r0, [r7, #16]

    if (self != NULL) {
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <CS101_ASDU_createFromBuffer+0x5a>
        self->parameters = parameters;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

        self->asdu = msg;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	605a      	str	r2, [r3, #4]
        self->asduHeaderLength = asduHeaderLength;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	609a      	str	r2, [r3, #8]

        self->payload = msg + asduHeaderLength;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	441a      	add	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	60da      	str	r2, [r3, #12]
        self->payloadSize = msgLength - asduHeaderLength;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	611a      	str	r2, [r3, #16]
    }

    return self;
 8004230:	693b      	ldr	r3, [r7, #16]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <getFirstIOA>:
        return false;
}

static int
getFirstIOA(CS101_ASDU self)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
    int startIndex = self->asduHeaderLength;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]

    int ioa = self->asdu[startIndex];
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4413      	add	r3, r2
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]

    if (self->parameters->sizeOfIOA > 1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	2b01      	cmp	r3, #1
 800425c:	dd09      	ble.n	8004272 <getFirstIOA+0x38>
        ioa += (self->asdu [startIndex + 1] * 0x100);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3301      	adds	r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

    if (self->parameters->sizeOfIOA > 2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	2b02      	cmp	r3, #2
 800427a:	dd09      	ble.n	8004290 <getFirstIOA+0x56>
        ioa += (self->asdu [startIndex + 2] * 0x10000);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3302      	adds	r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4413      	add	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

    return ioa;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <CS101_ASDU_addInformationObject>:

bool
CS101_ASDU_addInformationObject(CS101_ASDU self, InformationObject io)
{
 80042a0:	b5b0      	push	{r4, r5, r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
    struct sASDUFrame asduFrame = {
 80042aa:	4b33      	ldr	r3, [pc, #204]	; (8004378 <CS101_ASDU_addInformationObject+0xd8>)
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
            &asduFrameVFT,
            self
    };

    bool encoded = false;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]

    int numberOfElements = CS101_ASDU_getNumberOfElements(self);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f881 	bl	80043be <CS101_ASDU_getNumberOfElements>
 80042bc:	6138      	str	r0, [r7, #16]

    if (numberOfElements == 0) {
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d111      	bne.n	80042e8 <CS101_ASDU_addInformationObject+0x48>
        self->asdu[0] = (uint8_t) InformationObject_getType(io);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685c      	ldr	r4, [r3, #4]
 80042c8:	6838      	ldr	r0, [r7, #0]
 80042ca:	f001 fffe 	bl	80062ca <InformationObject_getType>
 80042ce:	4603      	mov	r3, r0
 80042d0:	7023      	strb	r3, [r4, #0]

        encoded = InformationObject_encode(io, (Frame) &asduFrame, self->parameters, false);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	f107 0108 	add.w	r1, r7, #8
 80042da:	2300      	movs	r3, #0
 80042dc:	6838      	ldr	r0, [r7, #0]
 80042de:	f001 ffb9 	bl	8006254 <InformationObject_encode>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]
 80042e6:	e038      	b.n	800435a <CS101_ASDU_addInformationObject+0xba>
    }
    else if (numberOfElements < 0x7f) {
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b7e      	cmp	r3, #126	; 0x7e
 80042ec:	dc35      	bgt.n	800435a <CS101_ASDU_addInformationObject+0xba>

        /* Check if type of information object is matching ASDU type */

        if (self->asdu[0] == (uint8_t) InformationObject_getType(io)) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	781c      	ldrb	r4, [r3, #0]
 80042f4:	6838      	ldr	r0, [r7, #0]
 80042f6:	f001 ffe8 	bl	80062ca <InformationObject_getType>
 80042fa:	4603      	mov	r3, r0
 80042fc:	429c      	cmp	r4, r3
 80042fe:	d12c      	bne.n	800435a <CS101_ASDU_addInformationObject+0xba>

            if (CS101_ASDU_isSequence(self)) {
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f848 	bl	8004396 <CS101_ASDU_isSequence>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01c      	beq.n	8004346 <CS101_ASDU_addInformationObject+0xa6>

                /* check that new information object has correct IOA */
                if (InformationObject_getObjectAddress(io) == (getFirstIOA(self) + CS101_ASDU_getNumberOfElements(self)))
 800430c:	6838      	ldr	r0, [r7, #0]
 800430e:	f001 ffc2 	bl	8006296 <InformationObject_getObjectAddress>
 8004312:	4604      	mov	r4, r0
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff90 	bl	800423a <getFirstIOA>
 800431a:	4605      	mov	r5, r0
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f84e 	bl	80043be <CS101_ASDU_getNumberOfElements>
 8004322:	4603      	mov	r3, r0
 8004324:	442b      	add	r3, r5
 8004326:	429c      	cmp	r4, r3
 8004328:	d10a      	bne.n	8004340 <CS101_ASDU_addInformationObject+0xa0>
                    encoded = InformationObject_encode(io, (Frame) &asduFrame, self->parameters, true);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f107 0108 	add.w	r1, r7, #8
 8004332:	2301      	movs	r3, #1
 8004334:	6838      	ldr	r0, [r7, #0]
 8004336:	f001 ff8d 	bl	8006254 <InformationObject_encode>
 800433a:	4603      	mov	r3, r0
 800433c:	75fb      	strb	r3, [r7, #23]
 800433e:	e00c      	b.n	800435a <CS101_ASDU_addInformationObject+0xba>
                else
                    encoded = false;
 8004340:	2300      	movs	r3, #0
 8004342:	75fb      	strb	r3, [r7, #23]
 8004344:	e009      	b.n	800435a <CS101_ASDU_addInformationObject+0xba>
            }
            else {
                encoded = InformationObject_encode(io, (Frame) &asduFrame, self->parameters, false);;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	f107 0108 	add.w	r1, r7, #8
 800434e:	2300      	movs	r3, #0
 8004350:	6838      	ldr	r0, [r7, #0]
 8004352:	f001 ff7f 	bl	8006254 <InformationObject_encode>
 8004356:	4603      	mov	r3, r0
 8004358:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    if (encoded)
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <CS101_ASDU_addInformationObject+0xce>
        self->asdu[1]++; /* increase number of elements in VSQ */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	3301      	adds	r3, #1
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	3201      	adds	r2, #1
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    return encoded;
 800436e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bdb0      	pop	{r4, r5, r7, pc}
 8004378:	20000124 	.word	0x20000124

0800437c <CS101_ASDU_getTypeID>:
    }
}

IEC60870_5_TypeID
CS101_ASDU_getTypeID(CS101_ASDU self)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
    return (TypeID) (self->asdu[0]);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	781b      	ldrb	r3, [r3, #0]
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <CS101_ASDU_isSequence>:
    self->asdu[0] = (uint8_t) typeId;
}

bool
CS101_ASDU_isSequence(CS101_ASDU self)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
    if ((self->asdu[1] & 0x80) != 0)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	3301      	adds	r3, #1
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b25b      	sxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	da01      	bge.n	80043b0 <CS101_ASDU_isSequence+0x1a>
        return true;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <CS101_ASDU_isSequence+0x1c>
    else
        return false;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <CS101_ASDU_getNumberOfElements>:
        self->asdu[1] &= 0x7f;
}

int
CS101_ASDU_getNumberOfElements(CS101_ASDU self)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
    return (self->asdu[1] & 0x7f);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	3301      	adds	r3, #1
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <CS101_ASDU_getElement>:
    self->asdu[1] |= ((uint8_t) numberOfElements) & 0x7f;
}

InformationObject
CS101_ASDU_getElement(CS101_ASDU self, int index)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
    return CS101_ASDU_getElementEx(self, NULL, index);
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	2100      	movs	r1, #0
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f805 	bl	80043fc <CS101_ASDU_getElementEx>
 80043f2:	4603      	mov	r3, r0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <CS101_ASDU_getElementEx>:

InformationObject
CS101_ASDU_getElementEx(CS101_ASDU self, InformationObject io, int index)
{
 80043fc:	b5b0      	push	{r4, r5, r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
    InformationObject retVal = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]

    int elementSize;

    switch (CS101_ASDU_getTypeID(self)) {
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ffb5 	bl	800437c <CS101_ASDU_getTypeID>
 8004412:	4603      	mov	r3, r0
 8004414:	3b01      	subs	r3, #1
 8004416:	2b7e      	cmp	r3, #126	; 0x7e
 8004418:	f201 84f3 	bhi.w	8005e02 <CS101_ASDU_getElementEx+0x1a06>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <CS101_ASDU_getElementEx+0x28>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004621 	.word	0x08004621
 8004428:	080046b5 	.word	0x080046b5
 800442c:	08004749 	.word	0x08004749
 8004430:	080047dd 	.word	0x080047dd
 8004434:	08004871 	.word	0x08004871
 8004438:	08004905 	.word	0x08004905
 800443c:	08004999 	.word	0x08004999
 8004440:	08004a2d 	.word	0x08004a2d
 8004444:	08004ac1 	.word	0x08004ac1
 8004448:	08004b55 	.word	0x08004b55
 800444c:	08004be9 	.word	0x08004be9
 8004450:	08004c7d 	.word	0x08004c7d
 8004454:	08004d11 	.word	0x08004d11
 8004458:	08004da5 	.word	0x08004da5
 800445c:	08004e39 	.word	0x08004e39
 8004460:	08004ecd 	.word	0x08004ecd
 8004464:	08004f61 	.word	0x08004f61
 8004468:	08004ff5 	.word	0x08004ff5
 800446c:	08005089 	.word	0x08005089
 8004470:	0800511d 	.word	0x0800511d
 8004474:	080051b1 	.word	0x080051b1
 8004478:	08005e03 	.word	0x08005e03
 800447c:	08005e03 	.word	0x08005e03
 8004480:	08005e03 	.word	0x08005e03
 8004484:	08005e03 	.word	0x08005e03
 8004488:	08005e03 	.word	0x08005e03
 800448c:	08005e03 	.word	0x08005e03
 8004490:	08005e03 	.word	0x08005e03
 8004494:	08005e03 	.word	0x08005e03
 8004498:	08005245 	.word	0x08005245
 800449c:	080052d9 	.word	0x080052d9
 80044a0:	0800536d 	.word	0x0800536d
 80044a4:	08005401 	.word	0x08005401
 80044a8:	08005495 	.word	0x08005495
 80044ac:	08005529 	.word	0x08005529
 80044b0:	080055bd 	.word	0x080055bd
 80044b4:	0800564d 	.word	0x0800564d
 80044b8:	080056dd 	.word	0x080056dd
 80044bc:	0800576d 	.word	0x0800576d
 80044c0:	080057fd 	.word	0x080057fd
 80044c4:	08005e03 	.word	0x08005e03
 80044c8:	08005e03 	.word	0x08005e03
 80044cc:	08005e03 	.word	0x08005e03
 80044d0:	08005e03 	.word	0x08005e03
 80044d4:	0800588d 	.word	0x0800588d
 80044d8:	080058bb 	.word	0x080058bb
 80044dc:	080058e9 	.word	0x080058e9
 80044e0:	08005917 	.word	0x08005917
 80044e4:	08005945 	.word	0x08005945
 80044e8:	08005973 	.word	0x08005973
 80044ec:	080059a1 	.word	0x080059a1
 80044f0:	08005e03 	.word	0x08005e03
 80044f4:	08005e03 	.word	0x08005e03
 80044f8:	08005e03 	.word	0x08005e03
 80044fc:	08005e03 	.word	0x08005e03
 8004500:	08005e03 	.word	0x08005e03
 8004504:	08005e03 	.word	0x08005e03
 8004508:	080059cf 	.word	0x080059cf
 800450c:	080059fd 	.word	0x080059fd
 8004510:	08005a2b 	.word	0x08005a2b
 8004514:	08005a59 	.word	0x08005a59
 8004518:	08005a87 	.word	0x08005a87
 800451c:	08005ab5 	.word	0x08005ab5
 8004520:	08005ae3 	.word	0x08005ae3
 8004524:	08005e03 	.word	0x08005e03
 8004528:	08005e03 	.word	0x08005e03
 800452c:	08005e03 	.word	0x08005e03
 8004530:	08005e03 	.word	0x08005e03
 8004534:	08005e03 	.word	0x08005e03
 8004538:	08005b11 	.word	0x08005b11
 800453c:	08005e03 	.word	0x08005e03
 8004540:	08005e03 	.word	0x08005e03
 8004544:	08005e03 	.word	0x08005e03
 8004548:	08005e03 	.word	0x08005e03
 800454c:	08005e03 	.word	0x08005e03
 8004550:	08005e03 	.word	0x08005e03
 8004554:	08005e03 	.word	0x08005e03
 8004558:	08005e03 	.word	0x08005e03
 800455c:	08005e03 	.word	0x08005e03
 8004560:	08005e03 	.word	0x08005e03
 8004564:	08005e03 	.word	0x08005e03
 8004568:	08005e03 	.word	0x08005e03
 800456c:	08005e03 	.word	0x08005e03
 8004570:	08005e03 	.word	0x08005e03
 8004574:	08005e03 	.word	0x08005e03
 8004578:	08005e03 	.word	0x08005e03
 800457c:	08005e03 	.word	0x08005e03
 8004580:	08005e03 	.word	0x08005e03
 8004584:	08005e03 	.word	0x08005e03
 8004588:	08005e03 	.word	0x08005e03
 800458c:	08005e03 	.word	0x08005e03
 8004590:	08005e03 	.word	0x08005e03
 8004594:	08005e03 	.word	0x08005e03
 8004598:	08005e03 	.word	0x08005e03
 800459c:	08005e03 	.word	0x08005e03
 80045a0:	08005e03 	.word	0x08005e03
 80045a4:	08005e03 	.word	0x08005e03
 80045a8:	08005e03 	.word	0x08005e03
 80045ac:	08005e03 	.word	0x08005e03
 80045b0:	08005b35 	.word	0x08005b35
 80045b4:	08005b4f 	.word	0x08005b4f
 80045b8:	08005b69 	.word	0x08005b69
 80045bc:	08005b83 	.word	0x08005b83
 80045c0:	08005b9d 	.word	0x08005b9d
 80045c4:	08005bb7 	.word	0x08005bb7
 80045c8:	08005bd1 	.word	0x08005bd1
 80045cc:	08005beb 	.word	0x08005beb
 80045d0:	08005e03 	.word	0x08005e03
 80045d4:	08005e03 	.word	0x08005e03
 80045d8:	08005c05 	.word	0x08005c05
 80045dc:	08005c33 	.word	0x08005c33
 80045e0:	08005c61 	.word	0x08005c61
 80045e4:	08005c8f 	.word	0x08005c8f
 80045e8:	08005e03 	.word	0x08005e03
 80045ec:	08005e03 	.word	0x08005e03
 80045f0:	08005e03 	.word	0x08005e03
 80045f4:	08005e03 	.word	0x08005e03
 80045f8:	08005e03 	.word	0x08005e03
 80045fc:	08005e03 	.word	0x08005e03
 8004600:	08005cbd 	.word	0x08005cbd
 8004604:	08005cd7 	.word	0x08005cd7
 8004608:	08005cf1 	.word	0x08005cf1
 800460c:	08005d0b 	.word	0x08005d0b
 8004610:	08005d25 	.word	0x08005d25
 8004614:	08005d3f 	.word	0x08005d3f
 8004618:	08005d59 	.word	0x08005d59
 800461c:	08005de9 	.word	0x08005de9

    case M_SP_NA_1: /* 1 */

        elementSize = 1;
 8004620:	2301      	movs	r3, #1
 8004622:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff feb6 	bl	8004396 <CS101_ASDU_isSequence>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d028      	beq.n	8004682 <CS101_ASDU_getElementEx+0x286>
            retVal  = (InformationObject) SinglePointInformation_getFromBuffer((SinglePointInformation) io, self->parameters,
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68dc      	ldr	r4, [r3, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6939      	ldr	r1, [r7, #16]
 8004646:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) SinglePointInformation_getFromBuffer((SinglePointInformation) io, self->parameters,
 800464a:	4413      	add	r3, r2
 800464c:	2201      	movs	r2, #1
 800464e:	9201      	str	r2, [sp, #4]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	462b      	mov	r3, r5
 8004654:	4622      	mov	r2, r4
 8004656:	4601      	mov	r1, r0
 8004658:	68b8      	ldr	r0, [r7, #8]
 800465a:	f001 ff0c 	bl	8006476 <SinglePointInformation_getFromBuffer>
 800465e:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	4619      	mov	r1, r3
 800466c:	f001 fe71 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004670:	4602      	mov	r2, r0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	4619      	mov	r1, r3
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	f001 fe18 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) SinglePointInformation_getFromBuffer((SinglePointInformation) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 800467e:	f001 bbc1 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) SinglePointInformation_getFromBuffer((SinglePointInformation) io, self->parameters,
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6819      	ldr	r1, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68d8      	ldr	r0, [r3, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
            retVal  = (InformationObject) SinglePointInformation_getFromBuffer((SinglePointInformation) io, self->parameters,
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	2200      	movs	r2, #0
 80046a0:	9201      	str	r2, [sp, #4]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4623      	mov	r3, r4
 80046a6:	4602      	mov	r2, r0
 80046a8:	68b8      	ldr	r0, [r7, #8]
 80046aa:	f001 fee4 	bl	8006476 <SinglePointInformation_getFromBuffer>
 80046ae:	6178      	str	r0, [r7, #20]
        break;
 80046b0:	f001 bba8 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_SP_TA_1: /* 2 */

        elementSize = 4;
 80046b4:	2304      	movs	r3, #4
 80046b6:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fe6c 	bl	8004396 <CS101_ASDU_isSequence>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d028      	beq.n	8004716 <CS101_ASDU_getElementEx+0x31a>
            retVal  = (InformationObject) SinglePointWithCP24Time2a_getFromBuffer((SinglePointWithCP24Time2a) io, self->parameters,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68dc      	ldr	r4, [r3, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6939      	ldr	r1, [r7, #16]
 80046da:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) SinglePointWithCP24Time2a_getFromBuffer((SinglePointWithCP24Time2a) io, self->parameters,
 80046de:	4413      	add	r3, r2
 80046e0:	2201      	movs	r2, #1
 80046e2:	9201      	str	r2, [sp, #4]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	462b      	mov	r3, r5
 80046e8:	4622      	mov	r2, r4
 80046ea:	4601      	mov	r1, r0
 80046ec:	68b8      	ldr	r0, [r7, #8]
 80046ee:	f002 fb83 	bl	8006df8 <SinglePointWithCP24Time2a_getFromBuffer>
 80046f2:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	4619      	mov	r1, r3
 8004700:	f001 fe27 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004704:	4602      	mov	r2, r0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	4619      	mov	r1, r3
 800470c:	6978      	ldr	r0, [r7, #20]
 800470e:	f001 fdce 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) SinglePointWithCP24Time2a_getFromBuffer((SinglePointWithCP24Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004712:	f001 bb77 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) SinglePointWithCP24Time2a_getFromBuffer((SinglePointWithCP24Time2a) io, self->parameters,
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68d8      	ldr	r0, [r3, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4413      	add	r3, r2
            retVal  = (InformationObject) SinglePointWithCP24Time2a_getFromBuffer((SinglePointWithCP24Time2a) io, self->parameters,
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	2200      	movs	r2, #0
 8004734:	9201      	str	r2, [sp, #4]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4623      	mov	r3, r4
 800473a:	4602      	mov	r2, r0
 800473c:	68b8      	ldr	r0, [r7, #8]
 800473e:	f002 fb5b 	bl	8006df8 <SinglePointWithCP24Time2a_getFromBuffer>
 8004742:	6178      	str	r0, [r7, #20]
        break;
 8004744:	f001 bb5e 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_DP_NA_1: /* 3 */

        elementSize = 1;
 8004748:	2301      	movs	r3, #1
 800474a:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff fe22 	bl	8004396 <CS101_ASDU_isSequence>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d028      	beq.n	80047aa <CS101_ASDU_getElementEx+0x3ae>
            retVal  = (InformationObject) DoublePointInformation_getFromBuffer((DoublePointInformation) io, self->parameters,
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68dc      	ldr	r4, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6939      	ldr	r1, [r7, #16]
 800476e:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) DoublePointInformation_getFromBuffer((DoublePointInformation) io, self->parameters,
 8004772:	4413      	add	r3, r2
 8004774:	2201      	movs	r2, #1
 8004776:	9201      	str	r2, [sp, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	462b      	mov	r3, r5
 800477c:	4622      	mov	r2, r4
 800477e:	4601      	mov	r1, r0
 8004780:	68b8      	ldr	r0, [r7, #8]
 8004782:	f002 f923 	bl	80069cc <DoublePointInformation_getFromBuffer>
 8004786:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	4619      	mov	r1, r3
 8004794:	f001 fddd 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004798:	4602      	mov	r2, r0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f001 fd84 	bl	80062ae <InformationObject_setObjectAddress>
        else
            retVal  = (InformationObject) DoublePointInformation_getFromBuffer((DoublePointInformation) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);


        break;
 80047a6:	f001 bb2d 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) DoublePointInformation_getFromBuffer((DoublePointInformation) io, self->parameters,
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6819      	ldr	r1, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68d8      	ldr	r0, [r3, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4413      	add	r3, r2
            retVal  = (InformationObject) DoublePointInformation_getFromBuffer((DoublePointInformation) io, self->parameters,
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	2200      	movs	r2, #0
 80047c8:	9201      	str	r2, [sp, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	4623      	mov	r3, r4
 80047ce:	4602      	mov	r2, r0
 80047d0:	68b8      	ldr	r0, [r7, #8]
 80047d2:	f002 f8fb 	bl	80069cc <DoublePointInformation_getFromBuffer>
 80047d6:	6178      	str	r0, [r7, #20]
        break;
 80047d8:	f001 bb14 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_DP_TA_1: /* 4 */

        elementSize = 4;
 80047dc:	2304      	movs	r3, #4
 80047de:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff fdd8 	bl	8004396 <CS101_ASDU_isSequence>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d028      	beq.n	800483e <CS101_ASDU_getElementEx+0x442>
            retVal  = (InformationObject) DoublePointWithCP24Time2a_getFromBuffer((DoublePointWithCP24Time2a) io, self->parameters,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68dc      	ldr	r4, [r3, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6939      	ldr	r1, [r7, #16]
 8004802:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) DoublePointWithCP24Time2a_getFromBuffer((DoublePointWithCP24Time2a) io, self->parameters,
 8004806:	4413      	add	r3, r2
 8004808:	2201      	movs	r2, #1
 800480a:	9201      	str	r2, [sp, #4]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	462b      	mov	r3, r5
 8004810:	4622      	mov	r2, r4
 8004812:	4601      	mov	r1, r0
 8004814:	68b8      	ldr	r0, [r7, #8]
 8004816:	f002 f985 	bl	8006b24 <DoublePointWithCP24Time2a_getFromBuffer>
 800481a:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	4619      	mov	r1, r3
 8004828:	f001 fd93 	bl	8006352 <InformationObject_ParseObjectAddress>
 800482c:	4602      	mov	r2, r0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	4619      	mov	r1, r3
 8004834:	6978      	ldr	r0, [r7, #20]
 8004836:	f001 fd3a 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) DoublePointWithCP24Time2a_getFromBuffer((DoublePointWithCP24Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 800483a:	f001 bae3 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) DoublePointWithCP24Time2a_getFromBuffer((DoublePointWithCP24Time2a) io, self->parameters,
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6819      	ldr	r1, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68d8      	ldr	r0, [r3, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4413      	add	r3, r2
            retVal  = (InformationObject) DoublePointWithCP24Time2a_getFromBuffer((DoublePointWithCP24Time2a) io, self->parameters,
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	2200      	movs	r2, #0
 800485c:	9201      	str	r2, [sp, #4]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4623      	mov	r3, r4
 8004862:	4602      	mov	r2, r0
 8004864:	68b8      	ldr	r0, [r7, #8]
 8004866:	f002 f95d 	bl	8006b24 <DoublePointWithCP24Time2a_getFromBuffer>
 800486a:	6178      	str	r0, [r7, #20]
        break;
 800486c:	f001 baca 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ST_NA_1: /* 5 */

        elementSize = 2;
 8004870:	2302      	movs	r3, #2
 8004872:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fd8e 	bl	8004396 <CS101_ASDU_isSequence>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d028      	beq.n	80048d2 <CS101_ASDU_getElementEx+0x4d6>
            retVal  = (InformationObject) StepPositionInformation_getFromBuffer((StepPositionInformation) io, self->parameters,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68dc      	ldr	r4, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6939      	ldr	r1, [r7, #16]
 8004896:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) StepPositionInformation_getFromBuffer((StepPositionInformation) io, self->parameters,
 800489a:	4413      	add	r3, r2
 800489c:	2201      	movs	r2, #1
 800489e:	9201      	str	r2, [sp, #4]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	462b      	mov	r3, r5
 80048a4:	4622      	mov	r2, r4
 80048a6:	4601      	mov	r1, r0
 80048a8:	68b8      	ldr	r0, [r7, #8]
 80048aa:	f001 fe92 	bl	80065d2 <StepPositionInformation_getFromBuffer>
 80048ae:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	4619      	mov	r1, r3
 80048bc:	f001 fd49 	bl	8006352 <InformationObject_ParseObjectAddress>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	6978      	ldr	r0, [r7, #20]
 80048ca:	f001 fcf0 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) StepPositionInformation_getFromBuffer((StepPositionInformation) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 80048ce:	f001 ba99 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) StepPositionInformation_getFromBuffer((StepPositionInformation) io, self->parameters,
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68d8      	ldr	r0, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
            retVal  = (InformationObject) StepPositionInformation_getFromBuffer((StepPositionInformation) io, self->parameters,
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	2200      	movs	r2, #0
 80048f0:	9201      	str	r2, [sp, #4]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4623      	mov	r3, r4
 80048f6:	4602      	mov	r2, r0
 80048f8:	68b8      	ldr	r0, [r7, #8]
 80048fa:	f001 fe6a 	bl	80065d2 <StepPositionInformation_getFromBuffer>
 80048fe:	6178      	str	r0, [r7, #20]
        break;
 8004900:	f001 ba80 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ST_TA_1: /* 6 */

        elementSize = 5;
 8004904:	2305      	movs	r3, #5
 8004906:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff fd44 	bl	8004396 <CS101_ASDU_isSequence>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d028      	beq.n	8004966 <CS101_ASDU_getElementEx+0x56a>
            retVal  = (InformationObject) StepPositionWithCP24Time2a_getFromBuffer((StepPositionWithCP24Time2a) io, self->parameters,
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68dc      	ldr	r4, [r3, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6939      	ldr	r1, [r7, #16]
 800492a:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) StepPositionWithCP24Time2a_getFromBuffer((StepPositionWithCP24Time2a) io, self->parameters,
 800492e:	4413      	add	r3, r2
 8004930:	2201      	movs	r2, #1
 8004932:	9201      	str	r2, [sp, #4]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	462b      	mov	r3, r5
 8004938:	4622      	mov	r2, r4
 800493a:	4601      	mov	r1, r0
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	f001 ff9a 	bl	8006876 <StepPositionWithCP24Time2a_getFromBuffer>
 8004942:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	4619      	mov	r1, r3
 8004950:	f001 fcff 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004954:	4602      	mov	r2, r0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	4619      	mov	r1, r3
 800495c:	6978      	ldr	r0, [r7, #20]
 800495e:	f001 fca6 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) StepPositionWithCP24Time2a_getFromBuffer((StepPositionWithCP24Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004962:	f001 ba4f 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) StepPositionWithCP24Time2a_getFromBuffer((StepPositionWithCP24Time2a) io, self->parameters,
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6819      	ldr	r1, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68d8      	ldr	r0, [r3, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4413      	add	r3, r2
            retVal  = (InformationObject) StepPositionWithCP24Time2a_getFromBuffer((StepPositionWithCP24Time2a) io, self->parameters,
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	2200      	movs	r2, #0
 8004984:	9201      	str	r2, [sp, #4]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4623      	mov	r3, r4
 800498a:	4602      	mov	r2, r0
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f001 ff72 	bl	8006876 <StepPositionWithCP24Time2a_getFromBuffer>
 8004992:	6178      	str	r0, [r7, #20]
        break;
 8004994:	f001 ba36 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_BO_NA_1: /* 7 */

        elementSize = 5;
 8004998:	2305      	movs	r3, #5
 800499a:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff fcfa 	bl	8004396 <CS101_ASDU_isSequence>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d028      	beq.n	80049fa <CS101_ASDU_getElementEx+0x5fe>
            retVal  = (InformationObject) BitString32_getFromBuffer((BitString32) io, self->parameters,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68dc      	ldr	r4, [r3, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6939      	ldr	r1, [r7, #16]
 80049be:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) BitString32_getFromBuffer((BitString32) io, self->parameters,
 80049c2:	4413      	add	r3, r2
 80049c4:	2201      	movs	r2, #1
 80049c6:	9201      	str	r2, [sp, #4]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	462b      	mov	r3, r5
 80049cc:	4622      	mov	r2, r4
 80049ce:	4601      	mov	r1, r0
 80049d0:	68b8      	ldr	r0, [r7, #8]
 80049d2:	f002 fb90 	bl	80070f6 <BitString32_getFromBuffer>
 80049d6:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	4619      	mov	r1, r3
 80049e4:	f001 fcb5 	bl	8006352 <InformationObject_ParseObjectAddress>
 80049e8:	4602      	mov	r2, r0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	6978      	ldr	r0, [r7, #20]
 80049f2:	f001 fc5c 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) BitString32_getFromBuffer((BitString32) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 80049f6:	f001 ba05 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) BitString32_getFromBuffer((BitString32) io, self->parameters,
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68d8      	ldr	r0, [r3, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
            retVal  = (InformationObject) BitString32_getFromBuffer((BitString32) io, self->parameters,
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	2200      	movs	r2, #0
 8004a18:	9201      	str	r2, [sp, #4]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	4623      	mov	r3, r4
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	f002 fb68 	bl	80070f6 <BitString32_getFromBuffer>
 8004a26:	6178      	str	r0, [r7, #20]
        break;
 8004a28:	f001 b9ec 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_BO_TA_1: /* 8 */

        elementSize = 8;
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff fcb0 	bl	8004396 <CS101_ASDU_isSequence>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d028      	beq.n	8004a8e <CS101_ASDU_getElementEx+0x692>
            retVal  = (InformationObject) Bitstring32WithCP24Time2a_getFromBuffer((Bitstring32WithCP24Time2a) io, self->parameters,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68dc      	ldr	r4, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6939      	ldr	r1, [r7, #16]
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) Bitstring32WithCP24Time2a_getFromBuffer((Bitstring32WithCP24Time2a) io, self->parameters,
 8004a56:	4413      	add	r3, r2
 8004a58:	2201      	movs	r2, #1
 8004a5a:	9201      	str	r2, [sp, #4]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	462b      	mov	r3, r5
 8004a60:	4622      	mov	r2, r4
 8004a62:	4601      	mov	r1, r0
 8004a64:	68b8      	ldr	r0, [r7, #8]
 8004a66:	f002 fc28 	bl	80072ba <Bitstring32WithCP24Time2a_getFromBuffer>
 8004a6a:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	4619      	mov	r1, r3
 8004a78:	f001 fc6b 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	6978      	ldr	r0, [r7, #20]
 8004a86:	f001 fc12 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) Bitstring32WithCP24Time2a_getFromBuffer((Bitstring32WithCP24Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004a8a:	f001 b9bb 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) Bitstring32WithCP24Time2a_getFromBuffer((Bitstring32WithCP24Time2a) io, self->parameters,
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6819      	ldr	r1, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68d8      	ldr	r0, [r3, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
            retVal  = (InformationObject) Bitstring32WithCP24Time2a_getFromBuffer((Bitstring32WithCP24Time2a) io, self->parameters,
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	2200      	movs	r2, #0
 8004aac:	9201      	str	r2, [sp, #4]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68b8      	ldr	r0, [r7, #8]
 8004ab6:	f002 fc00 	bl	80072ba <Bitstring32WithCP24Time2a_getFromBuffer>
 8004aba:	6178      	str	r0, [r7, #20]
        break;
 8004abc:	f001 b9a2 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_NA_1: /* 9 */

        elementSize = 3;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff fc66 	bl	8004396 <CS101_ASDU_isSequence>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d028      	beq.n	8004b22 <CS101_ASDU_getElementEx+0x726>
            retVal  = (InformationObject) MeasuredValueNormalized_getFromBuffer((MeasuredValueNormalized) io, self->parameters,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68dc      	ldr	r4, [r3, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6939      	ldr	r1, [r7, #16]
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueNormalized_getFromBuffer((MeasuredValueNormalized) io, self->parameters,
 8004aea:	4413      	add	r3, r2
 8004aec:	2201      	movs	r2, #1
 8004aee:	9201      	str	r2, [sp, #4]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	462b      	mov	r3, r5
 8004af4:	4622      	mov	r2, r4
 8004af6:	4601      	mov	r1, r0
 8004af8:	68b8      	ldr	r0, [r7, #8]
 8004afa:	f002 fdb6 	bl	800766a <MeasuredValueNormalized_getFromBuffer>
 8004afe:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f001 fc21 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004b10:	4602      	mov	r2, r0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f001 fbc8 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueNormalized_getFromBuffer((MeasuredValueNormalized) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004b1e:	f001 b971 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueNormalized_getFromBuffer((MeasuredValueNormalized) io, self->parameters,
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68d8      	ldr	r0, [r3, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueNormalized_getFromBuffer((MeasuredValueNormalized) io, self->parameters,
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	2200      	movs	r2, #0
 8004b40:	9201      	str	r2, [sp, #4]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	4623      	mov	r3, r4
 8004b46:	4602      	mov	r2, r0
 8004b48:	68b8      	ldr	r0, [r7, #8]
 8004b4a:	f002 fd8e 	bl	800766a <MeasuredValueNormalized_getFromBuffer>
 8004b4e:	6178      	str	r0, [r7, #20]
        break;
 8004b50:	f001 b958 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_TA_1: /* 10 */

        elementSize = 6;
 8004b54:	2306      	movs	r3, #6
 8004b56:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff fc1c 	bl	8004396 <CS101_ASDU_isSequence>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d028      	beq.n	8004bb6 <CS101_ASDU_getElementEx+0x7ba>
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP24Time2a_getFromBuffer((MeasuredValueNormalizedWithCP24Time2a) io, self->parameters,
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68dc      	ldr	r4, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6939      	ldr	r1, [r7, #16]
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP24Time2a_getFromBuffer((MeasuredValueNormalizedWithCP24Time2a) io, self->parameters,
 8004b7e:	4413      	add	r3, r2
 8004b80:	2201      	movs	r2, #1
 8004b82:	9201      	str	r2, [sp, #4]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	462b      	mov	r3, r5
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	68b8      	ldr	r0, [r7, #8]
 8004b8e:	f002 fecc 	bl	800792a <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer>
 8004b92:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f001 fbd7 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	6978      	ldr	r0, [r7, #20]
 8004bae:	f001 fb7e 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP24Time2a_getFromBuffer((MeasuredValueNormalizedWithCP24Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004bb2:	f001 b927 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP24Time2a_getFromBuffer((MeasuredValueNormalizedWithCP24Time2a) io, self->parameters,
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68d8      	ldr	r0, [r3, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP24Time2a_getFromBuffer((MeasuredValueNormalizedWithCP24Time2a) io, self->parameters,
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	9201      	str	r2, [sp, #4]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4623      	mov	r3, r4
 8004bda:	4602      	mov	r2, r0
 8004bdc:	68b8      	ldr	r0, [r7, #8]
 8004bde:	f002 fea4 	bl	800792a <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer>
 8004be2:	6178      	str	r0, [r7, #20]
        break;
 8004be4:	f001 b90e 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_NB_1: /* 11 */

        elementSize = 3;
 8004be8:	2303      	movs	r3, #3
 8004bea:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f7ff fbd2 	bl	8004396 <CS101_ASDU_isSequence>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d028      	beq.n	8004c4a <CS101_ASDU_getElementEx+0x84e>
            retVal  = (InformationObject) MeasuredValueScaled_getFromBuffer((MeasuredValueScaled) io, self->parameters,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68dc      	ldr	r4, [r3, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueScaled_getFromBuffer((MeasuredValueScaled) io, self->parameters,
 8004c12:	4413      	add	r3, r2
 8004c14:	2201      	movs	r2, #1
 8004c16:	9201      	str	r2, [sp, #4]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	4622      	mov	r2, r4
 8004c1e:	4601      	mov	r1, r0
 8004c20:	68b8      	ldr	r0, [r7, #8]
 8004c22:	f002 ffce 	bl	8007bc2 <MeasuredValueScaled_getFromBuffer>
 8004c26:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	4619      	mov	r1, r3
 8004c34:	f001 fb8d 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6978      	ldr	r0, [r7, #20]
 8004c42:	f001 fb34 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueScaled_getFromBuffer((MeasuredValueScaled) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004c46:	f001 b8dd 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueScaled_getFromBuffer((MeasuredValueScaled) io, self->parameters,
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6819      	ldr	r1, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	68d8      	ldr	r0, [r3, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueScaled_getFromBuffer((MeasuredValueScaled) io, self->parameters,
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	2200      	movs	r2, #0
 8004c68:	9201      	str	r2, [sp, #4]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f002 ffa6 	bl	8007bc2 <MeasuredValueScaled_getFromBuffer>
 8004c76:	6178      	str	r0, [r7, #20]
        break;
 8004c78:	f001 b8c4 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_TB_1: /* 12 */

        elementSize = 6;
 8004c7c:	2306      	movs	r3, #6
 8004c7e:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fb88 	bl	8004396 <CS101_ASDU_isSequence>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d028      	beq.n	8004cde <CS101_ASDU_getElementEx+0x8e2>
            retVal  = (InformationObject) MeasuredValueScaledWithCP24Time2a_getFromBuffer((MeasuredValueScaledWithCP24Time2a) io, self->parameters,
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68dc      	ldr	r4, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6939      	ldr	r1, [r7, #16]
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueScaledWithCP24Time2a_getFromBuffer((MeasuredValueScaledWithCP24Time2a) io, self->parameters,
 8004ca6:	4413      	add	r3, r2
 8004ca8:	2201      	movs	r2, #1
 8004caa:	9201      	str	r2, [sp, #4]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	4601      	mov	r1, r0
 8004cb4:	68b8      	ldr	r0, [r7, #8]
 8004cb6:	f003 f839 	bl	8007d2c <MeasuredValueScaledWithCP24Time2a_getFromBuffer>
 8004cba:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f001 fb43 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6978      	ldr	r0, [r7, #20]
 8004cd6:	f001 faea 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueScaledWithCP24Time2a_getFromBuffer((MeasuredValueScaledWithCP24Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004cda:	f001 b893 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueScaledWithCP24Time2a_getFromBuffer((MeasuredValueScaledWithCP24Time2a) io, self->parameters,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68d8      	ldr	r0, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueScaledWithCP24Time2a_getFromBuffer((MeasuredValueScaledWithCP24Time2a) io, self->parameters,
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	9201      	str	r2, [sp, #4]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	4623      	mov	r3, r4
 8004d02:	4602      	mov	r2, r0
 8004d04:	68b8      	ldr	r0, [r7, #8]
 8004d06:	f003 f811 	bl	8007d2c <MeasuredValueScaledWithCP24Time2a_getFromBuffer>
 8004d0a:	6178      	str	r0, [r7, #20]
        break;
 8004d0c:	f001 b87a 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>


    case M_ME_NC_1: /* 13 */

        elementSize = 5;
 8004d10:	2305      	movs	r3, #5
 8004d12:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff fb3e 	bl	8004396 <CS101_ASDU_isSequence>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d028      	beq.n	8004d72 <CS101_ASDU_getElementEx+0x976>
            retVal  = (InformationObject) MeasuredValueShort_getFromBuffer((MeasuredValueShort) io, self->parameters,
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68dc      	ldr	r4, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6939      	ldr	r1, [r7, #16]
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueShort_getFromBuffer((MeasuredValueShort) io, self->parameters,
 8004d3a:	4413      	add	r3, r2
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	9201      	str	r2, [sp, #4]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	462b      	mov	r3, r5
 8004d44:	4622      	mov	r2, r4
 8004d46:	4601      	mov	r1, r0
 8004d48:	68b8      	ldr	r0, [r7, #8]
 8004d4a:	f003 f95b 	bl	8008004 <MeasuredValueShort_getFromBuffer>
 8004d4e:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f001 faf9 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004d60:	4602      	mov	r2, r0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f001 faa0 	bl	80062ae <InformationObject_setObjectAddress>
        else
            retVal  = (InformationObject) MeasuredValueShort_getFromBuffer((MeasuredValueShort) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);


        break;
 8004d6e:	f001 b849 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueShort_getFromBuffer((MeasuredValueShort) io, self->parameters,
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68d8      	ldr	r0, [r3, #12]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695a      	ldr	r2, [r3, #20]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueShort_getFromBuffer((MeasuredValueShort) io, self->parameters,
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	2200      	movs	r2, #0
 8004d90:	9201      	str	r2, [sp, #4]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	4623      	mov	r3, r4
 8004d96:	4602      	mov	r2, r0
 8004d98:	68b8      	ldr	r0, [r7, #8]
 8004d9a:	f003 f933 	bl	8008004 <MeasuredValueShort_getFromBuffer>
 8004d9e:	6178      	str	r0, [r7, #20]
        break;
 8004da0:	f001 b830 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_TC_1: /* 14 */

        elementSize = 8;
 8004da4:	2308      	movs	r3, #8
 8004da6:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff faf4 	bl	8004396 <CS101_ASDU_isSequence>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d028      	beq.n	8004e06 <CS101_ASDU_getElementEx+0xa0a>
            retVal  = (InformationObject) MeasuredValueShortWithCP24Time2a_getFromBuffer((MeasuredValueShortWithCP24Time2a) io, self->parameters,
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68dc      	ldr	r4, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6939      	ldr	r1, [r7, #16]
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueShortWithCP24Time2a_getFromBuffer((MeasuredValueShortWithCP24Time2a) io, self->parameters,
 8004dce:	4413      	add	r3, r2
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	9201      	str	r2, [sp, #4]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	462b      	mov	r3, r5
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4601      	mov	r1, r0
 8004ddc:	68b8      	ldr	r0, [r7, #8]
 8004dde:	f003 f9ea 	bl	80081b6 <MeasuredValueShortWithCP24Time2a_getFromBuffer>
 8004de2:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	4619      	mov	r1, r3
 8004df0:	f001 faaf 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004df4:	4602      	mov	r2, r0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6978      	ldr	r0, [r7, #20]
 8004dfe:	f001 fa56 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueShortWithCP24Time2a_getFromBuffer((MeasuredValueShortWithCP24Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004e02:	f000 bfff 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueShortWithCP24Time2a_getFromBuffer((MeasuredValueShortWithCP24Time2a) io, self->parameters,
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68d8      	ldr	r0, [r3, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695a      	ldr	r2, [r3, #20]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueShortWithCP24Time2a_getFromBuffer((MeasuredValueShortWithCP24Time2a) io, self->parameters,
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	2200      	movs	r2, #0
 8004e24:	9201      	str	r2, [sp, #4]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	4623      	mov	r3, r4
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68b8      	ldr	r0, [r7, #8]
 8004e2e:	f003 f9c2 	bl	80081b6 <MeasuredValueShortWithCP24Time2a_getFromBuffer>
 8004e32:	6178      	str	r0, [r7, #20]
        break;
 8004e34:	f000 bfe6 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_IT_NA_1: /* 15 */

        elementSize = 5;
 8004e38:	2305      	movs	r3, #5
 8004e3a:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff faaa 	bl	8004396 <CS101_ASDU_isSequence>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d028      	beq.n	8004e9a <CS101_ASDU_getElementEx+0xa9e>
            retVal  = (InformationObject) IntegratedTotals_getFromBuffer((IntegratedTotals) io, self->parameters,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68dc      	ldr	r4, [r3, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6939      	ldr	r1, [r7, #16]
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) IntegratedTotals_getFromBuffer((IntegratedTotals) io, self->parameters,
 8004e62:	4413      	add	r3, r2
 8004e64:	2201      	movs	r2, #1
 8004e66:	9201      	str	r2, [sp, #4]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	462b      	mov	r3, r5
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4601      	mov	r1, r0
 8004e70:	68b8      	ldr	r0, [r7, #8]
 8004e72:	f003 fb28 	bl	80084c6 <IntegratedTotals_getFromBuffer>
 8004e76:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	4619      	mov	r1, r3
 8004e84:	f001 fa65 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6978      	ldr	r0, [r7, #20]
 8004e92:	f001 fa0c 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) IntegratedTotals_getFromBuffer((IntegratedTotals) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004e96:	f000 bfb5 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) IntegratedTotals_getFromBuffer((IntegratedTotals) io, self->parameters,
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	68d8      	ldr	r0, [r3, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
            retVal  = (InformationObject) IntegratedTotals_getFromBuffer((IntegratedTotals) io, self->parameters,
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	9201      	str	r2, [sp, #4]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68b8      	ldr	r0, [r7, #8]
 8004ec2:	f003 fb00 	bl	80084c6 <IntegratedTotals_getFromBuffer>
 8004ec6:	6178      	str	r0, [r7, #20]
        break;
 8004ec8:	f000 bf9c 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_IT_TA_1: /* 16 */

        elementSize = 8;
 8004ecc:	2308      	movs	r3, #8
 8004ece:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff fa60 	bl	8004396 <CS101_ASDU_isSequence>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d028      	beq.n	8004f2e <CS101_ASDU_getElementEx+0xb32>
            retVal  = (InformationObject) IntegratedTotalsWithCP24Time2a_getFromBuffer((IntegratedTotalsWithCP24Time2a) io, self->parameters,
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68dc      	ldr	r4, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6939      	ldr	r1, [r7, #16]
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) IntegratedTotalsWithCP24Time2a_getFromBuffer((IntegratedTotalsWithCP24Time2a) io, self->parameters,
 8004ef6:	4413      	add	r3, r2
 8004ef8:	2201      	movs	r2, #1
 8004efa:	9201      	str	r2, [sp, #4]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	462b      	mov	r3, r5
 8004f00:	4622      	mov	r2, r4
 8004f02:	4601      	mov	r1, r0
 8004f04:	68b8      	ldr	r0, [r7, #8]
 8004f06:	f003 fb7e 	bl	8008606 <IntegratedTotalsWithCP24Time2a_getFromBuffer>
 8004f0a:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	4619      	mov	r1, r3
 8004f18:	f001 fa1b 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f001 f9c2 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) IntegratedTotalsWithCP24Time2a_getFromBuffer((IntegratedTotalsWithCP24Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004f2a:	f000 bf6b 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) IntegratedTotalsWithCP24Time2a_getFromBuffer((IntegratedTotalsWithCP24Time2a) io, self->parameters,
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6819      	ldr	r1, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68d8      	ldr	r0, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
            retVal  = (InformationObject) IntegratedTotalsWithCP24Time2a_getFromBuffer((IntegratedTotalsWithCP24Time2a) io, self->parameters,
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	9201      	str	r2, [sp, #4]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	4623      	mov	r3, r4
 8004f52:	4602      	mov	r2, r0
 8004f54:	68b8      	ldr	r0, [r7, #8]
 8004f56:	f003 fb56 	bl	8008606 <IntegratedTotalsWithCP24Time2a_getFromBuffer>
 8004f5a:	6178      	str	r0, [r7, #20]
        break;
 8004f5c:	f000 bf52 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_EP_TA_1: /* 17 */

        elementSize = 6;
 8004f60:	2306      	movs	r3, #6
 8004f62:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff fa16 	bl	8004396 <CS101_ASDU_isSequence>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d028      	beq.n	8004fc2 <CS101_ASDU_getElementEx+0xbc6>
            retVal  = (InformationObject) EventOfProtectionEquipment_getFromBuffer((EventOfProtectionEquipment) io, self->parameters,
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	68dc      	ldr	r4, [r3, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6939      	ldr	r1, [r7, #16]
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) EventOfProtectionEquipment_getFromBuffer((EventOfProtectionEquipment) io, self->parameters,
 8004f8a:	4413      	add	r3, r2
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	9201      	str	r2, [sp, #4]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	462b      	mov	r3, r5
 8004f94:	4622      	mov	r2, r4
 8004f96:	4601      	mov	r1, r0
 8004f98:	68b8      	ldr	r0, [r7, #8]
 8004f9a:	f003 fc92 	bl	80088c2 <EventOfProtectionEquipment_getFromBuffer>
 8004f9e:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4619      	mov	r1, r3
 8004fac:	f001 f9d1 	bl	8006352 <InformationObject_ParseObjectAddress>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	6978      	ldr	r0, [r7, #20]
 8004fba:	f001 f978 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) EventOfProtectionEquipment_getFromBuffer((EventOfProtectionEquipment) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8004fbe:	f000 bf21 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) EventOfProtectionEquipment_getFromBuffer((EventOfProtectionEquipment) io, self->parameters,
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	68d8      	ldr	r0, [r3, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
            retVal  = (InformationObject) EventOfProtectionEquipment_getFromBuffer((EventOfProtectionEquipment) io, self->parameters,
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	2200      	movs	r2, #0
 8004fe0:	9201      	str	r2, [sp, #4]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	68b8      	ldr	r0, [r7, #8]
 8004fea:	f003 fc6a 	bl	80088c2 <EventOfProtectionEquipment_getFromBuffer>
 8004fee:	6178      	str	r0, [r7, #20]
        break;
 8004ff0:	f000 bf08 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_EP_TB_1: /* 18 */

        elementSize = 7;
 8004ff4:	2307      	movs	r3, #7
 8004ff6:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7ff f9cc 	bl	8004396 <CS101_ASDU_isSequence>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d028      	beq.n	8005056 <CS101_ASDU_getElementEx+0xc5a>
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipment_getFromBuffer((PackedStartEventsOfProtectionEquipment) io, self->parameters,
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68dc      	ldr	r4, [r3, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6939      	ldr	r1, [r7, #16]
 800501a:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipment_getFromBuffer((PackedStartEventsOfProtectionEquipment) io, self->parameters,
 800501e:	4413      	add	r3, r2
 8005020:	2201      	movs	r2, #1
 8005022:	9201      	str	r2, [sp, #4]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	462b      	mov	r3, r5
 8005028:	4622      	mov	r2, r4
 800502a:	4601      	mov	r1, r0
 800502c:	68b8      	ldr	r0, [r7, #8]
 800502e:	f003 fdb2 	bl	8008b96 <PackedStartEventsOfProtectionEquipment_getFromBuffer>
 8005032:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	4619      	mov	r1, r3
 8005040:	f001 f987 	bl	8006352 <InformationObject_ParseObjectAddress>
 8005044:	4602      	mov	r2, r0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	4619      	mov	r1, r3
 800504c:	6978      	ldr	r0, [r7, #20]
 800504e:	f001 f92e 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipment_getFromBuffer((PackedStartEventsOfProtectionEquipment) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8005052:	f000 bed7 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipment_getFromBuffer((PackedStartEventsOfProtectionEquipment) io, self->parameters,
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68d8      	ldr	r0, [r3, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4413      	add	r3, r2
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipment_getFromBuffer((PackedStartEventsOfProtectionEquipment) io, self->parameters,
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	2200      	movs	r2, #0
 8005074:	9201      	str	r2, [sp, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	4623      	mov	r3, r4
 800507a:	4602      	mov	r2, r0
 800507c:	68b8      	ldr	r0, [r7, #8]
 800507e:	f003 fd8a 	bl	8008b96 <PackedStartEventsOfProtectionEquipment_getFromBuffer>
 8005082:	6178      	str	r0, [r7, #20]
        break;
 8005084:	f000 bebe 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_EP_TC_1: /* 19 */

        elementSize = 7;
 8005088:	2307      	movs	r3, #7
 800508a:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff f982 	bl	8004396 <CS101_ASDU_isSequence>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d028      	beq.n	80050ea <CS101_ASDU_getElementEx+0xcee>
            retVal  = (InformationObject) PackedOutputCircuitInfo_getFromBuffer((PackedOutputCircuitInfo) io, self->parameters,
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68dc      	ldr	r4, [r3, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6939      	ldr	r1, [r7, #16]
 80050ae:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) PackedOutputCircuitInfo_getFromBuffer((PackedOutputCircuitInfo) io, self->parameters,
 80050b2:	4413      	add	r3, r2
 80050b4:	2201      	movs	r2, #1
 80050b6:	9201      	str	r2, [sp, #4]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	462b      	mov	r3, r5
 80050bc:	4622      	mov	r2, r4
 80050be:	4601      	mov	r1, r0
 80050c0:	68b8      	ldr	r0, [r7, #8]
 80050c2:	f003 fee8 	bl	8008e96 <PackedOutputCircuitInfo_getFromBuffer>
 80050c6:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	4619      	mov	r1, r3
 80050d4:	f001 f93d 	bl	8006352 <InformationObject_ParseObjectAddress>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	6978      	ldr	r0, [r7, #20]
 80050e2:	f001 f8e4 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) PackedOutputCircuitInfo_getFromBuffer((PackedOutputCircuitInfo) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 80050e6:	f000 be8d 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) PackedOutputCircuitInfo_getFromBuffer((PackedOutputCircuitInfo) io, self->parameters,
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6819      	ldr	r1, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68d8      	ldr	r0, [r3, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4413      	add	r3, r2
            retVal  = (InformationObject) PackedOutputCircuitInfo_getFromBuffer((PackedOutputCircuitInfo) io, self->parameters,
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	2200      	movs	r2, #0
 8005108:	9201      	str	r2, [sp, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	4623      	mov	r3, r4
 800510e:	4602      	mov	r2, r0
 8005110:	68b8      	ldr	r0, [r7, #8]
 8005112:	f003 fec0 	bl	8008e96 <PackedOutputCircuitInfo_getFromBuffer>
 8005116:	6178      	str	r0, [r7, #20]
        break;
 8005118:	f000 be74 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_PS_NA_1: /* 20 */

        elementSize = 5;
 800511c:	2305      	movs	r3, #5
 800511e:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff f938 	bl	8004396 <CS101_ASDU_isSequence>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d028      	beq.n	800517e <CS101_ASDU_getElementEx+0xd82>
            retVal  = (InformationObject) PackedSinglePointWithSCD_getFromBuffer((PackedSinglePointWithSCD) io, self->parameters,
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68dc      	ldr	r4, [r3, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6939      	ldr	r1, [r7, #16]
 8005142:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) PackedSinglePointWithSCD_getFromBuffer((PackedSinglePointWithSCD) io, self->parameters,
 8005146:	4413      	add	r3, r2
 8005148:	2201      	movs	r2, #1
 800514a:	9201      	str	r2, [sp, #4]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	462b      	mov	r3, r5
 8005150:	4622      	mov	r2, r4
 8005152:	4601      	mov	r1, r0
 8005154:	68b8      	ldr	r0, [r7, #8]
 8005156:	f004 f812 	bl	800917e <PackedSinglePointWithSCD_getFromBuffer>
 800515a:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	4619      	mov	r1, r3
 8005168:	f001 f8f3 	bl	8006352 <InformationObject_ParseObjectAddress>
 800516c:	4602      	mov	r2, r0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	4619      	mov	r1, r3
 8005174:	6978      	ldr	r0, [r7, #20]
 8005176:	f001 f89a 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) PackedSinglePointWithSCD_getFromBuffer((PackedSinglePointWithSCD) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 800517a:	f000 be43 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) PackedSinglePointWithSCD_getFromBuffer((PackedSinglePointWithSCD) io, self->parameters,
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6819      	ldr	r1, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68d8      	ldr	r0, [r3, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
            retVal  = (InformationObject) PackedSinglePointWithSCD_getFromBuffer((PackedSinglePointWithSCD) io, self->parameters,
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	2200      	movs	r2, #0
 800519c:	9201      	str	r2, [sp, #4]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4623      	mov	r3, r4
 80051a2:	4602      	mov	r2, r0
 80051a4:	68b8      	ldr	r0, [r7, #8]
 80051a6:	f003 ffea 	bl	800917e <PackedSinglePointWithSCD_getFromBuffer>
 80051aa:	6178      	str	r0, [r7, #20]
        break;
 80051ac:	f000 be2a 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_ND_1: /* 21 */

        elementSize = 2;
 80051b0:	2302      	movs	r3, #2
 80051b2:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff f8ee 	bl	8004396 <CS101_ASDU_isSequence>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d028      	beq.n	8005212 <CS101_ASDU_getElementEx+0xe16>
            retVal  = (InformationObject) MeasuredValueNormalizedWithoutQuality_getFromBuffer((MeasuredValueNormalizedWithoutQuality) io, self->parameters,
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68dc      	ldr	r4, [r3, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6939      	ldr	r1, [r7, #16]
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueNormalizedWithoutQuality_getFromBuffer((MeasuredValueNormalizedWithoutQuality) io, self->parameters,
 80051da:	4413      	add	r3, r2
 80051dc:	2201      	movs	r2, #1
 80051de:	9201      	str	r2, [sp, #4]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	462b      	mov	r3, r5
 80051e4:	4622      	mov	r2, r4
 80051e6:	4601      	mov	r1, r0
 80051e8:	68b8      	ldr	r0, [r7, #8]
 80051ea:	f002 fb04 	bl	80077f6 <MeasuredValueNormalizedWithoutQuality_getFromBuffer>
 80051ee:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	4619      	mov	r1, r3
 80051fc:	f001 f8a9 	bl	8006352 <InformationObject_ParseObjectAddress>
 8005200:	4602      	mov	r2, r0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6978      	ldr	r0, [r7, #20]
 800520a:	f001 f850 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueNormalizedWithoutQuality_getFromBuffer((MeasuredValueNormalizedWithoutQuality) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 800520e:	f000 bdf9 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueNormalizedWithoutQuality_getFromBuffer((MeasuredValueNormalizedWithoutQuality) io, self->parameters,
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68d8      	ldr	r0, [r3, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueNormalizedWithoutQuality_getFromBuffer((MeasuredValueNormalizedWithoutQuality) io, self->parameters,
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	2200      	movs	r2, #0
 8005230:	9201      	str	r2, [sp, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	4623      	mov	r3, r4
 8005236:	4602      	mov	r2, r0
 8005238:	68b8      	ldr	r0, [r7, #8]
 800523a:	f002 fadc 	bl	80077f6 <MeasuredValueNormalizedWithoutQuality_getFromBuffer>
 800523e:	6178      	str	r0, [r7, #20]
        break;
 8005240:	f000 bde0 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_SP_TB_1: /* 30 */

        elementSize = 8;
 8005244:	2308      	movs	r3, #8
 8005246:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff f8a4 	bl	8004396 <CS101_ASDU_isSequence>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d028      	beq.n	80052a6 <CS101_ASDU_getElementEx+0xeaa>
            retVal  = (InformationObject) SinglePointWithCP56Time2a_getFromBuffer((SinglePointWithCP56Time2a) io, self->parameters,
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	68dc      	ldr	r4, [r3, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6939      	ldr	r1, [r7, #16]
 800526a:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) SinglePointWithCP56Time2a_getFromBuffer((SinglePointWithCP56Time2a) io, self->parameters,
 800526e:	4413      	add	r3, r2
 8005270:	2201      	movs	r2, #1
 8005272:	9201      	str	r2, [sp, #4]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	462b      	mov	r3, r5
 8005278:	4622      	mov	r2, r4
 800527a:	4601      	mov	r1, r0
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f001 fe74 	bl	8006f6a <SinglePointWithCP56Time2a_getFromBuffer>
 8005282:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	4619      	mov	r1, r3
 8005290:	f001 f85f 	bl	8006352 <InformationObject_ParseObjectAddress>
 8005294:	4602      	mov	r2, r0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	4619      	mov	r1, r3
 800529c:	6978      	ldr	r0, [r7, #20]
 800529e:	f001 f806 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) SinglePointWithCP56Time2a_getFromBuffer((SinglePointWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 80052a2:	f000 bdaf 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) SinglePointWithCP56Time2a_getFromBuffer((SinglePointWithCP56Time2a) io, self->parameters,
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6819      	ldr	r1, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68d8      	ldr	r0, [r3, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
            retVal  = (InformationObject) SinglePointWithCP56Time2a_getFromBuffer((SinglePointWithCP56Time2a) io, self->parameters,
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	2200      	movs	r2, #0
 80052c4:	9201      	str	r2, [sp, #4]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	4623      	mov	r3, r4
 80052ca:	4602      	mov	r2, r0
 80052cc:	68b8      	ldr	r0, [r7, #8]
 80052ce:	f001 fe4c 	bl	8006f6a <SinglePointWithCP56Time2a_getFromBuffer>
 80052d2:	6178      	str	r0, [r7, #20]
        break;
 80052d4:	f000 bd96 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_DP_TB_1: /* 31 */

        elementSize = 8;
 80052d8:	2308      	movs	r3, #8
 80052da:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff f85a 	bl	8004396 <CS101_ASDU_isSequence>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d028      	beq.n	800533a <CS101_ASDU_getElementEx+0xf3e>
            retVal  = (InformationObject) DoublePointWithCP56Time2a_getFromBuffer((DoublePointWithCP56Time2a) io, self->parameters,
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68dc      	ldr	r4, [r3, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6939      	ldr	r1, [r7, #16]
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) DoublePointWithCP56Time2a_getFromBuffer((DoublePointWithCP56Time2a) io, self->parameters,
 8005302:	4413      	add	r3, r2
 8005304:	2201      	movs	r2, #1
 8005306:	9201      	str	r2, [sp, #4]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	462b      	mov	r3, r5
 800530c:	4622      	mov	r2, r4
 800530e:	4601      	mov	r1, r0
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	f001 fcbb 	bl	8006c8c <DoublePointWithCP56Time2a_getFromBuffer>
 8005316:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	4619      	mov	r1, r3
 8005324:	f001 f815 	bl	8006352 <InformationObject_ParseObjectAddress>
 8005328:	4602      	mov	r2, r0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	4619      	mov	r1, r3
 8005330:	6978      	ldr	r0, [r7, #20]
 8005332:	f000 ffbc 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) DoublePointWithCP56Time2a_getFromBuffer((DoublePointWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8005336:	f000 bd65 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) DoublePointWithCP56Time2a_getFromBuffer((DoublePointWithCP56Time2a) io, self->parameters,
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6819      	ldr	r1, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68d8      	ldr	r0, [r3, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
            retVal  = (InformationObject) DoublePointWithCP56Time2a_getFromBuffer((DoublePointWithCP56Time2a) io, self->parameters,
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	2200      	movs	r2, #0
 8005358:	9201      	str	r2, [sp, #4]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4623      	mov	r3, r4
 800535e:	4602      	mov	r2, r0
 8005360:	68b8      	ldr	r0, [r7, #8]
 8005362:	f001 fc93 	bl	8006c8c <DoublePointWithCP56Time2a_getFromBuffer>
 8005366:	6178      	str	r0, [r7, #20]
        break;
 8005368:	f000 bd4c 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ST_TB_1: /* 32 */

        elementSize = 9;
 800536c:	2309      	movs	r3, #9
 800536e:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff f810 	bl	8004396 <CS101_ASDU_isSequence>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d028      	beq.n	80053ce <CS101_ASDU_getElementEx+0xfd2>
            retVal  = (InformationObject) StepPositionWithCP56Time2a_getFromBuffer((StepPositionWithCP56Time2a) io, self->parameters,
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68dc      	ldr	r4, [r3, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6939      	ldr	r1, [r7, #16]
 8005392:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) StepPositionWithCP56Time2a_getFromBuffer((StepPositionWithCP56Time2a) io, self->parameters,
 8005396:	4413      	add	r3, r2
 8005398:	2201      	movs	r2, #1
 800539a:	9201      	str	r2, [sp, #4]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	462b      	mov	r3, r5
 80053a0:	4622      	mov	r2, r4
 80053a2:	4601      	mov	r1, r0
 80053a4:	68b8      	ldr	r0, [r7, #8]
 80053a6:	f001 f9b8 	bl	800671a <StepPositionWithCP56Time2a_getFromBuffer>
 80053aa:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	4619      	mov	r1, r3
 80053b8:	f000 ffcb 	bl	8006352 <InformationObject_ParseObjectAddress>
 80053bc:	4602      	mov	r2, r0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	6978      	ldr	r0, [r7, #20]
 80053c6:	f000 ff72 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) StepPositionWithCP56Time2a_getFromBuffer((StepPositionWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 80053ca:	f000 bd1b 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) StepPositionWithCP56Time2a_getFromBuffer((StepPositionWithCP56Time2a) io, self->parameters,
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6819      	ldr	r1, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68d8      	ldr	r0, [r3, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
            retVal  = (InformationObject) StepPositionWithCP56Time2a_getFromBuffer((StepPositionWithCP56Time2a) io, self->parameters,
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	2200      	movs	r2, #0
 80053ec:	9201      	str	r2, [sp, #4]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	4623      	mov	r3, r4
 80053f2:	4602      	mov	r2, r0
 80053f4:	68b8      	ldr	r0, [r7, #8]
 80053f6:	f001 f990 	bl	800671a <StepPositionWithCP56Time2a_getFromBuffer>
 80053fa:	6178      	str	r0, [r7, #20]
        break;
 80053fc:	f000 bd02 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_BO_TB_1: /* 33 */

        elementSize = 12;
 8005400:	230c      	movs	r3, #12
 8005402:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7fe ffc6 	bl	8004396 <CS101_ASDU_isSequence>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d028      	beq.n	8005462 <CS101_ASDU_getElementEx+0x1066>
            retVal  = (InformationObject) Bitstring32WithCP56Time2a_getFromBuffer((Bitstring32WithCP56Time2a) io, self->parameters,
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68dc      	ldr	r4, [r3, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6939      	ldr	r1, [r7, #16]
 8005426:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) Bitstring32WithCP56Time2a_getFromBuffer((Bitstring32WithCP56Time2a) io, self->parameters,
 800542a:	4413      	add	r3, r2
 800542c:	2201      	movs	r2, #1
 800542e:	9201      	str	r2, [sp, #4]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462b      	mov	r3, r5
 8005434:	4622      	mov	r2, r4
 8005436:	4601      	mov	r1, r0
 8005438:	68b8      	ldr	r0, [r7, #8]
 800543a:	f002 f828 	bl	800748e <Bitstring32WithCP56Time2a_getFromBuffer>
 800543e:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	4619      	mov	r1, r3
 800544c:	f000 ff81 	bl	8006352 <InformationObject_ParseObjectAddress>
 8005450:	4602      	mov	r2, r0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	4619      	mov	r1, r3
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f000 ff28 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) Bitstring32WithCP56Time2a_getFromBuffer((Bitstring32WithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 800545e:	f000 bcd1 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) Bitstring32WithCP56Time2a_getFromBuffer((Bitstring32WithCP56Time2a) io, self->parameters,
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68d8      	ldr	r0, [r3, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4413      	add	r3, r2
            retVal  = (InformationObject) Bitstring32WithCP56Time2a_getFromBuffer((Bitstring32WithCP56Time2a) io, self->parameters,
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	2200      	movs	r2, #0
 8005480:	9201      	str	r2, [sp, #4]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4623      	mov	r3, r4
 8005486:	4602      	mov	r2, r0
 8005488:	68b8      	ldr	r0, [r7, #8]
 800548a:	f002 f800 	bl	800748e <Bitstring32WithCP56Time2a_getFromBuffer>
 800548e:	6178      	str	r0, [r7, #20]
        break;
 8005490:	f000 bcb8 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_TD_1: /* 34 */

        elementSize = 10;
 8005494:	230a      	movs	r3, #10
 8005496:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7fe ff7c 	bl	8004396 <CS101_ASDU_isSequence>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d028      	beq.n	80054f6 <CS101_ASDU_getElementEx+0x10fa>
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP56Time2a_getFromBuffer((MeasuredValueNormalizedWithCP56Time2a) io, self->parameters,
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68dc      	ldr	r4, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6939      	ldr	r1, [r7, #16]
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP56Time2a_getFromBuffer((MeasuredValueNormalizedWithCP56Time2a) io, self->parameters,
 80054be:	4413      	add	r3, r2
 80054c0:	2201      	movs	r2, #1
 80054c2:	9201      	str	r2, [sp, #4]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	462b      	mov	r3, r5
 80054c8:	4622      	mov	r2, r4
 80054ca:	4601      	mov	r1, r0
 80054cc:	68b8      	ldr	r0, [r7, #8]
 80054ce:	f002 fad8 	bl	8007a82 <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer>
 80054d2:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	4619      	mov	r1, r3
 80054e0:	f000 ff37 	bl	8006352 <InformationObject_ParseObjectAddress>
 80054e4:	4602      	mov	r2, r0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4413      	add	r3, r2
 80054ea:	4619      	mov	r1, r3
 80054ec:	6978      	ldr	r0, [r7, #20]
 80054ee:	f000 fede 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP56Time2a_getFromBuffer((MeasuredValueNormalizedWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 80054f2:	f000 bc87 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP56Time2a_getFromBuffer((MeasuredValueNormalizedWithCP56Time2a) io, self->parameters,
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68d8      	ldr	r0, [r3, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueNormalizedWithCP56Time2a_getFromBuffer((MeasuredValueNormalizedWithCP56Time2a) io, self->parameters,
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	2200      	movs	r2, #0
 8005514:	9201      	str	r2, [sp, #4]
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	4623      	mov	r3, r4
 800551a:	4602      	mov	r2, r0
 800551c:	68b8      	ldr	r0, [r7, #8]
 800551e:	f002 fab0 	bl	8007a82 <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer>
 8005522:	6178      	str	r0, [r7, #20]
        break;
 8005524:	f000 bc6e 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_TE_1: /* 35 */

        elementSize = 10;
 8005528:	230a      	movs	r3, #10
 800552a:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7fe ff32 	bl	8004396 <CS101_ASDU_isSequence>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d028      	beq.n	800558a <CS101_ASDU_getElementEx+0x118e>
            retVal  = (InformationObject) MeasuredValueScaledWithCP56Time2a_getFromBuffer((MeasuredValueScaledWithCP56Time2a) io, self->parameters,
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68dc      	ldr	r4, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6939      	ldr	r1, [r7, #16]
 800554e:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueScaledWithCP56Time2a_getFromBuffer((MeasuredValueScaledWithCP56Time2a) io, self->parameters,
 8005552:	4413      	add	r3, r2
 8005554:	2201      	movs	r2, #1
 8005556:	9201      	str	r2, [sp, #4]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	462b      	mov	r3, r5
 800555c:	4622      	mov	r2, r4
 800555e:	4601      	mov	r1, r0
 8005560:	68b8      	ldr	r0, [r7, #8]
 8005562:	f002 fc8e 	bl	8007e82 <MeasuredValueScaledWithCP56Time2a_getFromBuffer>
 8005566:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	4619      	mov	r1, r3
 8005574:	f000 feed 	bl	8006352 <InformationObject_ParseObjectAddress>
 8005578:	4602      	mov	r2, r0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	4619      	mov	r1, r3
 8005580:	6978      	ldr	r0, [r7, #20]
 8005582:	f000 fe94 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueScaledWithCP56Time2a_getFromBuffer((MeasuredValueScaledWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8005586:	f000 bc3d 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueScaledWithCP56Time2a_getFromBuffer((MeasuredValueScaledWithCP56Time2a) io, self->parameters,
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68d8      	ldr	r0, [r3, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueScaledWithCP56Time2a_getFromBuffer((MeasuredValueScaledWithCP56Time2a) io, self->parameters,
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	2200      	movs	r2, #0
 80055a8:	9201      	str	r2, [sp, #4]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	4623      	mov	r3, r4
 80055ae:	4602      	mov	r2, r0
 80055b0:	68b8      	ldr	r0, [r7, #8]
 80055b2:	f002 fc66 	bl	8007e82 <MeasuredValueScaledWithCP56Time2a_getFromBuffer>
 80055b6:	6178      	str	r0, [r7, #20]
        break;
 80055b8:	f000 bc24 	b.w	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_ME_TF_1: /* 36 */

        elementSize = 12;
 80055bc:	230c      	movs	r3, #12
 80055be:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7fe fee8 	bl	8004396 <CS101_ASDU_isSequence>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d027      	beq.n	800561c <CS101_ASDU_getElementEx+0x1220>
            retVal  = (InformationObject) MeasuredValueShortWithCP56Time2a_getFromBuffer((MeasuredValueShortWithCP56Time2a) io, self->parameters,
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68dc      	ldr	r4, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6939      	ldr	r1, [r7, #16]
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) MeasuredValueShortWithCP56Time2a_getFromBuffer((MeasuredValueShortWithCP56Time2a) io, self->parameters,
 80055e6:	4413      	add	r3, r2
 80055e8:	2201      	movs	r2, #1
 80055ea:	9201      	str	r2, [sp, #4]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	462b      	mov	r3, r5
 80055f0:	4622      	mov	r2, r4
 80055f2:	4601      	mov	r1, r0
 80055f4:	68b8      	ldr	r0, [r7, #8]
 80055f6:	f002 fea2 	bl	800833e <MeasuredValueShortWithCP56Time2a_getFromBuffer>
 80055fa:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	4619      	mov	r1, r3
 8005608:	f000 fea3 	bl	8006352 <InformationObject_ParseObjectAddress>
 800560c:	4602      	mov	r2, r0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	4619      	mov	r1, r3
 8005614:	6978      	ldr	r0, [r7, #20]
 8005616:	f000 fe4a 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) MeasuredValueShortWithCP56Time2a_getFromBuffer((MeasuredValueShortWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 800561a:	e3f3      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) MeasuredValueShortWithCP56Time2a_getFromBuffer((MeasuredValueShortWithCP56Time2a) io, self->parameters,
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	68d8      	ldr	r0, [r3, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
            retVal  = (InformationObject) MeasuredValueShortWithCP56Time2a_getFromBuffer((MeasuredValueShortWithCP56Time2a) io, self->parameters,
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	2200      	movs	r2, #0
 800563a:	9201      	str	r2, [sp, #4]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4623      	mov	r3, r4
 8005640:	4602      	mov	r2, r0
 8005642:	68b8      	ldr	r0, [r7, #8]
 8005644:	f002 fe7b 	bl	800833e <MeasuredValueShortWithCP56Time2a_getFromBuffer>
 8005648:	6178      	str	r0, [r7, #20]
        break;
 800564a:	e3db      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_IT_TB_1: /* 37 */

        elementSize = 12;
 800564c:	230c      	movs	r3, #12
 800564e:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7fe fea0 	bl	8004396 <CS101_ASDU_isSequence>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d027      	beq.n	80056ac <CS101_ASDU_getElementEx+0x12b0>
            retVal  = (InformationObject) IntegratedTotalsWithCP56Time2a_getFromBuffer((IntegratedTotalsWithCP56Time2a) io, self->parameters,
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68dc      	ldr	r4, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6939      	ldr	r1, [r7, #16]
 8005672:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) IntegratedTotalsWithCP56Time2a_getFromBuffer((IntegratedTotalsWithCP56Time2a) io, self->parameters,
 8005676:	4413      	add	r3, r2
 8005678:	2201      	movs	r2, #1
 800567a:	9201      	str	r2, [sp, #4]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	462b      	mov	r3, r5
 8005680:	4622      	mov	r2, r4
 8005682:	4601      	mov	r1, r0
 8005684:	68b8      	ldr	r0, [r7, #8]
 8005686:	f003 f866 	bl	8008756 <IntegratedTotalsWithCP56Time2a_getFromBuffer>
 800568a:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	4619      	mov	r1, r3
 8005698:	f000 fe5b 	bl	8006352 <InformationObject_ParseObjectAddress>
 800569c:	4602      	mov	r2, r0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	4619      	mov	r1, r3
 80056a4:	6978      	ldr	r0, [r7, #20]
 80056a6:	f000 fe02 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) IntegratedTotalsWithCP56Time2a_getFromBuffer((IntegratedTotalsWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 80056aa:	e3ab      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) IntegratedTotalsWithCP56Time2a_getFromBuffer((IntegratedTotalsWithCP56Time2a) io, self->parameters,
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68d8      	ldr	r0, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4413      	add	r3, r2
            retVal  = (InformationObject) IntegratedTotalsWithCP56Time2a_getFromBuffer((IntegratedTotalsWithCP56Time2a) io, self->parameters,
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	2200      	movs	r2, #0
 80056ca:	9201      	str	r2, [sp, #4]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	4623      	mov	r3, r4
 80056d0:	4602      	mov	r2, r0
 80056d2:	68b8      	ldr	r0, [r7, #8]
 80056d4:	f003 f83f 	bl	8008756 <IntegratedTotalsWithCP56Time2a_getFromBuffer>
 80056d8:	6178      	str	r0, [r7, #20]
        break;
 80056da:	e393      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_EP_TD_1: /* 38 */

        elementSize = 10;
 80056dc:	230a      	movs	r3, #10
 80056de:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7fe fe58 	bl	8004396 <CS101_ASDU_isSequence>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d027      	beq.n	800573c <CS101_ASDU_getElementEx+0x1340>
            retVal  = (InformationObject) EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer((EventOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68dc      	ldr	r4, [r3, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6939      	ldr	r1, [r7, #16]
 8005702:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer((EventOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
 8005706:	4413      	add	r3, r2
 8005708:	2201      	movs	r2, #1
 800570a:	9201      	str	r2, [sp, #4]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	462b      	mov	r3, r5
 8005710:	4622      	mov	r2, r4
 8005712:	4601      	mov	r1, r0
 8005714:	68b8      	ldr	r0, [r7, #8]
 8005716:	f003 f986 	bl	8008a26 <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer>
 800571a:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	4619      	mov	r1, r3
 8005728:	f000 fe13 	bl	8006352 <InformationObject_ParseObjectAddress>
 800572c:	4602      	mov	r2, r0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	4619      	mov	r1, r3
 8005734:	6978      	ldr	r0, [r7, #20]
 8005736:	f000 fdba 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer((EventOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 800573a:	e363      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer((EventOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68d8      	ldr	r0, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4413      	add	r3, r2
            retVal  = (InformationObject) EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer((EventOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	2200      	movs	r2, #0
 800575a:	9201      	str	r2, [sp, #4]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	4623      	mov	r3, r4
 8005760:	4602      	mov	r2, r0
 8005762:	68b8      	ldr	r0, [r7, #8]
 8005764:	f003 f95f 	bl	8008a26 <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer>
 8005768:	6178      	str	r0, [r7, #20]
        break;
 800576a:	e34b      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_EP_TE_1: /* 39 */

        elementSize = 11;
 800576c:	230b      	movs	r3, #11
 800576e:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7fe fe10 	bl	8004396 <CS101_ASDU_isSequence>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d027      	beq.n	80057cc <CS101_ASDU_getElementEx+0x13d0>
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer((PackedStartEventsOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68dc      	ldr	r4, [r3, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6939      	ldr	r1, [r7, #16]
 8005792:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer((PackedStartEventsOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
 8005796:	4413      	add	r3, r2
 8005798:	2201      	movs	r2, #1
 800579a:	9201      	str	r2, [sp, #4]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	462b      	mov	r3, r5
 80057a0:	4622      	mov	r2, r4
 80057a2:	4601      	mov	r1, r0
 80057a4:	68b8      	ldr	r0, [r7, #8]
 80057a6:	f003 fab6 	bl	8008d16 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer>
 80057aa:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	4619      	mov	r1, r3
 80057b8:	f000 fdcb 	bl	8006352 <InformationObject_ParseObjectAddress>
 80057bc:	4602      	mov	r2, r0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	6978      	ldr	r0, [r7, #20]
 80057c6:	f000 fd72 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer((PackedStartEventsOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 80057ca:	e31b      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer((PackedStartEventsOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68d8      	ldr	r0, [r3, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4413      	add	r3, r2
            retVal  = (InformationObject) PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer((PackedStartEventsOfProtectionEquipmentWithCP56Time2a) io, self->parameters,
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
 80057e8:	2200      	movs	r2, #0
 80057ea:	9201      	str	r2, [sp, #4]
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	4623      	mov	r3, r4
 80057f0:	4602      	mov	r2, r0
 80057f2:	68b8      	ldr	r0, [r7, #8]
 80057f4:	f003 fa8f 	bl	8008d16 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer>
 80057f8:	6178      	str	r0, [r7, #20]
        break;
 80057fa:	e303      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_EP_TF_1: /* 40 */

        elementSize = 11;
 80057fc:	230b      	movs	r3, #11
 80057fe:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7fe fdc8 	bl	8004396 <CS101_ASDU_isSequence>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d027      	beq.n	800585c <CS101_ASDU_getElementEx+0x1460>
            retVal  = (InformationObject) PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer((PackedOutputCircuitInfoWithCP56Time2a) io, self->parameters,
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68dc      	ldr	r4, [r3, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6939      	ldr	r1, [r7, #16]
 8005822:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer((PackedOutputCircuitInfoWithCP56Time2a) io, self->parameters,
 8005826:	4413      	add	r3, r2
 8005828:	2201      	movs	r2, #1
 800582a:	9201      	str	r2, [sp, #4]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	462b      	mov	r3, r5
 8005830:	4622      	mov	r2, r4
 8005832:	4601      	mov	r1, r0
 8005834:	68b8      	ldr	r0, [r7, #8]
 8005836:	f003 fbee 	bl	8009016 <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer>
 800583a:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	4619      	mov	r1, r3
 8005848:	f000 fd83 	bl	8006352 <InformationObject_ParseObjectAddress>
 800584c:	4602      	mov	r2, r0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	4619      	mov	r1, r3
 8005854:	6978      	ldr	r0, [r7, #20]
 8005856:	f000 fd2a 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer((PackedOutputCircuitInfoWithCP56Time2a) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 800585a:	e2d3      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer((PackedOutputCircuitInfoWithCP56Time2a) io, self->parameters,
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6819      	ldr	r1, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68d8      	ldr	r0, [r3, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4413      	add	r3, r2
            retVal  = (InformationObject) PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer((PackedOutputCircuitInfoWithCP56Time2a) io, self->parameters,
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	fb02 f303 	mul.w	r3, r2, r3
 8005878:	2200      	movs	r2, #0
 800587a:	9201      	str	r2, [sp, #4]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	4623      	mov	r3, r4
 8005880:	4602      	mov	r2, r0
 8005882:	68b8      	ldr	r0, [r7, #8]
 8005884:	f003 fbc7 	bl	8009016 <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer>
 8005888:	6178      	str	r0, [r7, #20]
        break;
 800588a:	e2bb      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    /* 41 - 44 reserved */

    case C_SC_NA_1: /* 45 */

        elementSize = self->parameters->sizeOfIOA + 1;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	3301      	adds	r3, #1
 8005894:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) SingleCommand_getFromBuffer((SingleCommand) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68d8      	ldr	r0, [r3, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691c      	ldr	r4, [r3, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	4623      	mov	r3, r4
 80058ae:	4602      	mov	r2, r0
 80058b0:	68b8      	ldr	r0, [r7, #8]
 80058b2:	f003 fd4e 	bl	8009352 <SingleCommand_getFromBuffer>
 80058b6:	6178      	str	r0, [r7, #20]

        break;
 80058b8:	e2a4      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>


    case C_DC_NA_1: /* 46 */

        elementSize = self->parameters->sizeOfIOA + 1;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	3301      	adds	r3, #1
 80058c2:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) DoubleCommand_getFromBuffer((DoubleCommand) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6819      	ldr	r1, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68d8      	ldr	r0, [r3, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	691c      	ldr	r4, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4623      	mov	r3, r4
 80058dc:	4602      	mov	r2, r0
 80058de:	68b8      	ldr	r0, [r7, #8]
 80058e0:	f003 fe3d 	bl	800955e <DoubleCommand_getFromBuffer>
 80058e4:	6178      	str	r0, [r7, #20]

        break;
 80058e6:	e28d      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_RC_NA_1: /* 47 */

        elementSize = self->parameters->sizeOfIOA + 1;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	3301      	adds	r3, #1
 80058f0:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) StepCommand_getFromBuffer((StepCommand) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6819      	ldr	r1, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68d8      	ldr	r0, [r3, #12]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	691c      	ldr	r4, [r3, #16]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	fb02 f303 	mul.w	r3, r2, r3
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	4623      	mov	r3, r4
 800590a:	4602      	mov	r2, r0
 800590c:	68b8      	ldr	r0, [r7, #8]
 800590e:	f003 ff2c 	bl	800976a <StepCommand_getFromBuffer>
 8005912:	6178      	str	r0, [r7, #20]

        break;
 8005914:	e276      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_SE_NA_1: /* 48 - Set-point command, normalized value */

        elementSize = self->parameters->sizeOfIOA + 3;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	3303      	adds	r3, #3
 800591e:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) SetpointCommandNormalized_getFromBuffer((SetpointCommandNormalized) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68d8      	ldr	r0, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691c      	ldr	r4, [r3, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	fb02 f303 	mul.w	r3, r2, r3
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	4623      	mov	r3, r4
 8005938:	4602      	mov	r2, r0
 800593a:	68b8      	ldr	r0, [r7, #8]
 800593c:	f004 f823 	bl	8009986 <SetpointCommandNormalized_getFromBuffer>
 8005940:	6178      	str	r0, [r7, #20]

        break;
 8005942:	e25f      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>


    case C_SE_NB_1: /* 49 - Set-point command, scaled value */

        elementSize = self->parameters->sizeOfIOA + 3;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	3303      	adds	r3, #3
 800594c:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) SetpointCommandScaled_getFromBuffer((SetpointCommandScaled) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68d8      	ldr	r0, [r3, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	691c      	ldr	r4, [r3, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4623      	mov	r3, r4
 8005966:	4602      	mov	r2, r0
 8005968:	68b8      	ldr	r0, [r7, #8]
 800596a:	f004 f93e 	bl	8009bea <SetpointCommandScaled_getFromBuffer>
 800596e:	6178      	str	r0, [r7, #20]

        break;
 8005970:	e248      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_SE_NC_1: /* 50 - Set-point command, short floating point number */

        elementSize = self->parameters->sizeOfIOA + 5;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	3305      	adds	r3, #5
 800597a:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) SetpointCommandShort_getFromBuffer((SetpointCommandShort) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68d8      	ldr	r0, [r3, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691c      	ldr	r4, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4623      	mov	r3, r4
 8005994:	4602      	mov	r2, r0
 8005996:	68b8      	ldr	r0, [r7, #8]
 8005998:	f004 fa59 	bl	8009e4e <SetpointCommandShort_getFromBuffer>
 800599c:	6178      	str	r0, [r7, #20]

        break;
 800599e:	e231      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_BO_NA_1: /* 51 - Bitstring command */

        elementSize = self->parameters->sizeOfIOA + 4;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	3304      	adds	r3, #4
 80059a8:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) Bitstring32Command_getFromBuffer((Bitstring32Command) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	68d8      	ldr	r0, [r3, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691c      	ldr	r4, [r3, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	4623      	mov	r3, r4
 80059c2:	4602      	mov	r2, r0
 80059c4:	68b8      	ldr	r0, [r7, #8]
 80059c6:	f004 fb9e 	bl	800a106 <Bitstring32Command_getFromBuffer>
 80059ca:	6178      	str	r0, [r7, #20]

        break;
 80059cc:	e21a      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    /* 52 - 57 reserved */

    case C_SC_TA_1: /* 58 - Single command with CP56Time2a */

        elementSize = self->parameters->sizeOfIOA + 8;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	3308      	adds	r3, #8
 80059d6:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) SingleCommandWithCP56Time2a_getFromBuffer((SingleCommandWithCP56Time2a) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6819      	ldr	r1, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68d8      	ldr	r0, [r3, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	691c      	ldr	r4, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	fb02 f303 	mul.w	r3, r2, r3
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	4623      	mov	r3, r4
 80059f0:	4602      	mov	r2, r0
 80059f2:	68b8      	ldr	r0, [r7, #8]
 80059f4:	f003 fd2b 	bl	800944e <SingleCommandWithCP56Time2a_getFromBuffer>
 80059f8:	6178      	str	r0, [r7, #20]

        break;
 80059fa:	e203      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_DC_TA_1: /* 59 - Double command with CP56Time2a */

        elementSize = self->parameters->sizeOfIOA + 8;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	3308      	adds	r3, #8
 8005a04:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) DoubleCommandWithCP56Time2a_getFromBuffer((DoubleCommandWithCP56Time2a) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	68d8      	ldr	r0, [r3, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691c      	ldr	r4, [r3, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4623      	mov	r3, r4
 8005a1e:	4602      	mov	r2, r0
 8005a20:	68b8      	ldr	r0, [r7, #8]
 8005a22:	f003 fe1a 	bl	800965a <DoubleCommandWithCP56Time2a_getFromBuffer>
 8005a26:	6178      	str	r0, [r7, #20]

        break;
 8005a28:	e1ec      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_RC_TA_1: /* 60 - Step command with CP56Time2a */

        elementSize = self->parameters->sizeOfIOA + 8;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	3308      	adds	r3, #8
 8005a32:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) StepCommandWithCP56Time2a_getFromBuffer((StepCommandWithCP56Time2a) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68d8      	ldr	r0, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691c      	ldr	r4, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	fb02 f303 	mul.w	r3, r2, r3
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	f003 ff09 	bl	8009866 <StepCommandWithCP56Time2a_getFromBuffer>
 8005a54:	6178      	str	r0, [r7, #20]

        break;
 8005a56:	e1d5      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_SE_TA_1: /* 61 - Setpoint command, normalized value with CP56Time2a */

        elementSize = self->parameters->sizeOfIOA + 10;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	330a      	adds	r3, #10
 8005a60:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) SetpointCommandNormalizedWithCP56Time2a_getFromBuffer((SetpointCommandNormalizedWithCP56Time2a) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68d8      	ldr	r0, [r3, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691c      	ldr	r4, [r3, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	4623      	mov	r3, r4
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68b8      	ldr	r0, [r7, #8]
 8005a7e:	f004 f812 	bl	8009aa6 <SetpointCommandNormalizedWithCP56Time2a_getFromBuffer>
 8005a82:	6178      	str	r0, [r7, #20]

        break;
 8005a84:	e1be      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_SE_TB_1: /* 62 - Setpoint command, scaled value with CP56Time2a */

        elementSize = self->parameters->sizeOfIOA + 10;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	330a      	adds	r3, #10
 8005a8e:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) SetpointCommandScaledWithCP56Time2a_getFromBuffer((SetpointCommandScaledWithCP56Time2a) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68d8      	ldr	r0, [r3, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	691c      	ldr	r4, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68b8      	ldr	r0, [r7, #8]
 8005aac:	f004 f92d 	bl	8009d0a <SetpointCommandScaledWithCP56Time2a_getFromBuffer>
 8005ab0:	6178      	str	r0, [r7, #20]

        break;
 8005ab2:	e1a7      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_SE_TC_1: /* 63 - Setpoint command, short value with CP56Time2a */

        elementSize = self->parameters->sizeOfIOA + 12;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	330c      	adds	r3, #12
 8005abc:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) SetpointCommandShortWithCP56Time2a_getFromBuffer((SetpointCommandShortWithCP56Time2a) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6819      	ldr	r1, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68d8      	ldr	r0, [r3, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691c      	ldr	r4, [r3, #16]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	4623      	mov	r3, r4
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68b8      	ldr	r0, [r7, #8]
 8005ada:	f004 fa60 	bl	8009f9e <SetpointCommandShortWithCP56Time2a_getFromBuffer>
 8005ade:	6178      	str	r0, [r7, #20]

        break;
 8005ae0:	e190      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_BO_TA_1: /* 64 - Bitstring command with CP56Time2a */

        elementSize = self->parameters->sizeOfIOA + 11;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	330b      	adds	r3, #11
 8005aea:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) Bitstring32CommandWithCP56Time2a_getFromBuffer((Bitstring32CommandWithCP56Time2a) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68d8      	ldr	r0, [r3, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	691c      	ldr	r4, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	fb02 f303 	mul.w	r3, r2, r3
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	4623      	mov	r3, r4
 8005b04:	4602      	mov	r2, r0
 8005b06:	68b8      	ldr	r0, [r7, #8]
 8005b08:	f004 fb9f 	bl	800a24a <Bitstring32CommandWithCP56Time2a_getFromBuffer>
 8005b0c:	6178      	str	r0, [r7, #20]

        break;
 8005b0e:	e179      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case M_EI_NA_1: /* 70 - End of Initialization */

        elementSize = self->parameters->sizeOfIOA + 1;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	3301      	adds	r3, #1
 8005b18:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) EndOfInitialization_getFromBuffer((EndOfInitialization) io, self->parameters, self->payload, self->payloadSize,  0);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2000      	movs	r0, #0
 8005b28:	9000      	str	r0, [sp, #0]
 8005b2a:	68b8      	ldr	r0, [r7, #8]
 8005b2c:	f005 f8e9 	bl	800ad02 <EndOfInitialization_getFromBuffer>
 8005b30:	6178      	str	r0, [r7, #20]

        break;
 8005b32:	e167      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_IC_NA_1: /* 100 - Interrogation command */

        retVal = (InformationObject) InterrogationCommand_getFromBuffer((InterrogationCommand) io, self->parameters, self->payload, self->payloadSize,  0);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6819      	ldr	r1, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2000      	movs	r0, #0
 8005b42:	9000      	str	r0, [sp, #0]
 8005b44:	68b8      	ldr	r0, [r7, #8]
 8005b46:	f004 fd33 	bl	800a5b0 <InterrogationCommand_getFromBuffer>
 8005b4a:	6178      	str	r0, [r7, #20]

        break;
 8005b4c:	e15a      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_CI_NA_1: /* 101 - Counter interrogation command */

        retVal = (InformationObject) CounterInterrogationCommand_getFromBuffer((CounterInterrogationCommand) io, self->parameters, self->payload, self->payloadSize,  0);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6819      	ldr	r1, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	9000      	str	r0, [sp, #0]
 8005b5e:	68b8      	ldr	r0, [r7, #8]
 8005b60:	f004 fda3 	bl	800a6aa <CounterInterrogationCommand_getFromBuffer>
 8005b64:	6178      	str	r0, [r7, #20]

        break;
 8005b66:	e14d      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_RD_NA_1: /* 102 - Read command */

        retVal = (InformationObject) ReadCommand_getFromBuffer((ReadCommand) io, self->parameters, self->payload, self->payloadSize,  0);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6819      	ldr	r1, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2000      	movs	r0, #0
 8005b76:	9000      	str	r0, [sp, #0]
 8005b78:	68b8      	ldr	r0, [r7, #8]
 8005b7a:	f004 fc08 	bl	800a38e <ReadCommand_getFromBuffer>
 8005b7e:	6178      	str	r0, [r7, #20]

        break;
 8005b80:	e140      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_CS_NA_1: /* 103 - Clock synchronization command */

        retVal = (InformationObject) ClockSynchronizationCommand_getFromBuffer((ClockSynchronizationCommand) io, self->parameters, self->payload, self->payloadSize,  0);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2000      	movs	r0, #0
 8005b90:	9000      	str	r0, [sp, #0]
 8005b92:	68b8      	ldr	r0, [r7, #8]
 8005b94:	f004 fc6d 	bl	800a472 <ClockSynchronizationCommand_getFromBuffer>
 8005b98:	6178      	str	r0, [r7, #20]

        break;
 8005b9a:	e133      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_TS_NA_1: /* 104 - Test command */

        retVal = (InformationObject) TestCommand_getFromBuffer((TestCommand) io, self->parameters, self->payload, self->payloadSize, 0);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2000      	movs	r0, #0
 8005baa:	9000      	str	r0, [sp, #0]
 8005bac:	68b8      	ldr	r0, [r7, #8]
 8005bae:	f004 fe00 	bl	800a7b2 <TestCommand_getFromBuffer>
 8005bb2:	6178      	str	r0, [r7, #20]

        break;
 8005bb4:	e126      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_RP_NA_1: /* 105 - Reset process command */

        retVal = (InformationObject) ResetProcessCommand_getFromBuffer((ResetProcessCommand) io, self->parameters, self->payload, self->payloadSize,  0);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6819      	ldr	r1, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	9000      	str	r0, [sp, #0]
 8005bc6:	68b8      	ldr	r0, [r7, #8]
 8005bc8:	f004 ff1d 	bl	800aa06 <ResetProcessCommand_getFromBuffer>
 8005bcc:	6178      	str	r0, [r7, #20]

        break;
 8005bce:	e119      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_CD_NA_1: /* 106 - Delay acquisition command */

        retVal = (InformationObject) DelayAcquisitionCommand_getFromBuffer((DelayAcquisitionCommand) io, self->parameters, self->payload, self->payloadSize,  0);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2000      	movs	r0, #0
 8005bde:	9000      	str	r0, [sp, #0]
 8005be0:	68b8      	ldr	r0, [r7, #8]
 8005be2:	f004 ff8e 	bl	800ab02 <DelayAcquisitionCommand_getFromBuffer>
 8005be6:	6178      	str	r0, [r7, #20]

        break;
 8005be8:	e10c      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case C_TS_TA_1: /* 107 - Test command with time */

        retVal = (InformationObject) TestCommandWithCP56Time2a_getFromBuffer((TestCommandWithCP56Time2a) io, self->parameters, self->payload, self->payloadSize, 0);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6819      	ldr	r1, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	9000      	str	r0, [sp, #0]
 8005bfa:	68b8      	ldr	r0, [r7, #8]
 8005bfc:	f004 fe6d 	bl	800a8da <TestCommandWithCP56Time2a_getFromBuffer>
 8005c00:	6178      	str	r0, [r7, #20]

        break;
 8005c02:	e0ff      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case P_ME_NA_1: /* 110 - Parameter of measured values, normalized value */

        elementSize = self->parameters->sizeOfIOA + 3;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	3303      	adds	r3, #3
 8005c0c:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) ParameterNormalizedValue_getFromBuffer((ParameterNormalizedValue) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68d8      	ldr	r0, [r3, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	691c      	ldr	r4, [r3, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4623      	mov	r3, r4
 8005c26:	4602      	mov	r2, r0
 8005c28:	68b8      	ldr	r0, [r7, #8]
 8005c2a:	f001 fd79 	bl	8007720 <ParameterNormalizedValue_getFromBuffer>
 8005c2e:	6178      	str	r0, [r7, #20]

        break;
 8005c30:	e0e8      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case P_ME_NB_1: /* 111 - Parameter of measured values, scaled value */

        elementSize = self->parameters->sizeOfIOA + 3;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	3303      	adds	r3, #3
 8005c3a:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) ParameterScaledValue_getFromBuffer((ParameterScaledValue) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68d8      	ldr	r0, [r3, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691c      	ldr	r4, [r3, #16]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	4623      	mov	r3, r4
 8005c54:	4602      	mov	r2, r0
 8005c56:	68b8      	ldr	r0, [r7, #8]
 8005c58:	f002 f80e 	bl	8007c78 <ParameterScaledValue_getFromBuffer>
 8005c5c:	6178      	str	r0, [r7, #20]

        break;
 8005c5e:	e0d1      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case P_ME_NC_1: /* 112 - Parameter of measured values, short floating point number */

        elementSize = self->parameters->sizeOfIOA + 5;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	3305      	adds	r3, #5
 8005c68:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) ParameterFloatValue_getFromBuffer((ParameterFloatValue) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68d8      	ldr	r0, [r3, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691c      	ldr	r4, [r3, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	4623      	mov	r3, r4
 8005c82:	4602      	mov	r2, r0
 8005c84:	68b8      	ldr	r0, [r7, #8]
 8005c86:	f002 fa30 	bl	80080ea <ParameterFloatValue_getFromBuffer>
 8005c8a:	6178      	str	r0, [r7, #20]

        break;
 8005c8c:	e0ba      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case P_AC_NA_1: /* 113 - Parameter for activation */

        elementSize = self->parameters->sizeOfIOA + 1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	3301      	adds	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]

        retVal = (InformationObject) ParameterActivation_getFromBuffer((ParameterActivation) io, self->parameters, self->payload, self->payloadSize,  index * elementSize);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6819      	ldr	r1, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68d8      	ldr	r0, [r3, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691c      	ldr	r4, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	fb02 f303 	mul.w	r3, r2, r3
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	4623      	mov	r3, r4
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68b8      	ldr	r0, [r7, #8]
 8005cb4:	f004 ffa5 	bl	800ac02 <ParameterActivation_getFromBuffer>
 8005cb8:	6178      	str	r0, [r7, #20]

        break;
 8005cba:	e0a3      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case F_FR_NA_1: /* 120 - File ready */

        retVal = (InformationObject) FileReady_getFromBuffer((FileReady) io, self->parameters, self->payload, self->payloadSize, 0);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6819      	ldr	r1, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2000      	movs	r0, #0
 8005cca:	9000      	str	r0, [sp, #0]
 8005ccc:	68b8      	ldr	r0, [r7, #8]
 8005cce:	f005 f8bc 	bl	800ae4a <FileReady_getFromBuffer>
 8005cd2:	6178      	str	r0, [r7, #20]

        break;
 8005cd4:	e096      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case F_SR_NA_1: /* 121 - Section ready */

        retVal = (InformationObject) SectionReady_getFromBuffer((SectionReady) io, self->parameters, self->payload, self->payloadSize, 0);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	9000      	str	r0, [sp, #0]
 8005ce6:	68b8      	ldr	r0, [r7, #8]
 8005ce8:	f005 f997 	bl	800b01a <SectionReady_getFromBuffer>
 8005cec:	6178      	str	r0, [r7, #20]

        break;
 8005cee:	e089      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case F_SC_NA_1: /* 122 - Call/Select directory/file/section */

        retVal = (InformationObject) FileCallOrSelect_getFromBuffer((FileCallOrSelect) io, self->parameters, self->payload, self->payloadSize, 0);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	9000      	str	r0, [sp, #0]
 8005d00:	68b8      	ldr	r0, [r7, #8]
 8005d02:	f005 fa64 	bl	800b1ce <FileCallOrSelect_getFromBuffer>
 8005d06:	6178      	str	r0, [r7, #20]

        break;
 8005d08:	e07c      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case F_LS_NA_1: /* 123 - Last segment/section */

        retVal = (InformationObject) FileLastSegmentOrSection_getFromBuffer((FileLastSegmentOrSection) io, self->parameters, self->payload, self->payloadSize, 0);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6819      	ldr	r1, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2000      	movs	r0, #0
 8005d18:	9000      	str	r0, [sp, #0]
 8005d1a:	68b8      	ldr	r0, [r7, #8]
 8005d1c:	f005 fb01 	bl	800b322 <FileLastSegmentOrSection_getFromBuffer>
 8005d20:	6178      	str	r0, [r7, #20]

        break;
 8005d22:	e06f      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case F_AF_NA_1: /* 124 -  ACK file/section */

        retVal = (InformationObject) FileACK_getFromBuffer((FileACK) io, self->parameters, self->payload, self->payloadSize, 0);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6819      	ldr	r1, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2000      	movs	r0, #0
 8005d32:	9000      	str	r0, [sp, #0]
 8005d34:	68b8      	ldr	r0, [r7, #8]
 8005d36:	f005 fba0 	bl	800b47a <FileACK_getFromBuffer>
 8005d3a:	6178      	str	r0, [r7, #20]

        break;
 8005d3c:	e062      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case F_SG_NA_1: /* 125 - File segment */

        retVal = (InformationObject) FileSegment_getFromBuffer((FileSegment) io, self->parameters, self->payload, self->payloadSize, 0);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6819      	ldr	r1, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	9000      	str	r0, [sp, #0]
 8005d4e:	68b8      	ldr	r0, [r7, #8]
 8005d50:	f005 fc67 	bl	800b622 <FileSegment_getFromBuffer>
 8005d54:	6178      	str	r0, [r7, #20]

        break;
 8005d56:	e055      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case F_DR_TA_1: /* 126 - File directory */

        elementSize = 13;
 8005d58:	230d      	movs	r3, #13
 8005d5a:	613b      	str	r3, [r7, #16]

        if (CS101_ASDU_isSequence(self)) {
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7fe fb1a 	bl	8004396 <CS101_ASDU_isSequence>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d027      	beq.n	8005db8 <CS101_ASDU_getElementEx+0x19bc>
            retVal  = (InformationObject) FileDirectory_getFromBuffer((FileDirectory) io, self->parameters,
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68dc      	ldr	r4, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	691d      	ldr	r5, [r3, #16]
                    self->payload, self->payloadSize, self->parameters->sizeOfIOA + (index * elementSize), true);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6939      	ldr	r1, [r7, #16]
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
            retVal  = (InformationObject) FileDirectory_getFromBuffer((FileDirectory) io, self->parameters,
 8005d82:	4413      	add	r3, r2
 8005d84:	2201      	movs	r2, #1
 8005d86:	9201      	str	r2, [sp, #4]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4601      	mov	r1, r0
 8005d90:	68b8      	ldr	r0, [r7, #8]
 8005d92:	f005 fd48 	bl	800b826 <FileDirectory_getFromBuffer>
 8005d96:	6178      	str	r0, [r7, #20]

            InformationObject_setObjectAddress(retVal, InformationObject_ParseObjectAddress(self->parameters, self->payload, 0) + index);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	4619      	mov	r1, r3
 8005da4:	f000 fad5 	bl	8006352 <InformationObject_ParseObjectAddress>
 8005da8:	4602      	mov	r2, r0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	4619      	mov	r1, r3
 8005db0:	6978      	ldr	r0, [r7, #20]
 8005db2:	f000 fa7c 	bl	80062ae <InformationObject_setObjectAddress>
        }
        else
            retVal  = (InformationObject) FileDirectory_getFromBuffer((FileDirectory) io, self->parameters,
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);

        break;
 8005db6:	e025      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>
            retVal  = (InformationObject) FileDirectory_getFromBuffer((FileDirectory) io, self->parameters,
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6819      	ldr	r1, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68d8      	ldr	r0, [r3, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691c      	ldr	r4, [r3, #16]
                    self->payload, self->payloadSize, index * (self->parameters->sizeOfIOA + elementSize), false);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4413      	add	r3, r2
            retVal  = (InformationObject) FileDirectory_getFromBuffer((FileDirectory) io, self->parameters,
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	9201      	str	r2, [sp, #4]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	4623      	mov	r3, r4
 8005ddc:	4602      	mov	r2, r0
 8005dde:	68b8      	ldr	r0, [r7, #8]
 8005de0:	f005 fd21 	bl	800b826 <FileDirectory_getFromBuffer>
 8005de4:	6178      	str	r0, [r7, #20]
        break;
 8005de6:	e00d      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    case F_SC_NB_1: /* 127 - QueryLog */

        retVal = (InformationObject) QueryLog_getFromBuffer((QueryLog) io, self->parameters, self->payload, self->payloadSize, 0);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6819      	ldr	r1, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2000      	movs	r0, #0
 8005df6:	9000      	str	r0, [sp, #0]
 8005df8:	68b8      	ldr	r0, [r7, #8]
 8005dfa:	f005 fdf8 	bl	800b9ee <QueryLog_getFromBuffer>
 8005dfe:	6178      	str	r0, [r7, #20]

        break;
 8005e00:	e000      	b.n	8005e04 <CS101_ASDU_getElementEx+0x1a08>

    default:
    	DEBUG_PRINT("type %d not supported\n", CS101_ASDU_getTypeID(self));
    	break;
 8005e02:	bf00      	nop
    }

    return retVal;
 8005e04:	697b      	ldr	r3, [r7, #20]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e0e:	bf00      	nop

08005e10 <TypeID_toString>:

const char*
TypeID_toString(TypeID self)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
    switch (self) {
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	2b7e      	cmp	r3, #126	; 0x7e
 8005e20:	f200 8188 	bhi.w	8006134 <TypeID_toString+0x324>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <TypeID_toString+0x1c>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08006029 	.word	0x08006029
 8005e30:	0800602d 	.word	0x0800602d
 8005e34:	08006031 	.word	0x08006031
 8005e38:	08006035 	.word	0x08006035
 8005e3c:	08006039 	.word	0x08006039
 8005e40:	0800603d 	.word	0x0800603d
 8005e44:	08006041 	.word	0x08006041
 8005e48:	08006045 	.word	0x08006045
 8005e4c:	08006049 	.word	0x08006049
 8005e50:	0800604d 	.word	0x0800604d
 8005e54:	08006051 	.word	0x08006051
 8005e58:	08006055 	.word	0x08006055
 8005e5c:	08006059 	.word	0x08006059
 8005e60:	0800605d 	.word	0x0800605d
 8005e64:	08006061 	.word	0x08006061
 8005e68:	08006065 	.word	0x08006065
 8005e6c:	08006069 	.word	0x08006069
 8005e70:	0800606d 	.word	0x0800606d
 8005e74:	08006071 	.word	0x08006071
 8005e78:	08006075 	.word	0x08006075
 8005e7c:	08006079 	.word	0x08006079
 8005e80:	08006135 	.word	0x08006135
 8005e84:	08006135 	.word	0x08006135
 8005e88:	08006135 	.word	0x08006135
 8005e8c:	08006135 	.word	0x08006135
 8005e90:	08006135 	.word	0x08006135
 8005e94:	08006135 	.word	0x08006135
 8005e98:	08006135 	.word	0x08006135
 8005e9c:	08006135 	.word	0x08006135
 8005ea0:	0800607d 	.word	0x0800607d
 8005ea4:	08006081 	.word	0x08006081
 8005ea8:	08006085 	.word	0x08006085
 8005eac:	08006089 	.word	0x08006089
 8005eb0:	0800608d 	.word	0x0800608d
 8005eb4:	08006091 	.word	0x08006091
 8005eb8:	08006095 	.word	0x08006095
 8005ebc:	08006099 	.word	0x08006099
 8005ec0:	0800609d 	.word	0x0800609d
 8005ec4:	080060a1 	.word	0x080060a1
 8005ec8:	080060a5 	.word	0x080060a5
 8005ecc:	08006135 	.word	0x08006135
 8005ed0:	08006135 	.word	0x08006135
 8005ed4:	08006135 	.word	0x08006135
 8005ed8:	08006135 	.word	0x08006135
 8005edc:	080060a9 	.word	0x080060a9
 8005ee0:	080060ad 	.word	0x080060ad
 8005ee4:	080060b1 	.word	0x080060b1
 8005ee8:	080060b5 	.word	0x080060b5
 8005eec:	080060b9 	.word	0x080060b9
 8005ef0:	080060bd 	.word	0x080060bd
 8005ef4:	080060c1 	.word	0x080060c1
 8005ef8:	08006135 	.word	0x08006135
 8005efc:	08006135 	.word	0x08006135
 8005f00:	08006135 	.word	0x08006135
 8005f04:	08006135 	.word	0x08006135
 8005f08:	08006135 	.word	0x08006135
 8005f0c:	08006135 	.word	0x08006135
 8005f10:	080060c5 	.word	0x080060c5
 8005f14:	080060c9 	.word	0x080060c9
 8005f18:	080060cd 	.word	0x080060cd
 8005f1c:	080060d1 	.word	0x080060d1
 8005f20:	080060d5 	.word	0x080060d5
 8005f24:	080060d9 	.word	0x080060d9
 8005f28:	080060dd 	.word	0x080060dd
 8005f2c:	08006135 	.word	0x08006135
 8005f30:	08006135 	.word	0x08006135
 8005f34:	08006135 	.word	0x08006135
 8005f38:	08006135 	.word	0x08006135
 8005f3c:	08006135 	.word	0x08006135
 8005f40:	080060e1 	.word	0x080060e1
 8005f44:	08006135 	.word	0x08006135
 8005f48:	08006135 	.word	0x08006135
 8005f4c:	08006135 	.word	0x08006135
 8005f50:	08006135 	.word	0x08006135
 8005f54:	08006135 	.word	0x08006135
 8005f58:	08006135 	.word	0x08006135
 8005f5c:	08006135 	.word	0x08006135
 8005f60:	08006135 	.word	0x08006135
 8005f64:	08006135 	.word	0x08006135
 8005f68:	08006135 	.word	0x08006135
 8005f6c:	08006135 	.word	0x08006135
 8005f70:	08006135 	.word	0x08006135
 8005f74:	08006135 	.word	0x08006135
 8005f78:	08006135 	.word	0x08006135
 8005f7c:	08006135 	.word	0x08006135
 8005f80:	08006135 	.word	0x08006135
 8005f84:	08006135 	.word	0x08006135
 8005f88:	08006135 	.word	0x08006135
 8005f8c:	08006135 	.word	0x08006135
 8005f90:	08006135 	.word	0x08006135
 8005f94:	08006135 	.word	0x08006135
 8005f98:	08006135 	.word	0x08006135
 8005f9c:	08006135 	.word	0x08006135
 8005fa0:	08006135 	.word	0x08006135
 8005fa4:	08006135 	.word	0x08006135
 8005fa8:	08006135 	.word	0x08006135
 8005fac:	08006135 	.word	0x08006135
 8005fb0:	08006135 	.word	0x08006135
 8005fb4:	08006135 	.word	0x08006135
 8005fb8:	080060e5 	.word	0x080060e5
 8005fbc:	080060e9 	.word	0x080060e9
 8005fc0:	080060ed 	.word	0x080060ed
 8005fc4:	080060f1 	.word	0x080060f1
 8005fc8:	080060f5 	.word	0x080060f5
 8005fcc:	080060f9 	.word	0x080060f9
 8005fd0:	080060fd 	.word	0x080060fd
 8005fd4:	08006101 	.word	0x08006101
 8005fd8:	08006135 	.word	0x08006135
 8005fdc:	08006135 	.word	0x08006135
 8005fe0:	08006105 	.word	0x08006105
 8005fe4:	08006109 	.word	0x08006109
 8005fe8:	0800610d 	.word	0x0800610d
 8005fec:	08006111 	.word	0x08006111
 8005ff0:	08006135 	.word	0x08006135
 8005ff4:	08006135 	.word	0x08006135
 8005ff8:	08006135 	.word	0x08006135
 8005ffc:	08006135 	.word	0x08006135
 8006000:	08006135 	.word	0x08006135
 8006004:	08006135 	.word	0x08006135
 8006008:	08006115 	.word	0x08006115
 800600c:	08006119 	.word	0x08006119
 8006010:	0800611d 	.word	0x0800611d
 8006014:	08006121 	.word	0x08006121
 8006018:	08006125 	.word	0x08006125
 800601c:	08006129 	.word	0x08006129
 8006020:	0800612d 	.word	0x0800612d
 8006024:	08006131 	.word	0x08006131

    case M_SP_NA_1:
        return "M_SP_NA_1";
 8006028:	4b46      	ldr	r3, [pc, #280]	; (8006144 <TypeID_toString+0x334>)
 800602a:	e084      	b.n	8006136 <TypeID_toString+0x326>

    case M_SP_TA_1:
        return "M_SP_TA_1";
 800602c:	4b46      	ldr	r3, [pc, #280]	; (8006148 <TypeID_toString+0x338>)
 800602e:	e082      	b.n	8006136 <TypeID_toString+0x326>

    case M_DP_NA_1:
        return "M_DP_NA_1";
 8006030:	4b46      	ldr	r3, [pc, #280]	; (800614c <TypeID_toString+0x33c>)
 8006032:	e080      	b.n	8006136 <TypeID_toString+0x326>

    case M_DP_TA_1:
        return "M_DP_TA_1";
 8006034:	4b46      	ldr	r3, [pc, #280]	; (8006150 <TypeID_toString+0x340>)
 8006036:	e07e      	b.n	8006136 <TypeID_toString+0x326>

    case M_ST_NA_1:
        return "M_ST_NA_1";
 8006038:	4b46      	ldr	r3, [pc, #280]	; (8006154 <TypeID_toString+0x344>)
 800603a:	e07c      	b.n	8006136 <TypeID_toString+0x326>

    case M_ST_TA_1:
        return "M_ST_TA_1";
 800603c:	4b46      	ldr	r3, [pc, #280]	; (8006158 <TypeID_toString+0x348>)
 800603e:	e07a      	b.n	8006136 <TypeID_toString+0x326>

    case M_BO_NA_1:
        return "M_BO_NA_1";
 8006040:	4b46      	ldr	r3, [pc, #280]	; (800615c <TypeID_toString+0x34c>)
 8006042:	e078      	b.n	8006136 <TypeID_toString+0x326>

    case M_BO_TA_1:
        return "M_BO_TA_1";
 8006044:	4b46      	ldr	r3, [pc, #280]	; (8006160 <TypeID_toString+0x350>)
 8006046:	e076      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_NA_1:
        return "M_ME_NA_1";
 8006048:	4b46      	ldr	r3, [pc, #280]	; (8006164 <TypeID_toString+0x354>)
 800604a:	e074      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_TA_1:
        return "M_ME_TA_1";
 800604c:	4b46      	ldr	r3, [pc, #280]	; (8006168 <TypeID_toString+0x358>)
 800604e:	e072      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_NB_1:
        return "M_ME_NB_1";
 8006050:	4b46      	ldr	r3, [pc, #280]	; (800616c <TypeID_toString+0x35c>)
 8006052:	e070      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_TB_1:
        return "M_ME_TB_1";
 8006054:	4b46      	ldr	r3, [pc, #280]	; (8006170 <TypeID_toString+0x360>)
 8006056:	e06e      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_NC_1:
        return "M_ME_NC_1";
 8006058:	4b46      	ldr	r3, [pc, #280]	; (8006174 <TypeID_toString+0x364>)
 800605a:	e06c      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_TC_1:
        return "M_ME_TC_1";
 800605c:	4b46      	ldr	r3, [pc, #280]	; (8006178 <TypeID_toString+0x368>)
 800605e:	e06a      	b.n	8006136 <TypeID_toString+0x326>

    case M_IT_NA_1:
        return "M_IT_NA_1";
 8006060:	4b46      	ldr	r3, [pc, #280]	; (800617c <TypeID_toString+0x36c>)
 8006062:	e068      	b.n	8006136 <TypeID_toString+0x326>

    case M_IT_TA_1:
        return "M_IT_TA_1";
 8006064:	4b46      	ldr	r3, [pc, #280]	; (8006180 <TypeID_toString+0x370>)
 8006066:	e066      	b.n	8006136 <TypeID_toString+0x326>

    case M_EP_TA_1:
        return "M_EP_TA_1";
 8006068:	4b46      	ldr	r3, [pc, #280]	; (8006184 <TypeID_toString+0x374>)
 800606a:	e064      	b.n	8006136 <TypeID_toString+0x326>

    case M_EP_TB_1:
        return "M_EP_TB_1";
 800606c:	4b46      	ldr	r3, [pc, #280]	; (8006188 <TypeID_toString+0x378>)
 800606e:	e062      	b.n	8006136 <TypeID_toString+0x326>

    case M_EP_TC_1:
        return "M_EP_TC_1";
 8006070:	4b46      	ldr	r3, [pc, #280]	; (800618c <TypeID_toString+0x37c>)
 8006072:	e060      	b.n	8006136 <TypeID_toString+0x326>

    case M_PS_NA_1:
        return "M_PS_NA_1";
 8006074:	4b46      	ldr	r3, [pc, #280]	; (8006190 <TypeID_toString+0x380>)
 8006076:	e05e      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_ND_1:
        return "M_ME_ND_1";
 8006078:	4b46      	ldr	r3, [pc, #280]	; (8006194 <TypeID_toString+0x384>)
 800607a:	e05c      	b.n	8006136 <TypeID_toString+0x326>

    case M_SP_TB_1:
        return "M_SP_TB_1";
 800607c:	4b46      	ldr	r3, [pc, #280]	; (8006198 <TypeID_toString+0x388>)
 800607e:	e05a      	b.n	8006136 <TypeID_toString+0x326>

    case M_DP_TB_1:
        return "M_DP_TB_1";
 8006080:	4b46      	ldr	r3, [pc, #280]	; (800619c <TypeID_toString+0x38c>)
 8006082:	e058      	b.n	8006136 <TypeID_toString+0x326>

    case M_ST_TB_1:
        return "M_ST_TB_1";
 8006084:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <TypeID_toString+0x390>)
 8006086:	e056      	b.n	8006136 <TypeID_toString+0x326>

    case M_BO_TB_1:
        return "M_BO_TB_1";
 8006088:	4b46      	ldr	r3, [pc, #280]	; (80061a4 <TypeID_toString+0x394>)
 800608a:	e054      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_TD_1:
        return "M_ME_TD_1";
 800608c:	4b46      	ldr	r3, [pc, #280]	; (80061a8 <TypeID_toString+0x398>)
 800608e:	e052      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_TE_1:
        return "M_ME_TE_1";
 8006090:	4b46      	ldr	r3, [pc, #280]	; (80061ac <TypeID_toString+0x39c>)
 8006092:	e050      	b.n	8006136 <TypeID_toString+0x326>

    case M_ME_TF_1:
        return "M_ME_TF_1";
 8006094:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <TypeID_toString+0x3a0>)
 8006096:	e04e      	b.n	8006136 <TypeID_toString+0x326>

    case M_IT_TB_1:
        return "M_IT_TB_1";
 8006098:	4b46      	ldr	r3, [pc, #280]	; (80061b4 <TypeID_toString+0x3a4>)
 800609a:	e04c      	b.n	8006136 <TypeID_toString+0x326>

    case M_EP_TD_1:
        return "M_EP_TD_1";
 800609c:	4b46      	ldr	r3, [pc, #280]	; (80061b8 <TypeID_toString+0x3a8>)
 800609e:	e04a      	b.n	8006136 <TypeID_toString+0x326>

    case M_EP_TE_1:
        return "M_EP_TE_1";
 80060a0:	4b46      	ldr	r3, [pc, #280]	; (80061bc <TypeID_toString+0x3ac>)
 80060a2:	e048      	b.n	8006136 <TypeID_toString+0x326>

    case M_EP_TF_1:
        return "M_EP_TF_1";
 80060a4:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <TypeID_toString+0x3b0>)
 80060a6:	e046      	b.n	8006136 <TypeID_toString+0x326>

    case C_SC_NA_1:
        return "C_SC_NA_1";
 80060a8:	4b46      	ldr	r3, [pc, #280]	; (80061c4 <TypeID_toString+0x3b4>)
 80060aa:	e044      	b.n	8006136 <TypeID_toString+0x326>

    case C_DC_NA_1:
        return "C_DC_NA_1";
 80060ac:	4b46      	ldr	r3, [pc, #280]	; (80061c8 <TypeID_toString+0x3b8>)
 80060ae:	e042      	b.n	8006136 <TypeID_toString+0x326>

    case C_RC_NA_1:
        return "C_RC_NA_1";
 80060b0:	4b46      	ldr	r3, [pc, #280]	; (80061cc <TypeID_toString+0x3bc>)
 80060b2:	e040      	b.n	8006136 <TypeID_toString+0x326>

    case C_SE_NA_1:
        return "C_SE_NA_1";
 80060b4:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <TypeID_toString+0x3c0>)
 80060b6:	e03e      	b.n	8006136 <TypeID_toString+0x326>

    case C_SE_NB_1:
        return "C_SE_NB_1";
 80060b8:	4b46      	ldr	r3, [pc, #280]	; (80061d4 <TypeID_toString+0x3c4>)
 80060ba:	e03c      	b.n	8006136 <TypeID_toString+0x326>

    case C_SE_NC_1:
        return "C_SE_NC_1";
 80060bc:	4b46      	ldr	r3, [pc, #280]	; (80061d8 <TypeID_toString+0x3c8>)
 80060be:	e03a      	b.n	8006136 <TypeID_toString+0x326>

    case C_BO_NA_1:
        return "C_BO_NA_1";
 80060c0:	4b46      	ldr	r3, [pc, #280]	; (80061dc <TypeID_toString+0x3cc>)
 80060c2:	e038      	b.n	8006136 <TypeID_toString+0x326>

    case C_SC_TA_1:
        return "C_SC_TA_1";
 80060c4:	4b46      	ldr	r3, [pc, #280]	; (80061e0 <TypeID_toString+0x3d0>)
 80060c6:	e036      	b.n	8006136 <TypeID_toString+0x326>

    case C_DC_TA_1:
        return "C_DC_TA_1";
 80060c8:	4b46      	ldr	r3, [pc, #280]	; (80061e4 <TypeID_toString+0x3d4>)
 80060ca:	e034      	b.n	8006136 <TypeID_toString+0x326>

    case C_RC_TA_1:
        return "C_RC_TA_1";
 80060cc:	4b46      	ldr	r3, [pc, #280]	; (80061e8 <TypeID_toString+0x3d8>)
 80060ce:	e032      	b.n	8006136 <TypeID_toString+0x326>

    case C_SE_TA_1:
        return "C_SE_TA_1";
 80060d0:	4b46      	ldr	r3, [pc, #280]	; (80061ec <TypeID_toString+0x3dc>)
 80060d2:	e030      	b.n	8006136 <TypeID_toString+0x326>

    case C_SE_TB_1:
        return "C_SE_TB_1";
 80060d4:	4b46      	ldr	r3, [pc, #280]	; (80061f0 <TypeID_toString+0x3e0>)
 80060d6:	e02e      	b.n	8006136 <TypeID_toString+0x326>

    case C_SE_TC_1:
        return "C_SE_TC_1";
 80060d8:	4b46      	ldr	r3, [pc, #280]	; (80061f4 <TypeID_toString+0x3e4>)
 80060da:	e02c      	b.n	8006136 <TypeID_toString+0x326>

    case C_BO_TA_1:
        return "C_BO_TA_1";
 80060dc:	4b46      	ldr	r3, [pc, #280]	; (80061f8 <TypeID_toString+0x3e8>)
 80060de:	e02a      	b.n	8006136 <TypeID_toString+0x326>

    case M_EI_NA_1:
        return "M_EI_NA_1";
 80060e0:	4b46      	ldr	r3, [pc, #280]	; (80061fc <TypeID_toString+0x3ec>)
 80060e2:	e028      	b.n	8006136 <TypeID_toString+0x326>

    case C_IC_NA_1:
        return "C_IC_NA_1";
 80060e4:	4b46      	ldr	r3, [pc, #280]	; (8006200 <TypeID_toString+0x3f0>)
 80060e6:	e026      	b.n	8006136 <TypeID_toString+0x326>

    case C_CI_NA_1:
        return "C_CI_NA_1";
 80060e8:	4b46      	ldr	r3, [pc, #280]	; (8006204 <TypeID_toString+0x3f4>)
 80060ea:	e024      	b.n	8006136 <TypeID_toString+0x326>

    case C_RD_NA_1:
        return "C_RD_NA_1";
 80060ec:	4b46      	ldr	r3, [pc, #280]	; (8006208 <TypeID_toString+0x3f8>)
 80060ee:	e022      	b.n	8006136 <TypeID_toString+0x326>

    case C_CS_NA_1:
        return "C_CS_NA_1";
 80060f0:	4b46      	ldr	r3, [pc, #280]	; (800620c <TypeID_toString+0x3fc>)
 80060f2:	e020      	b.n	8006136 <TypeID_toString+0x326>

    case C_TS_NA_1:
        return "C_TS_NA_1";
 80060f4:	4b46      	ldr	r3, [pc, #280]	; (8006210 <TypeID_toString+0x400>)
 80060f6:	e01e      	b.n	8006136 <TypeID_toString+0x326>

    case C_RP_NA_1:
        return "C_RP_NA_1";
 80060f8:	4b46      	ldr	r3, [pc, #280]	; (8006214 <TypeID_toString+0x404>)
 80060fa:	e01c      	b.n	8006136 <TypeID_toString+0x326>

    case C_CD_NA_1:
        return "C_CD_NA_1";
 80060fc:	4b46      	ldr	r3, [pc, #280]	; (8006218 <TypeID_toString+0x408>)
 80060fe:	e01a      	b.n	8006136 <TypeID_toString+0x326>

    case C_TS_TA_1:
        return "C_TS_TA_1";
 8006100:	4b46      	ldr	r3, [pc, #280]	; (800621c <TypeID_toString+0x40c>)
 8006102:	e018      	b.n	8006136 <TypeID_toString+0x326>

    case P_ME_NA_1:
        return "P_ME_NA_1";
 8006104:	4b46      	ldr	r3, [pc, #280]	; (8006220 <TypeID_toString+0x410>)
 8006106:	e016      	b.n	8006136 <TypeID_toString+0x326>

    case P_ME_NB_1:
        return "P_ME_NB_1";
 8006108:	4b46      	ldr	r3, [pc, #280]	; (8006224 <TypeID_toString+0x414>)
 800610a:	e014      	b.n	8006136 <TypeID_toString+0x326>

    case P_ME_NC_1:
        return "P_ME_NC_1";
 800610c:	4b46      	ldr	r3, [pc, #280]	; (8006228 <TypeID_toString+0x418>)
 800610e:	e012      	b.n	8006136 <TypeID_toString+0x326>

    case P_AC_NA_1:
        return "P_AC_NA_1";
 8006110:	4b46      	ldr	r3, [pc, #280]	; (800622c <TypeID_toString+0x41c>)
 8006112:	e010      	b.n	8006136 <TypeID_toString+0x326>

    case F_FR_NA_1:
        return "F_FR_NA_1";
 8006114:	4b46      	ldr	r3, [pc, #280]	; (8006230 <TypeID_toString+0x420>)
 8006116:	e00e      	b.n	8006136 <TypeID_toString+0x326>

    case F_SR_NA_1:
        return "F_SR_NA_1";
 8006118:	4b46      	ldr	r3, [pc, #280]	; (8006234 <TypeID_toString+0x424>)
 800611a:	e00c      	b.n	8006136 <TypeID_toString+0x326>

    case F_SC_NA_1:
        return "F_SC_NA_1";
 800611c:	4b46      	ldr	r3, [pc, #280]	; (8006238 <TypeID_toString+0x428>)
 800611e:	e00a      	b.n	8006136 <TypeID_toString+0x326>

    case F_LS_NA_1:
        return "F_LS_NA_1";
 8006120:	4b46      	ldr	r3, [pc, #280]	; (800623c <TypeID_toString+0x42c>)
 8006122:	e008      	b.n	8006136 <TypeID_toString+0x326>

    case F_AF_NA_1:
        return "F_AF_NA_1";
 8006124:	4b46      	ldr	r3, [pc, #280]	; (8006240 <TypeID_toString+0x430>)
 8006126:	e006      	b.n	8006136 <TypeID_toString+0x326>

    case F_SG_NA_1:
        return "F_SG_NA_1";
 8006128:	4b46      	ldr	r3, [pc, #280]	; (8006244 <TypeID_toString+0x434>)
 800612a:	e004      	b.n	8006136 <TypeID_toString+0x326>

    case F_DR_TA_1:
        return "F_DR_TA_1";
 800612c:	4b46      	ldr	r3, [pc, #280]	; (8006248 <TypeID_toString+0x438>)
 800612e:	e002      	b.n	8006136 <TypeID_toString+0x326>

    case F_SC_NB_1:
        return "F_SC_NB_1";
 8006130:	4b46      	ldr	r3, [pc, #280]	; (800624c <TypeID_toString+0x43c>)
 8006132:	e000      	b.n	8006136 <TypeID_toString+0x326>

    default:
        return "unknown";
 8006134:	4b46      	ldr	r3, [pc, #280]	; (8006250 <TypeID_toString+0x440>)
    }
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	0800f9d4 	.word	0x0800f9d4
 8006148:	0800f9e0 	.word	0x0800f9e0
 800614c:	0800f9ec 	.word	0x0800f9ec
 8006150:	0800f9f8 	.word	0x0800f9f8
 8006154:	0800fa04 	.word	0x0800fa04
 8006158:	0800fa10 	.word	0x0800fa10
 800615c:	0800fa1c 	.word	0x0800fa1c
 8006160:	0800fa28 	.word	0x0800fa28
 8006164:	0800fa34 	.word	0x0800fa34
 8006168:	0800fa40 	.word	0x0800fa40
 800616c:	0800fa4c 	.word	0x0800fa4c
 8006170:	0800fa58 	.word	0x0800fa58
 8006174:	0800fa64 	.word	0x0800fa64
 8006178:	0800fa70 	.word	0x0800fa70
 800617c:	0800fa7c 	.word	0x0800fa7c
 8006180:	0800fa88 	.word	0x0800fa88
 8006184:	0800fa94 	.word	0x0800fa94
 8006188:	0800faa0 	.word	0x0800faa0
 800618c:	0800faac 	.word	0x0800faac
 8006190:	0800fab8 	.word	0x0800fab8
 8006194:	0800fac4 	.word	0x0800fac4
 8006198:	0800fad0 	.word	0x0800fad0
 800619c:	0800fadc 	.word	0x0800fadc
 80061a0:	0800fae8 	.word	0x0800fae8
 80061a4:	0800faf4 	.word	0x0800faf4
 80061a8:	0800fb00 	.word	0x0800fb00
 80061ac:	0800fb0c 	.word	0x0800fb0c
 80061b0:	0800fb18 	.word	0x0800fb18
 80061b4:	0800fb24 	.word	0x0800fb24
 80061b8:	0800fb30 	.word	0x0800fb30
 80061bc:	0800fb3c 	.word	0x0800fb3c
 80061c0:	0800fb48 	.word	0x0800fb48
 80061c4:	0800fb54 	.word	0x0800fb54
 80061c8:	0800fb60 	.word	0x0800fb60
 80061cc:	0800fb6c 	.word	0x0800fb6c
 80061d0:	0800fb78 	.word	0x0800fb78
 80061d4:	0800fb84 	.word	0x0800fb84
 80061d8:	0800fb90 	.word	0x0800fb90
 80061dc:	0800fb9c 	.word	0x0800fb9c
 80061e0:	0800fba8 	.word	0x0800fba8
 80061e4:	0800fbb4 	.word	0x0800fbb4
 80061e8:	0800fbc0 	.word	0x0800fbc0
 80061ec:	0800fbcc 	.word	0x0800fbcc
 80061f0:	0800fbd8 	.word	0x0800fbd8
 80061f4:	0800fbe4 	.word	0x0800fbe4
 80061f8:	0800fbf0 	.word	0x0800fbf0
 80061fc:	0800fbfc 	.word	0x0800fbfc
 8006200:	0800fc08 	.word	0x0800fc08
 8006204:	0800fc14 	.word	0x0800fc14
 8006208:	0800fc20 	.word	0x0800fc20
 800620c:	0800fc2c 	.word	0x0800fc2c
 8006210:	0800fc38 	.word	0x0800fc38
 8006214:	0800fc44 	.word	0x0800fc44
 8006218:	0800fc50 	.word	0x0800fc50
 800621c:	0800fc5c 	.word	0x0800fc5c
 8006220:	0800fc68 	.word	0x0800fc68
 8006224:	0800fc74 	.word	0x0800fc74
 8006228:	0800fc80 	.word	0x0800fc80
 800622c:	0800fc8c 	.word	0x0800fc8c
 8006230:	0800fc98 	.word	0x0800fc98
 8006234:	0800fca4 	.word	0x0800fca4
 8006238:	0800fcb0 	.word	0x0800fcb0
 800623c:	0800fcbc 	.word	0x0800fcbc
 8006240:	0800fcc8 	.word	0x0800fcc8
 8006244:	0800fcd4 	.word	0x0800fcd4
 8006248:	0800fce0 	.word	0x0800fce0
 800624c:	0800fcec 	.word	0x0800fcec
 8006250:	0800fcf8 	.word	0x0800fcf8

08006254 <InformationObject_encode>:
    InformationObjectVFT virtualFunctionTable;
};

bool
InformationObject_encode(InformationObject self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	70fb      	strb	r3, [r7, #3]
    return self->virtualFunctionTable->encode(self, frame, parameters, isSequence);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	681c      	ldr	r4, [r3, #0]
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	47a0      	blx	r4
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	bd90      	pop	{r4, r7, pc}

0800627c <InformationObject_destroy>:

void
InformationObject_destroy(InformationObject self)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable->destroy(self);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <InformationObject_getObjectAddress>:

int
InformationObject_getObjectAddress(InformationObject self)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
    return self->objectAddress;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <InformationObject_setObjectAddress>:

void
InformationObject_setObjectAddress(InformationObject self, int ioa)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6039      	str	r1, [r7, #0]
    self->objectAddress = ioa;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <InformationObject_getType>:

TypeID
InformationObject_getType(InformationObject self)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
    return self->type;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	791b      	ldrb	r3, [r3, #4]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <InformationObject_encodeBase>:

static void
InformationObject_encodeBase(InformationObject self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
 80062ee:	70fb      	strb	r3, [r7, #3]
    if (!isSequence) {
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	f083 0301 	eor.w	r3, r3, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d026      	beq.n	800634a <InformationObject_encodeBase+0x68>
        Frame_setNextByte(frame, (uint8_t)(self->objectAddress & 0xff));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	4619      	mov	r1, r3
 8006304:	68b8      	ldr	r0, [r7, #8]
 8006306:	f005 ff6b 	bl	800c1e0 <Frame_setNextByte>

        if (parameters->sizeOfIOA > 1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	2b01      	cmp	r3, #1
 8006310:	dd0a      	ble.n	8006328 <InformationObject_encodeBase+0x46>
            Frame_setNextByte(frame, (uint8_t)((self->objectAddress / 0x100) & 0xff));
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	da00      	bge.n	800631c <InformationObject_encodeBase+0x3a>
 800631a:	33ff      	adds	r3, #255	; 0xff
 800631c:	121b      	asrs	r3, r3, #8
 800631e:	b2db      	uxtb	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	68b8      	ldr	r0, [r7, #8]
 8006324:	f005 ff5c 	bl	800c1e0 <Frame_setNextByte>

        if (parameters->sizeOfIOA > 2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	2b02      	cmp	r3, #2
 800632e:	dd0c      	ble.n	800634a <InformationObject_encodeBase+0x68>
            Frame_setNextByte(frame, (uint8_t)((self->objectAddress / 0x10000) & 0xff));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	da02      	bge.n	800633e <InformationObject_encodeBase+0x5c>
 8006338:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800633c:	33ff      	adds	r3, #255	; 0xff
 800633e:	141b      	asrs	r3, r3, #16
 8006340:	b2db      	uxtb	r3, r3
 8006342:	4619      	mov	r1, r3
 8006344:	68b8      	ldr	r0, [r7, #8]
 8006346:	f005 ff4b 	bl	800c1e0 <Frame_setNextByte>
    }
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <InformationObject_ParseObjectAddress>:

int
InformationObject_ParseObjectAddress(CS101_AppLayerParameters parameters, uint8_t* msg, int startIndex)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
    /* parse information object address */
    int ioa = msg [startIndex];
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	4413      	add	r3, r2
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	617b      	str	r3, [r7, #20]

    if (parameters->sizeOfIOA > 1)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	2b01      	cmp	r3, #1
 800636e:	dd08      	ble.n	8006382 <InformationObject_ParseObjectAddress+0x30>
        ioa += (msg [startIndex + 1] * 0x100);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3301      	adds	r3, #1
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	4413      	add	r3, r2
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4413      	add	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

    if (parameters->sizeOfIOA > 2)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	2b02      	cmp	r3, #2
 8006388:	dd08      	ble.n	800639c <InformationObject_ParseObjectAddress+0x4a>
        ioa += (msg [startIndex + 2] * 0x10000);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3302      	adds	r3, #2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	4413      	add	r3, r2
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

    return ioa;
 800639c:	697b      	ldr	r3, [r7, #20]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <InformationObject_getFromBuffer>:

static void
InformationObject_getFromBuffer(InformationObject self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int startIndex)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	603b      	str	r3, [r7, #0]
    /* parse information object address */
    self->objectAddress = InformationObject_ParseObjectAddress(parameters, msg, startIndex);
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	68b8      	ldr	r0, [r7, #8]
 80063be:	f7ff ffc8 	bl	8006352 <InformationObject_ParseObjectAddress>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <SinglePointInformation_encode>:
 * SinglePointInformation
 **********************************************/

static bool
SinglePointInformation_encode(SinglePointInformation self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <SinglePointInformation_encode+0x18>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e002      	b.n	80063ee <SinglePointInformation_encode+0x1e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	3301      	adds	r3, #1
 80063ee:	613b      	str	r3, [r7, #16]

    if (Frame_getSpaceLeft(frame) < size)
 80063f0:	68b8      	ldr	r0, [r7, #8]
 80063f2:	f005 ff17 	bl	800c224 <Frame_getSpaceLeft>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4293      	cmp	r3, r2
 80063fc:	dd01      	ble.n	8006402 <SinglePointInformation_encode+0x32>
        return false;
 80063fe:	2300      	movs	r3, #0
 8006400:	e017      	b.n	8006432 <SinglePointInformation_encode+0x62>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff ff6a 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t val = (uint8_t) (self->quality & 0xf0);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	7b5b      	ldrb	r3, [r3, #13]
 8006412:	f023 030f 	bic.w	r3, r3, #15
 8006416:	75fb      	strb	r3, [r7, #23]

    if (self->value)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	7b1b      	ldrb	r3, [r3, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <SinglePointInformation_encode+0x56>
        val++;
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	3301      	adds	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]

    Frame_setNextByte(frame, val);
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	4619      	mov	r1, r3
 800642a:	68b8      	ldr	r0, [r7, #8]
 800642c:	f005 fed8 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8006430:	2301      	movs	r3, #1
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <SinglePointInformation_initialize>:
        (DestroyFunction) SinglePointInformation_destroy
};

static void
SinglePointInformation_initialize(SinglePointInformation self)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(singlePointInformationVFT);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a05      	ldr	r2, [pc, #20]	; (800645c <SinglePointInformation_initialize+0x20>)
 8006448:	609a      	str	r2, [r3, #8]
    self->type = M_SP_NA_1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	711a      	strb	r2, [r3, #4]
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000140 	.word	0x20000140

08006460 <SinglePointInformation_destroy>:
    return self;
}

void
SinglePointInformation_destroy(SinglePointInformation self)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fd fd1e 	bl	8003eaa <Memory_free>
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <SinglePointInformation_getFromBuffer>:

SinglePointInformation
SinglePointInformation_getFromBuffer(SinglePointInformation self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 1;
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	3301      	adds	r3, #1
 8006488:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800648a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800648e:	f083 0301 	eor.w	r3, r3, #1
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <SinglePointInformation_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4413      	add	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	dd01      	ble.n	80064ae <SinglePointInformation_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e034      	b.n	8006518 <SinglePointInformation_getFromBuffer+0xa2>
    }

    if (self == NULL)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <SinglePointInformation_getFromBuffer+0x46>
		self = (SinglePointInformation) GLOBAL_MALLOC(sizeof(struct sSinglePointInformation));
 80064b4:	2010      	movs	r0, #16
 80064b6:	f7fd fce5 	bl	8003e84 <Memory_malloc>
 80064ba:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d029      	beq.n	8006516 <SinglePointInformation_getFromBuffer+0xa0>
        SinglePointInformation_initialize(self);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff ffba 	bl	800643c <SinglePointInformation_initialize>

        if (!isSequence) {
 80064c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <SinglePointInformation_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff ff64 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	4413      	add	r3, r2
 80064ea:	623b      	str	r3, [r7, #32]
        }

        /* parse SIQ (single point information with quality) */
        uint8_t siq = msg [startIndex];
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	74fb      	strb	r3, [r7, #19]

        self->value = ((siq & 0x01) == 0x01);
 80064f6:	7cfb      	ldrb	r3, [r7, #19]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf14      	ite	ne
 8006500:	2301      	movne	r3, #1
 8006502:	2300      	moveq	r3, #0
 8006504:	b2da      	uxtb	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) (siq & 0xf0);
 800650a:	7cfb      	ldrb	r3, [r7, #19]
 800650c:	f023 030f 	bic.w	r3, r3, #15
 8006510:	b2da      	uxtb	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	735a      	strb	r2, [r3, #13]
    }

    return self;
 8006516:	68fb      	ldr	r3, [r7, #12]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SinglePointInformation_getValue>:

bool
SinglePointInformation_getValue(SinglePointInformation self)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
    return self->value;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	7b1b      	ldrb	r3, [r3, #12]
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <StepPositionInformation_encode>:
 * StepPositionInformation
 **********************************************/

static bool
StepPositionInformation_encode(StepPositionInformation self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 2 : (parameters->sizeOfIOA + 2);
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <StepPositionInformation_encode+0x18>
 800654c:	2302      	movs	r3, #2
 800654e:	e002      	b.n	8006556 <StepPositionInformation_encode+0x1e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	3302      	adds	r3, #2
 8006556:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8006558:	68b8      	ldr	r0, [r7, #8]
 800655a:	f005 fe63 	bl	800c224 <Frame_getSpaceLeft>
 800655e:	4602      	mov	r2, r0
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	4293      	cmp	r3, r2
 8006564:	dd01      	ble.n	800656a <StepPositionInformation_encode+0x32>
        return false;
 8006566:	2300      	movs	r3, #0
 8006568:	e012      	b.n	8006590 <StepPositionInformation_encode+0x58>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff feb6 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->vti);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	7b1b      	ldrb	r3, [r3, #12]
 800657a:	4619      	mov	r1, r3
 800657c:	68b8      	ldr	r0, [r7, #8]
 800657e:	f005 fe2f 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->quality);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	7b5b      	ldrb	r3, [r3, #13]
 8006586:	4619      	mov	r1, r3
 8006588:	68b8      	ldr	r0, [r7, #8]
 800658a:	f005 fe29 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800658e:	2301      	movs	r3, #1
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <StepPositionInformation_initialize>:
        (DestroyFunction) StepPositionInformation_destroy
};

static void
StepPositionInformation_initialize(StepPositionInformation self)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(stepPositionInformationVFT);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <StepPositionInformation_initialize+0x20>)
 80065a4:	609a      	str	r2, [r3, #8]
    self->type = M_ST_NA_1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2205      	movs	r2, #5
 80065aa:	711a      	strb	r2, [r3, #4]
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	20000148 	.word	0x20000148

080065bc <StepPositionInformation_destroy>:
    return self;
}

void
StepPositionInformation_destroy(StepPositionInformation self)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fd fc70 	bl	8003eaa <Memory_free>
}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <StepPositionInformation_getFromBuffer>:


StepPositionInformation
StepPositionInformation_getFromBuffer(StepPositionInformation self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 2;
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	3302      	adds	r3, #2
 80065e4:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 80065e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065ea:	f083 0301 	eor.w	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <StepPositionInformation_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4413      	add	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	dd01      	ble.n	800660a <StepPositionInformation_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	e02e      	b.n	8006668 <StepPositionInformation_getFromBuffer+0x96>
    }

    if (self == NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d103      	bne.n	8006618 <StepPositionInformation_getFromBuffer+0x46>
		self = (StepPositionInformation) GLOBAL_MALLOC(sizeof(struct sStepPositionInformation));
 8006610:	2010      	movs	r0, #16
 8006612:	f7fd fc37 	bl	8003e84 <Memory_malloc>
 8006616:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d023      	beq.n	8006666 <StepPositionInformation_getFromBuffer+0x94>
        StepPositionInformation_initialize(self);
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7ff ffba 	bl	8006598 <StepPositionInformation_initialize>

        if (!isSequence) {
 8006624:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006628:	f083 0301 	eor.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <StepPositionInformation_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff feb6 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	6a3a      	ldr	r2, [r7, #32]
 8006644:	4413      	add	r3, r2
 8006646:	623b      	str	r3, [r7, #32]
        }

        /* parse VTI (value with transient state indication) */
        self->vti = msg [startIndex++];
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	623a      	str	r2, [r7, #32]
 800664e:	461a      	mov	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4413      	add	r3, r2
 8006654:	781a      	ldrb	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) msg [startIndex];
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	735a      	strb	r2, [r3, #13]
    }

    return self;
 8006666:	68fb      	ldr	r3, [r7, #12]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <StepPositionWithCP56Time2a_encode>:
 * StepPositionWithCP56Time2a
 **********************************************/

static bool
StepPositionWithCP56Time2a_encode(StepPositionWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 9 : (parameters->sizeOfIOA + 9);
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <StepPositionWithCP56Time2a_encode+0x18>
 8006684:	2309      	movs	r3, #9
 8006686:	e002      	b.n	800668e <StepPositionWithCP56Time2a_encode+0x1e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	3309      	adds	r3, #9
 800668e:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	f005 fdc7 	bl	800c224 <Frame_getSpaceLeft>
 8006696:	4602      	mov	r2, r0
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4293      	cmp	r3, r2
 800669c:	dd01      	ble.n	80066a2 <StepPositionWithCP56Time2a_encode+0x32>
        return false;
 800669e:	2300      	movs	r3, #0
 80066a0:	e019      	b.n	80066d6 <StepPositionWithCP56Time2a_encode+0x66>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff fe1a 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->vti);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	7b1b      	ldrb	r3, [r3, #12]
 80066b2:	4619      	mov	r1, r3
 80066b4:	68b8      	ldr	r0, [r7, #8]
 80066b6:	f005 fd93 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->quality);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	7b5b      	ldrb	r3, [r3, #13]
 80066be:	4619      	mov	r1, r3
 80066c0:	68b8      	ldr	r0, [r7, #8]
 80066c2:	f005 fd8d 	bl	800c1e0 <Frame_setNextByte>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	330e      	adds	r3, #14
 80066ca:	2207      	movs	r2, #7
 80066cc:	4619      	mov	r1, r3
 80066ce:	68b8      	ldr	r0, [r7, #8]
 80066d0:	f005 fd97 	bl	800c202 <Frame_appendBytes>

    return true;
 80066d4:	2301      	movs	r3, #1
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <StepPositionWithCP56Time2a_initialize>:
        (DestroyFunction) StepPositionWithCP56Time2a_destroy
};

static void
StepPositionWithCP56Time2a_initialize(StepPositionWithCP56Time2a self)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(stepPositionWithCP56Time2aVFT);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a05      	ldr	r2, [pc, #20]	; (8006700 <StepPositionWithCP56Time2a_initialize+0x20>)
 80066ec:	609a      	str	r2, [r3, #8]
    self->type = M_ST_TB_1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	711a      	strb	r2, [r3, #4]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	20000150 	.word	0x20000150

08006704 <StepPositionWithCP56Time2a_destroy>:

void
StepPositionWithCP56Time2a_destroy(StepPositionWithCP56Time2a self)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fd fbcc 	bl	8003eaa <Memory_free>
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <StepPositionWithCP56Time2a_getFromBuffer>:
}

StepPositionWithCP56Time2a
StepPositionWithCP56Time2a_getFromBuffer(StepPositionWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b086      	sub	sp, #24
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 9;
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	3309      	adds	r3, #9
 800672c:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800672e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006732:	f083 0301 	eor.w	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <StepPositionWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4413      	add	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	dd01      	ble.n	8006752 <StepPositionWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	e039      	b.n	80067c6 <StepPositionWithCP56Time2a_getFromBuffer+0xac>
    }

    if (self == NULL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <StepPositionWithCP56Time2a_getFromBuffer+0x46>
		self = (StepPositionWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sStepPositionWithCP56Time2a));
 8006758:	2018      	movs	r0, #24
 800675a:	f7fd fb93 	bl	8003e84 <Memory_malloc>
 800675e:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d02e      	beq.n	80067c4 <StepPositionWithCP56Time2a_getFromBuffer+0xaa>
        StepPositionWithCP56Time2a_initialize(self);
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff ffba 	bl	80066e0 <StepPositionWithCP56Time2a_initialize>

        if (!isSequence) {
 800676c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006770:	f083 0301 	eor.w	r3, r3, #1
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <StepPositionWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff fe12 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	6a3a      	ldr	r2, [r7, #32]
 800678c:	4413      	add	r3, r2
 800678e:	623b      	str	r3, [r7, #32]
        }

        /* parse VTI (value with transient state indication) */
        self->vti = msg [startIndex++];
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	623a      	str	r2, [r7, #32]
 8006796:	461a      	mov	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4413      	add	r3, r2
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) msg [startIndex++];
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	623a      	str	r2, [r7, #32]
 80067a8:	461a      	mov	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	781a      	ldrb	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	735a      	strb	r2, [r3, #13]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f103 000e 	add.w	r0, r3, #14
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	f7fd fbd2 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 80067c4:	68fb      	ldr	r3, [r7, #12]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <StepPositionWithCP24Time2a_encode>:
 * StepPositionWithCP24Time2a
 **********************************************/

static bool
StepPositionWithCP24Time2a_encode(StepPositionWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 5 : (parameters->sizeOfIOA + 5);
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <StepPositionWithCP24Time2a_encode+0x18>
 80067e2:	2305      	movs	r3, #5
 80067e4:	e002      	b.n	80067ec <StepPositionWithCP24Time2a_encode+0x1e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	3305      	adds	r3, #5
 80067ec:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80067ee:	68b8      	ldr	r0, [r7, #8]
 80067f0:	f005 fd18 	bl	800c224 <Frame_getSpaceLeft>
 80067f4:	4602      	mov	r2, r0
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	dd01      	ble.n	8006800 <StepPositionWithCP24Time2a_encode+0x32>
        return false;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e019      	b.n	8006834 <StepPositionWithCP24Time2a_encode+0x66>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7ff fd6b 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->vti);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	7b1b      	ldrb	r3, [r3, #12]
 8006810:	4619      	mov	r1, r3
 8006812:	68b8      	ldr	r0, [r7, #8]
 8006814:	f005 fce4 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->quality);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	7b5b      	ldrb	r3, [r3, #13]
 800681c:	4619      	mov	r1, r3
 800681e:	68b8      	ldr	r0, [r7, #8]
 8006820:	f005 fcde 	bl	800c1e0 <Frame_setNextByte>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	330e      	adds	r3, #14
 8006828:	2203      	movs	r2, #3
 800682a:	4619      	mov	r1, r3
 800682c:	68b8      	ldr	r0, [r7, #8]
 800682e:	f005 fce8 	bl	800c202 <Frame_appendBytes>

    return true;
 8006832:	2301      	movs	r3, #1
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <StepPositionWithCP24Time2a_initialize>:
        (DestroyFunction) StepPositionWithCP24Time2a_destroy
};

static void
StepPositionWithCP24Time2a_initialize(StepPositionWithCP24Time2a self)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(stepPositionWithCP24Time2aVFT);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a05      	ldr	r2, [pc, #20]	; (800685c <StepPositionWithCP24Time2a_initialize+0x20>)
 8006848:	609a      	str	r2, [r3, #8]
    self->type = M_ST_TA_1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2206      	movs	r2, #6
 800684e:	711a      	strb	r2, [r3, #4]
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	20000158 	.word	0x20000158

08006860 <StepPositionWithCP24Time2a_destroy>:

void
StepPositionWithCP24Time2a_destroy(StepPositionWithCP24Time2a self)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fd fb1e 	bl	8003eaa <Memory_free>
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <StepPositionWithCP24Time2a_getFromBuffer>:
}

StepPositionWithCP24Time2a
StepPositionWithCP24Time2a_getFromBuffer(StepPositionWithCP24Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b086      	sub	sp, #24
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 5;
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	3305      	adds	r3, #5
 8006888:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800688a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800688e:	f083 0301 	eor.w	r3, r3, #1
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <StepPositionWithCP24Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4413      	add	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	dd01      	ble.n	80068ae <StepPositionWithCP24Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e039      	b.n	8006922 <StepPositionWithCP24Time2a_getFromBuffer+0xac>
    }

    if (self == NULL)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <StepPositionWithCP24Time2a_getFromBuffer+0x46>
		self = (StepPositionWithCP24Time2a) GLOBAL_MALLOC(sizeof(struct sStepPositionWithCP24Time2a));
 80068b4:	2014      	movs	r0, #20
 80068b6:	f7fd fae5 	bl	8003e84 <Memory_malloc>
 80068ba:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d02e      	beq.n	8006920 <StepPositionWithCP24Time2a_getFromBuffer+0xaa>
        StepPositionWithCP24Time2a_initialize(self);
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff ffba 	bl	800683c <StepPositionWithCP24Time2a_initialize>

        if (!isSequence) {
 80068c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068cc:	f083 0301 	eor.w	r3, r3, #1
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <StepPositionWithCP24Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff fd64 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	6a3a      	ldr	r2, [r7, #32]
 80068e8:	4413      	add	r3, r2
 80068ea:	623b      	str	r3, [r7, #32]
        }

        /* parse VTI (value with transient state indication) */
        self->vti = msg [startIndex++];
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	623a      	str	r2, [r7, #32]
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4413      	add	r3, r2
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) msg [startIndex++];
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	623a      	str	r2, [r7, #32]
 8006904:	461a      	mov	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4413      	add	r3, r2
 800690a:	781a      	ldrb	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	735a      	strb	r2, [r3, #13]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f103 000e 	add.w	r0, r3, #14
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	f7fd fafa 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <DoublePointInformation_encode>:
 * DoublePointInformation
 **********************************************/

static bool
DoublePointInformation_encode(DoublePointInformation self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <DoublePointInformation_encode+0x18>
 800693e:	2301      	movs	r3, #1
 8006940:	e002      	b.n	8006948 <DoublePointInformation_encode+0x1e>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	3301      	adds	r3, #1
 8006948:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f005 fc6a 	bl	800c224 <Frame_getSpaceLeft>
 8006950:	4602      	mov	r2, r0
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	4293      	cmp	r3, r2
 8006956:	dd01      	ble.n	800695c <DoublePointInformation_encode+0x32>
        return false;
 8006958:	2300      	movs	r3, #0
 800695a:	e015      	b.n	8006988 <DoublePointInformation_encode+0x5e>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff fcbd 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t val = (uint8_t) (self->quality & 0xf0);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	7b5b      	ldrb	r3, [r3, #13]
 800696c:	f023 030f 	bic.w	r3, r3, #15
 8006970:	74fb      	strb	r3, [r7, #19]

    val += (int) self->value;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	7b1a      	ldrb	r2, [r3, #12]
 8006976:	7cfb      	ldrb	r3, [r7, #19]
 8006978:	4413      	add	r3, r2
 800697a:	74fb      	strb	r3, [r7, #19]

    Frame_setNextByte(frame, val);
 800697c:	7cfb      	ldrb	r3, [r7, #19]
 800697e:	4619      	mov	r1, r3
 8006980:	68b8      	ldr	r0, [r7, #8]
 8006982:	f005 fc2d 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8006986:	2301      	movs	r3, #1
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <DoublePointInformation_destroy>:
        (DestroyFunction) DoublePointInformation_destroy
};

void
DoublePointInformation_destroy(DoublePointInformation self)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fd fa86 	bl	8003eaa <Memory_free>
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <DoublePointInformation_initialize>:

static void
DoublePointInformation_initialize(DoublePointInformation self)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(doublePointInformationVFT);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a05      	ldr	r2, [pc, #20]	; (80069c8 <DoublePointInformation_initialize+0x20>)
 80069b4:	609a      	str	r2, [r3, #8]
    self->type = M_DP_NA_1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2203      	movs	r2, #3
 80069ba:	711a      	strb	r2, [r3, #4]
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	20000160 	.word	0x20000160

080069cc <DoublePointInformation_getFromBuffer>:
}

DoublePointInformation
DoublePointInformation_getFromBuffer(DoublePointInformation self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 1;
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	3301      	adds	r3, #1
 80069de:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 80069e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069e4:	f083 0301 	eor.w	r3, r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <DoublePointInformation_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4413      	add	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	dd01      	ble.n	8006a04 <DoublePointInformation_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e033      	b.n	8006a6c <DoublePointInformation_getFromBuffer+0xa0>
    }

    if (self == NULL)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <DoublePointInformation_getFromBuffer+0x46>
		self = (DoublePointInformation) GLOBAL_MALLOC(sizeof(struct sDoublePointInformation));
 8006a0a:	2010      	movs	r0, #16
 8006a0c:	f7fd fa3a 	bl	8003e84 <Memory_malloc>
 8006a10:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d028      	beq.n	8006a6a <DoublePointInformation_getFromBuffer+0x9e>
        DoublePointInformation_initialize(self);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff ffc5 	bl	80069a8 <DoublePointInformation_initialize>

        if (!isSequence) {
 8006a1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a22:	f083 0301 	eor.w	r3, r3, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <DoublePointInformation_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff fcb9 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	6a3a      	ldr	r2, [r7, #32]
 8006a3e:	4413      	add	r3, r2
 8006a40:	623b      	str	r3, [r7, #32]
        }

        /* parse DIQ (double point information with quality) */
        uint8_t diq = msg [startIndex++];
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	623a      	str	r2, [r7, #32]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	74fb      	strb	r3, [r7, #19]

        self->value = (DoublePointValue) (diq & 0x03);
 8006a52:	7cfb      	ldrb	r3, [r7, #19]
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) (diq & 0xf0);
 8006a5e:	7cfb      	ldrb	r3, [r7, #19]
 8006a60:	f023 030f 	bic.w	r3, r3, #15
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	735a      	strb	r2, [r3, #13]
    }

    return self;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <DoublePointWithCP24Time2a_encode>:
 * DoublePointWithCP24Time2a
 *******************************************/

static bool
DoublePointWithCP24Time2a_encode(DoublePointWithCP24Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 4 : (parameters->sizeOfIOA + 4);
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <DoublePointWithCP24Time2a_encode+0x18>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	e002      	b.n	8006a92 <DoublePointWithCP24Time2a_encode+0x1e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	3304      	adds	r3, #4
 8006a92:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8006a94:	68b8      	ldr	r0, [r7, #8]
 8006a96:	f005 fbc5 	bl	800c224 <Frame_getSpaceLeft>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	dd01      	ble.n	8006aa6 <DoublePointWithCP24Time2a_encode+0x32>
        return false;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e01c      	b.n	8006ae0 <DoublePointWithCP24Time2a_encode+0x6c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff fc18 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t val = (uint8_t) (self->quality & 0xf0);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	7b5b      	ldrb	r3, [r3, #13]
 8006ab6:	f023 030f 	bic.w	r3, r3, #15
 8006aba:	74fb      	strb	r3, [r7, #19]

    val += (int) self->value;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	7b1a      	ldrb	r2, [r3, #12]
 8006ac0:	7cfb      	ldrb	r3, [r7, #19]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	74fb      	strb	r3, [r7, #19]

    Frame_setNextByte(frame, val);
 8006ac6:	7cfb      	ldrb	r3, [r7, #19]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	68b8      	ldr	r0, [r7, #8]
 8006acc:	f005 fb88 	bl	800c1e0 <Frame_setNextByte>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	330e      	adds	r3, #14
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68b8      	ldr	r0, [r7, #8]
 8006ada:	f005 fb92 	bl	800c202 <Frame_appendBytes>

    return true;
 8006ade:	2301      	movs	r3, #1
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <DoublePointWithCP24Time2a_destroy>:
        (DestroyFunction) DoublePointWithCP24Time2a_destroy
};

void
DoublePointWithCP24Time2a_destroy(DoublePointWithCP24Time2a self)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fd f9da 	bl	8003eaa <Memory_free>
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <DoublePointWithCP24Time2a_initialize>:

static void
DoublePointWithCP24Time2a_initialize(DoublePointWithCP24Time2a self)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(doublePointWithCP24Time2aVFT);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a05      	ldr	r2, [pc, #20]	; (8006b20 <DoublePointWithCP24Time2a_initialize+0x20>)
 8006b0c:	609a      	str	r2, [r3, #8]
    self->type = M_DP_TA_1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2204      	movs	r2, #4
 8006b12:	711a      	strb	r2, [r3, #4]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000168 	.word	0x20000168

08006b24 <DoublePointWithCP24Time2a_getFromBuffer>:
}

DoublePointWithCP24Time2a
DoublePointWithCP24Time2a_getFromBuffer(DoublePointWithCP24Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 4;
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	3304      	adds	r3, #4
 8006b36:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8006b38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b3c:	f083 0301 	eor.w	r3, r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <DoublePointWithCP24Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	dd01      	ble.n	8006b5c <DoublePointWithCP24Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e03b      	b.n	8006bd4 <DoublePointWithCP24Time2a_getFromBuffer+0xb0>
    }

    if (self == NULL)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d103      	bne.n	8006b6a <DoublePointWithCP24Time2a_getFromBuffer+0x46>
		self = (DoublePointWithCP24Time2a) GLOBAL_MALLOC(sizeof(struct sDoublePointWithCP24Time2a));
 8006b62:	2014      	movs	r0, #20
 8006b64:	f7fd f98e 	bl	8003e84 <Memory_malloc>
 8006b68:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d030      	beq.n	8006bd2 <DoublePointWithCP24Time2a_getFromBuffer+0xae>
        DoublePointWithCP24Time2a_initialize(self);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff ffc5 	bl	8006b00 <DoublePointWithCP24Time2a_initialize>

        if (!isSequence) {
 8006b76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b7a:	f083 0301 	eor.w	r3, r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <DoublePointWithCP24Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff fc0d 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	6a3a      	ldr	r2, [r7, #32]
 8006b96:	4413      	add	r3, r2
 8006b98:	623b      	str	r3, [r7, #32]
        }

        /* parse DIQ (double point information with quality) */
        uint8_t diq = msg [startIndex++];
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	623a      	str	r2, [r7, #32]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	74fb      	strb	r3, [r7, #19]

        self->value = (DoublePointValue) (diq & 0x03);
 8006baa:	7cfb      	ldrb	r3, [r7, #19]
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) (diq & 0xf0);
 8006bb6:	7cfb      	ldrb	r3, [r7, #19]
 8006bb8:	f023 030f 	bic.w	r3, r3, #15
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	735a      	strb	r2, [r3, #13]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f103 000e 	add.w	r0, r3, #14
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	f7fd f9a1 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <DoublePointWithCP56Time2a_encode>:
 * DoublePointWithCP56Time2a
 *******************************************/

static bool
DoublePointWithCP56Time2a_encode(DoublePointWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 8 : (parameters->sizeOfIOA + 8);
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <DoublePointWithCP56Time2a_encode+0x18>
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	e002      	b.n	8006bfa <DoublePointWithCP56Time2a_encode+0x1e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8006bfc:	68b8      	ldr	r0, [r7, #8]
 8006bfe:	f005 fb11 	bl	800c224 <Frame_getSpaceLeft>
 8006c02:	4602      	mov	r2, r0
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4293      	cmp	r3, r2
 8006c08:	dd01      	ble.n	8006c0e <DoublePointWithCP56Time2a_encode+0x32>
        return false;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e01c      	b.n	8006c48 <DoublePointWithCP56Time2a_encode+0x6c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fb64 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t val = (uint8_t) (self->quality & 0xf0);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	7b5b      	ldrb	r3, [r3, #13]
 8006c1e:	f023 030f 	bic.w	r3, r3, #15
 8006c22:	74fb      	strb	r3, [r7, #19]

    val += (int) self->value;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	7b1a      	ldrb	r2, [r3, #12]
 8006c28:	7cfb      	ldrb	r3, [r7, #19]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	74fb      	strb	r3, [r7, #19]

    Frame_setNextByte(frame, val);
 8006c2e:	7cfb      	ldrb	r3, [r7, #19]
 8006c30:	4619      	mov	r1, r3
 8006c32:	68b8      	ldr	r0, [r7, #8]
 8006c34:	f005 fad4 	bl	800c1e0 <Frame_setNextByte>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	330e      	adds	r3, #14
 8006c3c:	2207      	movs	r2, #7
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68b8      	ldr	r0, [r7, #8]
 8006c42:	f005 fade 	bl	800c202 <Frame_appendBytes>

    return true;
 8006c46:	2301      	movs	r3, #1
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <DoublePointWithCP56Time2a_destroy>:
        (DestroyFunction) DoublePointWithCP56Time2a_destroy
};

void
DoublePointWithCP56Time2a_destroy(DoublePointWithCP56Time2a self)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fd f926 	bl	8003eaa <Memory_free>
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <DoublePointWithCP56Time2a_initialize>:

static void
DoublePointWithCP56Time2a_initialize(DoublePointWithCP56Time2a self)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(doublePointWithCP56Time2aVFT);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a05      	ldr	r2, [pc, #20]	; (8006c88 <DoublePointWithCP56Time2a_initialize+0x20>)
 8006c74:	609a      	str	r2, [r3, #8]
    self->type = M_DP_TB_1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	221f      	movs	r2, #31
 8006c7a:	711a      	strb	r2, [r3, #4]
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000170 	.word	0x20000170

08006c8c <DoublePointWithCP56Time2a_getFromBuffer>:
}

DoublePointWithCP56Time2a
DoublePointWithCP56Time2a_getFromBuffer(DoublePointWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 8;
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8006ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ca4:	f083 0301 	eor.w	r3, r3, #1
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <DoublePointWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	dd01      	ble.n	8006cc4 <DoublePointWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e03b      	b.n	8006d3c <DoublePointWithCP56Time2a_getFromBuffer+0xb0>
    }

    if (self == NULL)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <DoublePointWithCP56Time2a_getFromBuffer+0x46>
		self = (DoublePointWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sDoublePointWithCP56Time2a));
 8006cca:	2018      	movs	r0, #24
 8006ccc:	f7fd f8da 	bl	8003e84 <Memory_malloc>
 8006cd0:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d030      	beq.n	8006d3a <DoublePointWithCP56Time2a_getFromBuffer+0xae>
        DoublePointWithCP56Time2a_initialize(self);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff ffc5 	bl	8006c68 <DoublePointWithCP56Time2a_initialize>

        if (!isSequence) {
 8006cde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ce2:	f083 0301 	eor.w	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <DoublePointWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f7ff fb59 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	6a3a      	ldr	r2, [r7, #32]
 8006cfe:	4413      	add	r3, r2
 8006d00:	623b      	str	r3, [r7, #32]
        }

        /* parse DIQ (double point information with quality) */
        uint8_t diq = msg [startIndex++];
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	623a      	str	r2, [r7, #32]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	74fb      	strb	r3, [r7, #19]

        self->value = (DoublePointValue) (diq & 0x03);
 8006d12:	7cfb      	ldrb	r3, [r7, #19]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) (diq & 0xf0);
 8006d1e:	7cfb      	ldrb	r3, [r7, #19]
 8006d20:	f023 030f 	bic.w	r3, r3, #15
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	735a      	strb	r2, [r3, #13]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f103 000e 	add.w	r0, r3, #14
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	f7fd f917 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <SinglePointWithCP24Time2a_encode>:
 * SinglePointWithCP24Time2a
 *******************************************/

static bool
SinglePointWithCP24Time2a_encode(SinglePointWithCP24Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 4 : (parameters->sizeOfIOA + 4);
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <SinglePointWithCP24Time2a_encode+0x18>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	e002      	b.n	8006d62 <SinglePointWithCP24Time2a_encode+0x1e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	3304      	adds	r3, #4
 8006d62:	613b      	str	r3, [r7, #16]

    if (Frame_getSpaceLeft(frame) < size)
 8006d64:	68b8      	ldr	r0, [r7, #8]
 8006d66:	f005 fa5d 	bl	800c224 <Frame_getSpaceLeft>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	dd01      	ble.n	8006d76 <SinglePointWithCP24Time2a_encode+0x32>
        return false;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e01e      	b.n	8006db4 <SinglePointWithCP24Time2a_encode+0x70>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fab0 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t val = (uint8_t) (self->quality & 0xf0);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	7b5b      	ldrb	r3, [r3, #13]
 8006d86:	f023 030f 	bic.w	r3, r3, #15
 8006d8a:	75fb      	strb	r3, [r7, #23]

    if (self->value)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7b1b      	ldrb	r3, [r3, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <SinglePointWithCP24Time2a_encode+0x56>
        val++;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	3301      	adds	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]

    Frame_setNextByte(frame, val);
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	68b8      	ldr	r0, [r7, #8]
 8006da0:	f005 fa1e 	bl	800c1e0 <Frame_setNextByte>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	330e      	adds	r3, #14
 8006da8:	2203      	movs	r2, #3
 8006daa:	4619      	mov	r1, r3
 8006dac:	68b8      	ldr	r0, [r7, #8]
 8006dae:	f005 fa28 	bl	800c202 <Frame_appendBytes>

    return true;
 8006db2:	2301      	movs	r3, #1
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <SinglePointWithCP24Time2a_destroy>:
        (DestroyFunction) SinglePointWithCP24Time2a_destroy
};

void
SinglePointWithCP24Time2a_destroy(SinglePointWithCP24Time2a self)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fd f870 	bl	8003eaa <Memory_free>
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <SinglePointWithCP24Time2a_initialize>:

static void
SinglePointWithCP24Time2a_initialize(SinglePointWithCP24Time2a self)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(singlePointWithCP24Time2aVFT);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a05      	ldr	r2, [pc, #20]	; (8006df4 <SinglePointWithCP24Time2a_initialize+0x20>)
 8006de0:	609a      	str	r2, [r3, #8]
    self->type = M_SP_TA_1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	711a      	strb	r2, [r3, #4]
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	20000178 	.word	0x20000178

08006df8 <SinglePointWithCP24Time2a_getFromBuffer>:
}

SinglePointWithCP24Time2a
SinglePointWithCP24Time2a_getFromBuffer(SinglePointWithCP24Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 4;
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8006e0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e10:	f083 0301 	eor.w	r3, r3, #1
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <SinglePointWithCP24Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4413      	add	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	dd01      	ble.n	8006e30 <SinglePointWithCP24Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e03f      	b.n	8006eb0 <SinglePointWithCP24Time2a_getFromBuffer+0xb8>
    }

    if (self == NULL)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <SinglePointWithCP24Time2a_getFromBuffer+0x46>
		self = (SinglePointWithCP24Time2a) GLOBAL_MALLOC(sizeof(struct sSinglePointWithCP24Time2a));
 8006e36:	2014      	movs	r0, #20
 8006e38:	f7fd f824 	bl	8003e84 <Memory_malloc>
 8006e3c:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d034      	beq.n	8006eae <SinglePointWithCP24Time2a_getFromBuffer+0xb6>
        SinglePointWithCP24Time2a_initialize(self);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7ff ffc5 	bl	8006dd4 <SinglePointWithCP24Time2a_initialize>

        if (!isSequence) {
 8006e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e4e:	f083 0301 	eor.w	r3, r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <SinglePointWithCP24Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff faa3 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	6a3a      	ldr	r2, [r7, #32]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	623b      	str	r3, [r7, #32]
        }

        /* parse SIQ (single point information with qualitiy) */
        uint8_t siq = msg [startIndex++];
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	623a      	str	r2, [r7, #32]
 8006e74:	461a      	mov	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	74fb      	strb	r3, [r7, #19]

        self->value = ((siq & 0x01) == 0x01);
 8006e7e:	7cfb      	ldrb	r3, [r7, #19]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) (siq & 0xf0);
 8006e92:	7cfb      	ldrb	r3, [r7, #19]
 8006e94:	f023 030f 	bic.w	r3, r3, #15
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	735a      	strb	r2, [r3, #13]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f103 000e 	add.w	r0, r3, #14
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	f7fd f833 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 8006eae:	68fb      	ldr	r3, [r7, #12]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SinglePointWithCP56Time2a_encode>:
 * SinglePointWithCP56Time2a
 *******************************************/

static bool
SinglePointWithCP56Time2a_encode(SinglePointWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 8 : (parameters->sizeOfIOA + 8);
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <SinglePointWithCP56Time2a_encode+0x18>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	e002      	b.n	8006ed6 <SinglePointWithCP56Time2a_encode+0x1e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	613b      	str	r3, [r7, #16]

    if (Frame_getSpaceLeft(frame) < size)
 8006ed8:	68b8      	ldr	r0, [r7, #8]
 8006eda:	f005 f9a3 	bl	800c224 <Frame_getSpaceLeft>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	dd01      	ble.n	8006eea <SinglePointWithCP56Time2a_encode+0x32>
        return false;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e01e      	b.n	8006f28 <SinglePointWithCP56Time2a_encode+0x70>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7ff f9f6 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t val = (uint8_t) (self->quality & 0xf0);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	7b5b      	ldrb	r3, [r3, #13]
 8006efa:	f023 030f 	bic.w	r3, r3, #15
 8006efe:	75fb      	strb	r3, [r7, #23]

    if (self->value)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	7b1b      	ldrb	r3, [r3, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <SinglePointWithCP56Time2a_encode+0x56>
        val++;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]

    Frame_setNextByte(frame, val);
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	4619      	mov	r1, r3
 8006f12:	68b8      	ldr	r0, [r7, #8]
 8006f14:	f005 f964 	bl	800c1e0 <Frame_setNextByte>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	330e      	adds	r3, #14
 8006f1c:	2207      	movs	r2, #7
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68b8      	ldr	r0, [r7, #8]
 8006f22:	f005 f96e 	bl	800c202 <Frame_appendBytes>

    return true;
 8006f26:	2301      	movs	r3, #1
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <SinglePointWithCP56Time2a_initialize>:
        (DestroyFunction) SinglePointWithCP56Time2a_destroy
};

static void
SinglePointWithCP56Time2a_initialize(SinglePointWithCP56Time2a self)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(singlePointWithCP56Time2aVFT);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a05      	ldr	r2, [pc, #20]	; (8006f50 <SinglePointWithCP56Time2a_initialize+0x20>)
 8006f3c:	609a      	str	r2, [r3, #8]
    self->type = M_SP_TB_1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	221e      	movs	r2, #30
 8006f42:	711a      	strb	r2, [r3, #4]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	20000180 	.word	0x20000180

08006f54 <SinglePointWithCP56Time2a_destroy>:
    return self;
}

void
SinglePointWithCP56Time2a_destroy(SinglePointWithCP56Time2a self)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7fc ffa4 	bl	8003eaa <Memory_free>
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <SinglePointWithCP56Time2a_getFromBuffer>:


SinglePointWithCP56Time2a
SinglePointWithCP56Time2a_getFromBuffer(SinglePointWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b086      	sub	sp, #24
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
 8006f76:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 8;
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8006f7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f82:	f083 0301 	eor.w	r3, r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <SinglePointWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4413      	add	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	dd01      	ble.n	8006fa2 <SinglePointWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e03f      	b.n	8007022 <SinglePointWithCP56Time2a_getFromBuffer+0xb8>
    }

    if (self == NULL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <SinglePointWithCP56Time2a_getFromBuffer+0x46>
		self = (SinglePointWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sSinglePointWithCP56Time2a));
 8006fa8:	2018      	movs	r0, #24
 8006faa:	f7fc ff6b 	bl	8003e84 <Memory_malloc>
 8006fae:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d034      	beq.n	8007020 <SinglePointWithCP56Time2a_getFromBuffer+0xb6>
        SinglePointWithCP56Time2a_initialize(self);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff ffba 	bl	8006f30 <SinglePointWithCP56Time2a_initialize>

        if (!isSequence) {
 8006fbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006fc0:	f083 0301 	eor.w	r3, r3, #1
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <SinglePointWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7ff f9ea 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	6a3a      	ldr	r2, [r7, #32]
 8006fdc:	4413      	add	r3, r2
 8006fde:	623b      	str	r3, [r7, #32]
        }

        /* parse SIQ (single point information with qualitiy) */
        uint8_t siq = msg [startIndex++];
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	623a      	str	r2, [r7, #32]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	74fb      	strb	r3, [r7, #19]

        self->value = ((siq & 0x01) == 0x01);
 8006ff0:	7cfb      	ldrb	r3, [r7, #19]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf14      	ite	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	731a      	strb	r2, [r3, #12]

        self->quality = (QualityDescriptor) (siq & 0xf0);
 8007004:	7cfb      	ldrb	r3, [r7, #19]
 8007006:	f023 030f 	bic.w	r3, r3, #15
 800700a:	b2da      	uxtb	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	735a      	strb	r2, [r3, #13]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f103 000e 	add.w	r0, r3, #14
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	f7fc ffa4 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 8007020:	68fb      	ldr	r3, [r7, #12]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <BitString32_encode>:
 * BitString32
 **********************************************/

static bool
BitString32_encode(BitString32 self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b086      	sub	sp, #24
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 5 : (parameters->sizeOfIOA + 5);
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <BitString32_encode+0x18>
 800703e:	2305      	movs	r3, #5
 8007040:	e002      	b.n	8007048 <BitString32_encode+0x1e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	3305      	adds	r3, #5
 8007048:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800704a:	68b8      	ldr	r0, [r7, #8]
 800704c:	f005 f8ea 	bl	800c224 <Frame_getSpaceLeft>
 8007050:	4602      	mov	r2, r0
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4293      	cmp	r3, r2
 8007056:	dd01      	ble.n	800705c <BitString32_encode+0x32>
        return false;
 8007058:	2300      	movs	r3, #0
 800705a:	e02a      	b.n	80070b2 <BitString32_encode+0x88>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f7ff f93d 	bl	80062e2 <InformationObject_encodeBase>

    uint32_t value = self->value;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	613b      	str	r3, [r7, #16]

    Frame_setNextByte(frame, (uint8_t) (value % 0x100));
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	4619      	mov	r1, r3
 8007074:	68b8      	ldr	r0, [r7, #8]
 8007076:	f005 f8b3 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) ((value / 0x100) % 0x100));
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	0a1b      	lsrs	r3, r3, #8
 800707e:	b2db      	uxtb	r3, r3
 8007080:	4619      	mov	r1, r3
 8007082:	68b8      	ldr	r0, [r7, #8]
 8007084:	f005 f8ac 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) ((value / 0x10000) % 0x100));
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	0c1b      	lsrs	r3, r3, #16
 800708c:	b2db      	uxtb	r3, r3
 800708e:	4619      	mov	r1, r3
 8007090:	68b8      	ldr	r0, [r7, #8]
 8007092:	f005 f8a5 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) (value / 0x1000000));
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	0e1b      	lsrs	r3, r3, #24
 800709a:	b2db      	uxtb	r3, r3
 800709c:	4619      	mov	r1, r3
 800709e:	68b8      	ldr	r0, [r7, #8]
 80070a0:	f005 f89e 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->quality);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	7c1b      	ldrb	r3, [r3, #16]
 80070a8:	4619      	mov	r1, r3
 80070aa:	68b8      	ldr	r0, [r7, #8]
 80070ac:	f005 f898 	bl	800c1e0 <Frame_setNextByte>

    return true;
 80070b0:	2301      	movs	r3, #1
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <BitString32_initialize>:
        (DestroyFunction) BitString32_destroy
};

static void
BitString32_initialize(BitString32 self)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(bitString32VFT);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a05      	ldr	r2, [pc, #20]	; (80070dc <BitString32_initialize+0x20>)
 80070c8:	609a      	str	r2, [r3, #8]
    self->type = M_BO_NA_1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2207      	movs	r2, #7
 80070ce:	711a      	strb	r2, [r3, #4]
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	20000188 	.word	0x20000188

080070e0 <BitString32_destroy>:

void
BitString32_destroy(BitString32 self)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fc fede 	bl	8003eaa <Memory_free>
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <BitString32_getFromBuffer>:
}

BitString32
BitString32_getFromBuffer(BitString32 self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b086      	sub	sp, #24
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 5;
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	3305      	adds	r3, #5
 8007108:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800710a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800710e:	f083 0301 	eor.w	r3, r3, #1
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <BitString32_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	dd01      	ble.n	800712e <BitString32_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	e054      	b.n	80071d8 <BitString32_getFromBuffer+0xe2>
    }

    if (self == NULL)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <BitString32_getFromBuffer+0x46>
		self = (BitString32) GLOBAL_MALLOC(sizeof(struct sBitString32));
 8007134:	2014      	movs	r0, #20
 8007136:	f7fc fea5 	bl	8003e84 <Memory_malloc>
 800713a:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d049      	beq.n	80071d6 <BitString32_getFromBuffer+0xe0>
        BitString32_initialize(self);
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7ff ffba 	bl	80070bc <BitString32_initialize>

        if (!isSequence) {
 8007148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800714c:	f083 0301 	eor.w	r3, r3, #1
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <BitString32_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff f924 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	4413      	add	r3, r2
 800716a:	623b      	str	r3, [r7, #32]
        }

        uint32_t value;

        value = msg [startIndex++];
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	623a      	str	r2, [r7, #32]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x100);
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	623a      	str	r2, [r7, #32]
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4413      	add	r3, r2
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4413      	add	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x10000);
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	623a      	str	r2, [r7, #32]
 8007198:	461a      	mov	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	041b      	lsls	r3, r3, #16
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4413      	add	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x1000000);
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	623a      	str	r2, [r7, #32]
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4413      	add	r3, r2
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	061b      	lsls	r3, r3, #24
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4413      	add	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
        self->value = value;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	60da      	str	r2, [r3, #12]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	623a      	str	r2, [r7, #32]
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4413      	add	r3, r2
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	741a      	strb	r2, [r3, #16]
    }

    return self;
 80071d6:	68fb      	ldr	r3, [r7, #12]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <Bitstring32WithCP24Time2a_encode>:
 * Bitstring32WithCP24Time2a
 **********************************************/

static bool
Bitstring32WithCP24Time2a_encode(Bitstring32WithCP24Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 8 : (parameters->sizeOfIOA + 8);
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <Bitstring32WithCP24Time2a_encode+0x18>
 80071f4:	2308      	movs	r3, #8
 80071f6:	e002      	b.n	80071fe <Bitstring32WithCP24Time2a_encode+0x1e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	3308      	adds	r3, #8
 80071fe:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8007200:	68b8      	ldr	r0, [r7, #8]
 8007202:	f005 f80f 	bl	800c224 <Frame_getSpaceLeft>
 8007206:	4602      	mov	r2, r0
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4293      	cmp	r3, r2
 800720c:	dd01      	ble.n	8007212 <Bitstring32WithCP24Time2a_encode+0x32>
        return false;
 800720e:	2300      	movs	r3, #0
 8007210:	e031      	b.n	8007276 <Bitstring32WithCP24Time2a_encode+0x96>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff f862 	bl	80062e2 <InformationObject_encodeBase>

    uint32_t  value = self->value;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	613b      	str	r3, [r7, #16]

    Frame_setNextByte(frame, (uint8_t) (value % 0x100));
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	4619      	mov	r1, r3
 800722a:	68b8      	ldr	r0, [r7, #8]
 800722c:	f004 ffd8 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) ((value / 0x100) % 0x100));
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	b2db      	uxtb	r3, r3
 8007236:	4619      	mov	r1, r3
 8007238:	68b8      	ldr	r0, [r7, #8]
 800723a:	f004 ffd1 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) ((value / 0x10000) % 0x100));
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	0c1b      	lsrs	r3, r3, #16
 8007242:	b2db      	uxtb	r3, r3
 8007244:	4619      	mov	r1, r3
 8007246:	68b8      	ldr	r0, [r7, #8]
 8007248:	f004 ffca 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) (value / 0x1000000));
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	0e1b      	lsrs	r3, r3, #24
 8007250:	b2db      	uxtb	r3, r3
 8007252:	4619      	mov	r1, r3
 8007254:	68b8      	ldr	r0, [r7, #8]
 8007256:	f004 ffc3 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->quality);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	7c1b      	ldrb	r3, [r3, #16]
 800725e:	4619      	mov	r1, r3
 8007260:	68b8      	ldr	r0, [r7, #8]
 8007262:	f004 ffbd 	bl	800c1e0 <Frame_setNextByte>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3311      	adds	r3, #17
 800726a:	2203      	movs	r2, #3
 800726c:	4619      	mov	r1, r3
 800726e:	68b8      	ldr	r0, [r7, #8]
 8007270:	f004 ffc7 	bl	800c202 <Frame_appendBytes>

    return true;
 8007274:	2301      	movs	r3, #1
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <Bitstring32WithCP24Time2a_initialize>:
        (DestroyFunction) Bitstring32WithCP24Time2a_destroy
};

static void
Bitstring32WithCP24Time2a_initialize(Bitstring32WithCP24Time2a self)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(bitstring32WithCP24Time2aVFT);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a05      	ldr	r2, [pc, #20]	; (80072a0 <Bitstring32WithCP24Time2a_initialize+0x20>)
 800728c:	609a      	str	r2, [r3, #8]
    self->type = M_BO_TA_1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2208      	movs	r2, #8
 8007292:	711a      	strb	r2, [r3, #4]
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	20000190 	.word	0x20000190

080072a4 <Bitstring32WithCP24Time2a_destroy>:

void
Bitstring32WithCP24Time2a_destroy(Bitstring32WithCP24Time2a self)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fc fdfc 	bl	8003eaa <Memory_free>
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <Bitstring32WithCP24Time2a_getFromBuffer>:
}

Bitstring32WithCP24Time2a
Bitstring32WithCP24Time2a_getFromBuffer(Bitstring32WithCP24Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b086      	sub	sp, #24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
 80072c6:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 8;
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	3308      	adds	r3, #8
 80072cc:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 80072ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072d2:	f083 0301 	eor.w	r3, r3, #1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <Bitstring32WithCP24Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4413      	add	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	dd01      	ble.n	80072f2 <Bitstring32WithCP24Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e05c      	b.n	80073ac <Bitstring32WithCP24Time2a_getFromBuffer+0xf2>
    }

    if (self == NULL)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <Bitstring32WithCP24Time2a_getFromBuffer+0x46>
		self = (Bitstring32WithCP24Time2a) GLOBAL_MALLOC(sizeof(struct sBitstring32WithCP24Time2a));
 80072f8:	2014      	movs	r0, #20
 80072fa:	f7fc fdc3 	bl	8003e84 <Memory_malloc>
 80072fe:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d051      	beq.n	80073aa <Bitstring32WithCP24Time2a_getFromBuffer+0xf0>
        Bitstring32WithCP24Time2a_initialize(self);
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff ffba 	bl	8007280 <Bitstring32WithCP24Time2a_initialize>

        if (!isSequence) {
 800730c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007310:	f083 0301 	eor.w	r3, r3, #1
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <Bitstring32WithCP24Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff f842 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	4413      	add	r3, r2
 800732e:	623b      	str	r3, [r7, #32]
        }

        uint32_t value;

        value = msg [startIndex++];
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	623a      	str	r2, [r7, #32]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4413      	add	r3, r2
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x100);
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	623a      	str	r2, [r7, #32]
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4413      	add	r3, r2
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x10000);
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	623a      	str	r2, [r7, #32]
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4413      	add	r3, r2
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	041b      	lsls	r3, r3, #16
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4413      	add	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x1000000);
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	623a      	str	r2, [r7, #32]
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	061b      	lsls	r3, r3, #24
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4413      	add	r3, r2
 8007380:	613b      	str	r3, [r7, #16]
        self->value = value;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	60da      	str	r2, [r3, #12]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	623a      	str	r2, [r7, #32]
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4413      	add	r3, r2
 8007394:	781a      	ldrb	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	741a      	strb	r2, [r3, #16]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f103 0011 	add.w	r0, r3, #17
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	f7fc fdb5 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 80073aa:	68fb      	ldr	r3, [r7, #12]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <Bitstring32WithCP56Time2a_encode>:
 * Bitstring32WithCP56Time2a
 **********************************************/

static bool
Bitstring32WithCP56Time2a_encode(Bitstring32WithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 12 : (parameters->sizeOfIOA + 12);
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <Bitstring32WithCP56Time2a_encode+0x18>
 80073c8:	230c      	movs	r3, #12
 80073ca:	e002      	b.n	80073d2 <Bitstring32WithCP56Time2a_encode+0x1e>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	330c      	adds	r3, #12
 80073d2:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80073d4:	68b8      	ldr	r0, [r7, #8]
 80073d6:	f004 ff25 	bl	800c224 <Frame_getSpaceLeft>
 80073da:	4602      	mov	r2, r0
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4293      	cmp	r3, r2
 80073e0:	dd01      	ble.n	80073e6 <Bitstring32WithCP56Time2a_encode+0x32>
        return false;
 80073e2:	2300      	movs	r3, #0
 80073e4:	e031      	b.n	800744a <Bitstring32WithCP56Time2a_encode+0x96>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7fe ff78 	bl	80062e2 <InformationObject_encodeBase>

    uint32_t  value = self->value;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	613b      	str	r3, [r7, #16]

    Frame_setNextByte(frame, (uint8_t) (value % 0x100));
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	68b8      	ldr	r0, [r7, #8]
 8007400:	f004 feee 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) ((value / 0x100) % 0x100));
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b2db      	uxtb	r3, r3
 800740a:	4619      	mov	r1, r3
 800740c:	68b8      	ldr	r0, [r7, #8]
 800740e:	f004 fee7 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) ((value / 0x10000) % 0x100));
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	b2db      	uxtb	r3, r3
 8007418:	4619      	mov	r1, r3
 800741a:	68b8      	ldr	r0, [r7, #8]
 800741c:	f004 fee0 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, (uint8_t) (value / 0x1000000));
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	0e1b      	lsrs	r3, r3, #24
 8007424:	b2db      	uxtb	r3, r3
 8007426:	4619      	mov	r1, r3
 8007428:	68b8      	ldr	r0, [r7, #8]
 800742a:	f004 fed9 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->quality);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	7c1b      	ldrb	r3, [r3, #16]
 8007432:	4619      	mov	r1, r3
 8007434:	68b8      	ldr	r0, [r7, #8]
 8007436:	f004 fed3 	bl	800c1e0 <Frame_setNextByte>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3311      	adds	r3, #17
 800743e:	2207      	movs	r2, #7
 8007440:	4619      	mov	r1, r3
 8007442:	68b8      	ldr	r0, [r7, #8]
 8007444:	f004 fedd 	bl	800c202 <Frame_appendBytes>

    return true;
 8007448:	2301      	movs	r3, #1
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <Bitstring32WithCP56Time2a_initialize>:
        (DestroyFunction) Bitstring32WithCP56Time2a_destroy
};

static void
Bitstring32WithCP56Time2a_initialize(Bitstring32WithCP56Time2a self)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(bitstring32WithCP56Time2aVFT);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a05      	ldr	r2, [pc, #20]	; (8007474 <Bitstring32WithCP56Time2a_initialize+0x20>)
 8007460:	609a      	str	r2, [r3, #8]
    self->type = M_BO_TB_1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2221      	movs	r2, #33	; 0x21
 8007466:	711a      	strb	r2, [r3, #4]
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	20000198 	.word	0x20000198

08007478 <Bitstring32WithCP56Time2a_destroy>:

void
Bitstring32WithCP56Time2a_destroy(Bitstring32WithCP56Time2a self)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fc fd12 	bl	8003eaa <Memory_free>
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <Bitstring32WithCP56Time2a_getFromBuffer>:
}

Bitstring32WithCP56Time2a
Bitstring32WithCP56Time2a_getFromBuffer(Bitstring32WithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b086      	sub	sp, #24
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 12;
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	330c      	adds	r3, #12
 80074a0:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 80074a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074a6:	f083 0301 	eor.w	r3, r3, #1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <Bitstring32WithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4413      	add	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	dd01      	ble.n	80074c6 <Bitstring32WithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e05c      	b.n	8007580 <Bitstring32WithCP56Time2a_getFromBuffer+0xf2>
    }

    if (self == NULL)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d103      	bne.n	80074d4 <Bitstring32WithCP56Time2a_getFromBuffer+0x46>
		self = (Bitstring32WithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sBitstring32WithCP56Time2a));
 80074cc:	2018      	movs	r0, #24
 80074ce:	f7fc fcd9 	bl	8003e84 <Memory_malloc>
 80074d2:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d051      	beq.n	800757e <Bitstring32WithCP56Time2a_getFromBuffer+0xf0>
        Bitstring32WithCP56Time2a_initialize(self);
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff ffba 	bl	8007454 <Bitstring32WithCP56Time2a_initialize>

        if (!isSequence) {
 80074e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074e4:	f083 0301 	eor.w	r3, r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <Bitstring32WithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7fe ff58 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	6a3a      	ldr	r2, [r7, #32]
 8007500:	4413      	add	r3, r2
 8007502:	623b      	str	r3, [r7, #32]
        }

        uint32_t value;

        value = msg [startIndex++];
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	623a      	str	r2, [r7, #32]
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4413      	add	r3, r2
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x100);
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	623a      	str	r2, [r7, #32]
 800751a:	461a      	mov	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4413      	add	r3, r2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4413      	add	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x10000);
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	623a      	str	r2, [r7, #32]
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4413      	add	r3, r2
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4413      	add	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
        value += ((uint32_t)msg [startIndex++] * 0x1000000);
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	623a      	str	r2, [r7, #32]
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	061b      	lsls	r3, r3, #24
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4413      	add	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
        self->value = value;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	60da      	str	r2, [r3, #12]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	623a      	str	r2, [r7, #32]
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4413      	add	r3, r2
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	741a      	strb	r2, [r3, #16]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f103 0011 	add.w	r0, r3, #17
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	f7fc fcf5 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800757e:	68fb      	ldr	r3, [r7, #12]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <getScaledValue>:
 * MeasuredValueNormalized
 **********************************************/

static int
getScaledValue(uint8_t* encodedValue)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
    int value;

    value = encodedValue[0];
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
    value += (encodedValue[1] * 0x100);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3301      	adds	r3, #1
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]

    if (value > 32767)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075aa:	db03      	blt.n	80075b4 <getScaledValue+0x2c>
        value = value - 65536;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80075b2:	60fb      	str	r3, [r7, #12]

    return value;
 80075b4:	68fb      	ldr	r3, [r7, #12]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <MeasuredValueNormalized_encode>:
    encodedValue[1] = (uint8_t) (valueToEncode / 256);
}

static bool
MeasuredValueNormalized_encode(MeasuredValueNormalized self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 3 : (parameters->sizeOfIOA + 3);
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <MeasuredValueNormalized_encode+0x18>
 80075d6:	2303      	movs	r3, #3
 80075d8:	e002      	b.n	80075e0 <MeasuredValueNormalized_encode+0x1e>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	3303      	adds	r3, #3
 80075e0:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80075e2:	68b8      	ldr	r0, [r7, #8]
 80075e4:	f004 fe1e 	bl	800c224 <Frame_getSpaceLeft>
 80075e8:	4602      	mov	r2, r0
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	4293      	cmp	r3, r2
 80075ee:	dd01      	ble.n	80075f4 <MeasuredValueNormalized_encode+0x32>
        return false;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e018      	b.n	8007626 <MeasuredValueNormalized_encode+0x64>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7fe fe71 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->encodedValue[0]);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	7b1b      	ldrb	r3, [r3, #12]
 8007604:	4619      	mov	r1, r3
 8007606:	68b8      	ldr	r0, [r7, #8]
 8007608:	f004 fdea 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, self->encodedValue[1]);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	7b5b      	ldrb	r3, [r3, #13]
 8007610:	4619      	mov	r1, r3
 8007612:	68b8      	ldr	r0, [r7, #8]
 8007614:	f004 fde4 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->quality);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	7b9b      	ldrb	r3, [r3, #14]
 800761c:	4619      	mov	r1, r3
 800761e:	68b8      	ldr	r0, [r7, #8]
 8007620:	f004 fdde 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8007624:	2301      	movs	r3, #1
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <MeasuredValueNormalized_initialize>:
        (DestroyFunction) MeasuredValueNormalized_destroy
};

static void
MeasuredValueNormalized_initialize(MeasuredValueNormalized self)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueNormalizedVFT);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a05      	ldr	r2, [pc, #20]	; (8007650 <MeasuredValueNormalized_initialize+0x20>)
 800763c:	609a      	str	r2, [r3, #8]
    self->type = M_ME_NA_1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2209      	movs	r2, #9
 8007642:	711a      	strb	r2, [r3, #4]
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	200001a0 	.word	0x200001a0

08007654 <MeasuredValueNormalized_destroy>:

void
MeasuredValueNormalized_destroy(MeasuredValueNormalized self)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fc fc24 	bl	8003eaa <Memory_free>
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <MeasuredValueNormalized_getFromBuffer>:
}

MeasuredValueNormalized
MeasuredValueNormalized_getFromBuffer(MeasuredValueNormalized self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 3;
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	3303      	adds	r3, #3
 800767c:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800767e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007682:	f083 0301 	eor.w	r3, r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <MeasuredValueNormalized_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4413      	add	r3, r2
 8007694:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	dd01      	ble.n	80076a2 <MeasuredValueNormalized_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	e03a      	b.n	8007718 <MeasuredValueNormalized_getFromBuffer+0xae>
    }

    if (self == NULL)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <MeasuredValueNormalized_getFromBuffer+0x46>
		self = (MeasuredValueNormalized) GLOBAL_MALLOC(sizeof(struct sMeasuredValueNormalized));
 80076a8:	2010      	movs	r0, #16
 80076aa:	f7fc fbeb 	bl	8003e84 <Memory_malloc>
 80076ae:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d02f      	beq.n	8007716 <MeasuredValueNormalized_getFromBuffer+0xac>
        MeasuredValueNormalized_initialize(self);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff ffba 	bl	8007630 <MeasuredValueNormalized_initialize>

        if (!isSequence) {
 80076bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076c0:	f083 0301 	eor.w	r3, r3, #1
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <MeasuredValueNormalized_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f7fe fe6a 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	4413      	add	r3, r2
 80076de:	623b      	str	r3, [r7, #32]
        }

        self->encodedValue[0] = msg [startIndex++];
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	623a      	str	r2, [r7, #32]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4413      	add	r3, r2
 80076ec:	781a      	ldrb	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg [startIndex++];
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	623a      	str	r2, [r7, #32]
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	735a      	strb	r2, [r3, #13]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	623a      	str	r2, [r7, #32]
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4413      	add	r3, r2
 8007710:	781a      	ldrb	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	739a      	strb	r2, [r3, #14]
    }

    return self;
 8007716:	68fb      	ldr	r3, [r7, #12]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <ParameterNormalizedValue_getFromBuffer>:
}

ParameterNormalizedValue
ParameterNormalizedValue_getFromBuffer(ParameterNormalizedValue self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af02      	add	r7, sp, #8
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
    MeasuredValueNormalized pvn =
            MeasuredValueNormalized_getFromBuffer(self, parameters, msg, msgSize, startIndex, false);
 800772e:	2300      	movs	r3, #0
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f7ff ff94 	bl	800766a <MeasuredValueNormalized_getFromBuffer>
 8007742:	6178      	str	r0, [r7, #20]

    if (pvn)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <ParameterNormalizedValue_getFromBuffer+0x30>
        pvn->type = P_ME_NA_1;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	226e      	movs	r2, #110	; 0x6e
 800774e:	711a      	strb	r2, [r3, #4]

    return (ParameterNormalizedValue) pvn;
 8007750:	697b      	ldr	r3, [r7, #20]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <MeasuredValueNormalizedWithoutQuality_encode>:
 * MeasuredValueNormalizedWithoutQuality : InformationObject
 *************************************************************/

static bool
MeasuredValueNormalizedWithoutQuality_encode(MeasuredValueNormalizedWithoutQuality self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
 8007766:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 2 : (parameters->sizeOfIOA + 2);
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <MeasuredValueNormalizedWithoutQuality_encode+0x18>
 800776e:	2302      	movs	r3, #2
 8007770:	e002      	b.n	8007778 <MeasuredValueNormalizedWithoutQuality_encode+0x1e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	3302      	adds	r3, #2
 8007778:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800777a:	68b8      	ldr	r0, [r7, #8]
 800777c:	f004 fd52 	bl	800c224 <Frame_getSpaceLeft>
 8007780:	4602      	mov	r2, r0
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	4293      	cmp	r3, r2
 8007786:	dd01      	ble.n	800778c <MeasuredValueNormalizedWithoutQuality_encode+0x32>
        return false;
 8007788:	2300      	movs	r3, #0
 800778a:	e012      	b.n	80077b2 <MeasuredValueNormalizedWithoutQuality_encode+0x58>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7fe fda5 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->encodedValue[0]);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	7b1b      	ldrb	r3, [r3, #12]
 800779c:	4619      	mov	r1, r3
 800779e:	68b8      	ldr	r0, [r7, #8]
 80077a0:	f004 fd1e 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, self->encodedValue[1]);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	7b5b      	ldrb	r3, [r3, #13]
 80077a8:	4619      	mov	r1, r3
 80077aa:	68b8      	ldr	r0, [r7, #8]
 80077ac:	f004 fd18 	bl	800c1e0 <Frame_setNextByte>

    return true;
 80077b0:	2301      	movs	r3, #1
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <MeasuredValueNormalizedWithoutQuality_initialize>:
        (DestroyFunction) MeasuredValueNormalizedWithoutQuality_destroy
};

static void
MeasuredValueNormalizedWithoutQuality_initialize(MeasuredValueNormalizedWithoutQuality self)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueNormalizedWithoutQualityVFT);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a05      	ldr	r2, [pc, #20]	; (80077dc <MeasuredValueNormalizedWithoutQuality_initialize+0x20>)
 80077c8:	609a      	str	r2, [r3, #8]
    self->type = M_ME_ND_1;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2215      	movs	r2, #21
 80077ce:	711a      	strb	r2, [r3, #4]
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	200001a8 	.word	0x200001a8

080077e0 <MeasuredValueNormalizedWithoutQuality_destroy>:

void
MeasuredValueNormalizedWithoutQuality_destroy(MeasuredValueNormalizedWithoutQuality self)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fc fb5e 	bl	8003eaa <Memory_free>
}
 80077ee:	bf00      	nop
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <MeasuredValueNormalizedWithoutQuality_getFromBuffer>:
}

MeasuredValueNormalizedWithoutQuality
MeasuredValueNormalizedWithoutQuality_getFromBuffer(MeasuredValueNormalizedWithoutQuality self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b086      	sub	sp, #24
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
 8007802:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 2;
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	3302      	adds	r3, #2
 8007808:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800780a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800780e:	f083 0301 	eor.w	r3, r3, #1
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <MeasuredValueNormalizedWithoutQuality_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4413      	add	r3, r2
 8007820:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	dd01      	ble.n	800782e <MeasuredValueNormalizedWithoutQuality_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	e031      	b.n	8007892 <MeasuredValueNormalizedWithoutQuality_getFromBuffer+0x9c>
    }

    if (self == NULL)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d103      	bne.n	800783c <MeasuredValueNormalizedWithoutQuality_getFromBuffer+0x46>
        self = (MeasuredValueNormalizedWithoutQuality) GLOBAL_MALLOC(sizeof(struct sMeasuredValueNormalizedWithoutQuality));
 8007834:	2010      	movs	r0, #16
 8007836:	f7fc fb25 	bl	8003e84 <Memory_malloc>
 800783a:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d026      	beq.n	8007890 <MeasuredValueNormalizedWithoutQuality_getFromBuffer+0x9a>
        MeasuredValueNormalizedWithoutQuality_initialize(self);
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7ff ffba 	bl	80077bc <MeasuredValueNormalizedWithoutQuality_initialize>

        if (!isSequence) {
 8007848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800784c:	f083 0301 	eor.w	r3, r3, #1
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <MeasuredValueNormalizedWithoutQuality_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7fe fda4 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	6a3a      	ldr	r2, [r7, #32]
 8007868:	4413      	add	r3, r2
 800786a:	623b      	str	r3, [r7, #32]
        }

        self->encodedValue[0] = msg [startIndex++];
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	623a      	str	r2, [r7, #32]
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4413      	add	r3, r2
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg [startIndex++];
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	623a      	str	r2, [r7, #32]
 8007884:	461a      	mov	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	735a      	strb	r2, [r3, #13]
    }

    return self;
 8007890:	68fb      	ldr	r3, [r7, #12]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <MeasuredValueNormalizedWithCP24Time2a_encode>:
 * MeasuredValueNormalizedWithCP24Time2a : MeasuredValueNormalized
 ***********************************************************************/

static bool
MeasuredValueNormalizedWithCP24Time2a_encode(MeasuredValueNormalizedWithCP24Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b086      	sub	sp, #24
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	607a      	str	r2, [r7, #4]
 80078a6:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 6 : (parameters->sizeOfIOA + 6);
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <MeasuredValueNormalizedWithCP24Time2a_encode+0x18>
 80078ae:	2306      	movs	r3, #6
 80078b0:	e002      	b.n	80078b8 <MeasuredValueNormalizedWithCP24Time2a_encode+0x1e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	3306      	adds	r3, #6
 80078b8:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80078ba:	68b8      	ldr	r0, [r7, #8]
 80078bc:	f004 fcb2 	bl	800c224 <Frame_getSpaceLeft>
 80078c0:	4602      	mov	r2, r0
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	4293      	cmp	r3, r2
 80078c6:	dd01      	ble.n	80078cc <MeasuredValueNormalizedWithCP24Time2a_encode+0x32>
        return false;
 80078c8:	2300      	movs	r3, #0
 80078ca:	e00d      	b.n	80078e8 <MeasuredValueNormalizedWithCP24Time2a_encode+0x4e>

    MeasuredValueNormalized_encode((MeasuredValueNormalized) self, frame, parameters, isSequence);
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff fe75 	bl	80075c2 <MeasuredValueNormalized_encode>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	330f      	adds	r3, #15
 80078dc:	2203      	movs	r2, #3
 80078de:	4619      	mov	r1, r3
 80078e0:	68b8      	ldr	r0, [r7, #8]
 80078e2:	f004 fc8e 	bl	800c202 <Frame_appendBytes>

    return true;
 80078e6:	2301      	movs	r3, #1
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <MeasuredValueNormalizedWithCP24Time2a_initialize>:
        (DestroyFunction) MeasuredValueNormalizedWithCP24Time2a_destroy
};

static void
MeasuredValueNormalizedWithCP24Time2a_initialize(MeasuredValueNormalizedWithCP24Time2a self)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueNormalizedWithCP24Time2aVFT);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a05      	ldr	r2, [pc, #20]	; (8007910 <MeasuredValueNormalizedWithCP24Time2a_initialize+0x20>)
 80078fc:	609a      	str	r2, [r3, #8]
    self->type = M_ME_TA_1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	220a      	movs	r2, #10
 8007902:	711a      	strb	r2, [r3, #4]
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	200001b0 	.word	0x200001b0

08007914 <MeasuredValueNormalizedWithCP24Time2a_destroy>:

void
MeasuredValueNormalizedWithCP24Time2a_destroy(MeasuredValueNormalizedWithCP24Time2a self)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fc fac4 	bl	8003eaa <Memory_free>
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer>:
}

MeasuredValueNormalizedWithCP24Time2a
MeasuredValueNormalizedWithCP24Time2a_getFromBuffer(MeasuredValueNormalizedWithCP24Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
 8007936:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 6;
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	3306      	adds	r3, #6
 800793c:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800793e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007942:	f083 0301 	eor.w	r3, r3, #1
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4413      	add	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	dd01      	ble.n	8007962 <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	e042      	b.n	80079e8 <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer+0xbe>
    }

    if (self == NULL)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer+0x46>
		self = (MeasuredValueNormalizedWithCP24Time2a) GLOBAL_MALLOC(sizeof(struct sMeasuredValueNormalizedWithCP24Time2a));
 8007968:	2014      	movs	r0, #20
 800796a:	f7fc fa8b 	bl	8003e84 <Memory_malloc>
 800796e:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d037      	beq.n	80079e6 <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer+0xbc>
        MeasuredValueNormalizedWithCP24Time2a_initialize(self);
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff ffba 	bl	80078f0 <MeasuredValueNormalizedWithCP24Time2a_initialize>

        if (!isSequence) {
 800797c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007980:	f083 0301 	eor.w	r3, r3, #1
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <MeasuredValueNormalizedWithCP24Time2a_getFromBuffer+0x76>
             InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7fe fd0a 	bl	80063aa <InformationObject_getFromBuffer>

             startIndex += parameters->sizeOfIOA; /* skip IOA */
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	4413      	add	r3, r2
 800799e:	623b      	str	r3, [r7, #32]
         }

        self->encodedValue[0] = msg [startIndex++];
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	623a      	str	r2, [r7, #32]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4413      	add	r3, r2
 80079ac:	781a      	ldrb	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg [startIndex++];
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	623a      	str	r2, [r7, #32]
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	735a      	strb	r2, [r3, #13]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	623a      	str	r2, [r7, #32]
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4413      	add	r3, r2
 80079d0:	781a      	ldrb	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	739a      	strb	r2, [r3, #14]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f103 000f 	add.w	r0, r3, #15
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	f7fc fa97 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <MeasuredValueNormalizedWithCP56Time2a_encode>:
 * MeasuredValueNormalizedWithCP56Time2a : MeasuredValueNormalized
 ***********************************************************************/

static bool
MeasuredValueNormalizedWithCP56Time2a_encode(MeasuredValueNormalizedWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 10 : (parameters->sizeOfIOA + 10);
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <MeasuredValueNormalizedWithCP56Time2a_encode+0x18>
 8007a04:	230a      	movs	r3, #10
 8007a06:	e002      	b.n	8007a0e <MeasuredValueNormalizedWithCP56Time2a_encode+0x1e>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	330a      	adds	r3, #10
 8007a0e:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8007a10:	68b8      	ldr	r0, [r7, #8]
 8007a12:	f004 fc07 	bl	800c224 <Frame_getSpaceLeft>
 8007a16:	4602      	mov	r2, r0
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	dd01      	ble.n	8007a22 <MeasuredValueNormalizedWithCP56Time2a_encode+0x32>
        return false;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e00d      	b.n	8007a3e <MeasuredValueNormalizedWithCP56Time2a_encode+0x4e>

    MeasuredValueNormalized_encode((MeasuredValueNormalized) self, frame, parameters, isSequence);
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f7ff fdca 	bl	80075c2 <MeasuredValueNormalized_encode>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	330f      	adds	r3, #15
 8007a32:	2207      	movs	r2, #7
 8007a34:	4619      	mov	r1, r3
 8007a36:	68b8      	ldr	r0, [r7, #8]
 8007a38:	f004 fbe3 	bl	800c202 <Frame_appendBytes>

    return true;
 8007a3c:	2301      	movs	r3, #1
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <MeasuredValueNormalizedWithCP56Time2a_initialize>:
        (DestroyFunction) MeasuredValueNormalizedWithCP56Time2a_destroy
};

static void
MeasuredValueNormalizedWithCP56Time2a_initialize(MeasuredValueNormalizedWithCP56Time2a self)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueNormalizedWithCP56Time2aVFT);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a05      	ldr	r2, [pc, #20]	; (8007a68 <MeasuredValueNormalizedWithCP56Time2a_initialize+0x20>)
 8007a54:	609a      	str	r2, [r3, #8]
    self->type = M_ME_TD_1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2222      	movs	r2, #34	; 0x22
 8007a5a:	711a      	strb	r2, [r3, #4]
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	200001b8 	.word	0x200001b8

08007a6c <MeasuredValueNormalizedWithCP56Time2a_destroy>:

void
MeasuredValueNormalizedWithCP56Time2a_destroy(MeasuredValueNormalizedWithCP56Time2a self)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fc fa18 	bl	8003eaa <Memory_free>
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer>:
}

MeasuredValueNormalizedWithCP56Time2a
MeasuredValueNormalizedWithCP56Time2a_getFromBuffer(MeasuredValueNormalizedWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b086      	sub	sp, #24
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 10;
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	330a      	adds	r3, #10
 8007a94:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8007a96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a9a:	f083 0301 	eor.w	r3, r3, #1
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4413      	add	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	dd01      	ble.n	8007aba <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e042      	b.n	8007b40 <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer+0xbe>
    }

    if (self == NULL)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer+0x46>
		self = (MeasuredValueNormalizedWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sMeasuredValueNormalizedWithCP56Time2a));
 8007ac0:	2018      	movs	r0, #24
 8007ac2:	f7fc f9df 	bl	8003e84 <Memory_malloc>
 8007ac6:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d037      	beq.n	8007b3e <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer+0xbc>
        MeasuredValueNormalizedWithCP56Time2a_initialize(self);
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff ffba 	bl	8007a48 <MeasuredValueNormalizedWithCP56Time2a_initialize>

        if (!isSequence) {
 8007ad4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ad8:	f083 0301 	eor.w	r3, r3, #1
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <MeasuredValueNormalizedWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7fe fc5e 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	6a3a      	ldr	r2, [r7, #32]
 8007af4:	4413      	add	r3, r2
 8007af6:	623b      	str	r3, [r7, #32]
        }

        self->encodedValue[0] = msg [startIndex++];
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	623a      	str	r2, [r7, #32]
 8007afe:	461a      	mov	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4413      	add	r3, r2
 8007b04:	781a      	ldrb	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg [startIndex++];
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	623a      	str	r2, [r7, #32]
 8007b10:	461a      	mov	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4413      	add	r3, r2
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	735a      	strb	r2, [r3, #13]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	623a      	str	r2, [r7, #32]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4413      	add	r3, r2
 8007b28:	781a      	ldrb	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	739a      	strb	r2, [r3, #14]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f103 000f 	add.w	r0, r3, #15
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	f7fc fa15 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <MeasuredValueScaled_encode>:
 * MeasuredValueScaled
 *******************************************/

static bool
MeasuredValueScaled_encode(MeasuredValueScaled self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	70fb      	strb	r3, [r7, #3]
    return MeasuredValueNormalized_encode((MeasuredValueNormalized) self, frame, parameters, isSequence);
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f7ff fd30 	bl	80075c2 <MeasuredValueNormalized_encode>
 8007b62:	4603      	mov	r3, r0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <MeasuredValueScaled_initialize>:
        (DestroyFunction) MeasuredValueScaled_destroy
};

static void
MeasuredValueScaled_initialize(MeasuredValueScaled self)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueScaledVFT);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a05      	ldr	r2, [pc, #20]	; (8007b8c <MeasuredValueScaled_initialize+0x20>)
 8007b78:	609a      	str	r2, [r3, #8]
    self->type = M_ME_NB_1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	220b      	movs	r2, #11
 8007b7e:	711a      	strb	r2, [r3, #4]
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	200001c0 	.word	0x200001c0

08007b90 <MeasuredValueScaled_destroy>:
}


void
MeasuredValueScaled_destroy(MeasuredValueScaled self)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fc f986 	bl	8003eaa <Memory_free>
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <MeasuredValueScaled_getValue>:


int
MeasuredValueScaled_getValue(MeasuredValueScaled self)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
    return getScaledValue(self->encodedValue);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	330c      	adds	r3, #12
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff fce8 	bl	8007588 <getScaledValue>
 8007bb8:	4603      	mov	r3, r0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <MeasuredValueScaled_getFromBuffer>:
}

MeasuredValueScaled
MeasuredValueScaled_getFromBuffer(MeasuredValueScaled self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b086      	sub	sp, #24
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 3;
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	3303      	adds	r3, #3
 8007bd4:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8007bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007bda:	f083 0301 	eor.w	r3, r3, #1
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <MeasuredValueScaled_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4413      	add	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	dd01      	ble.n	8007bfa <MeasuredValueScaled_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e03a      	b.n	8007c70 <MeasuredValueScaled_getFromBuffer+0xae>
    }

    if (self == NULL)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <MeasuredValueScaled_getFromBuffer+0x46>
		self = (MeasuredValueScaled) GLOBAL_MALLOC(sizeof(struct sMeasuredValueScaled));
 8007c00:	2010      	movs	r0, #16
 8007c02:	f7fc f93f 	bl	8003e84 <Memory_malloc>
 8007c06:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d02f      	beq.n	8007c6e <MeasuredValueScaled_getFromBuffer+0xac>
        MeasuredValueScaled_initialize(self);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff ffac 	bl	8007b6c <MeasuredValueScaled_initialize>

        if (!isSequence) {
 8007c14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c18:	f083 0301 	eor.w	r3, r3, #1
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <MeasuredValueScaled_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7fe fbbe 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	6a3a      	ldr	r2, [r7, #32]
 8007c34:	4413      	add	r3, r2
 8007c36:	623b      	str	r3, [r7, #32]
        }

        self->encodedValue[0] = msg [startIndex++];
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	623a      	str	r2, [r7, #32]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	781a      	ldrb	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg [startIndex++];
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	623a      	str	r2, [r7, #32]
 8007c50:	461a      	mov	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	735a      	strb	r2, [r3, #13]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	623a      	str	r2, [r7, #32]
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4413      	add	r3, r2
 8007c68:	781a      	ldrb	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	739a      	strb	r2, [r3, #14]
    }

    return self;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <ParameterScaledValue_getFromBuffer>:
}

ParameterScaledValue
ParameterScaledValue_getFromBuffer(ParameterScaledValue self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
    MeasuredValueScaled psv =
            MeasuredValueScaled_getFromBuffer(self, parameters, msg, msgSize, startIndex, false);
 8007c86:	2300      	movs	r3, #0
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff ff94 	bl	8007bc2 <MeasuredValueScaled_getFromBuffer>
 8007c9a:	6178      	str	r0, [r7, #20]

    if (psv)
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <ParameterScaledValue_getFromBuffer+0x30>
        psv->type = P_ME_NB_1;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	226f      	movs	r2, #111	; 0x6f
 8007ca6:	711a      	strb	r2, [r3, #4]

    return (ParameterScaledValue) psv;
 8007ca8:	697b      	ldr	r3, [r7, #20]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <MeasuredValueScaledWithCP24Time2a_encode>:
 * MeasuredValueScaledWithCP24Time2a
 *******************************************/

static bool
MeasuredValueScaledWithCP24Time2a_encode(MeasuredValueScaledWithCP24Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 6 : (parameters->sizeOfIOA + 6);
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <MeasuredValueScaledWithCP24Time2a_encode+0x18>
 8007cc6:	2306      	movs	r3, #6
 8007cc8:	e002      	b.n	8007cd0 <MeasuredValueScaledWithCP24Time2a_encode+0x1e>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	3306      	adds	r3, #6
 8007cd0:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8007cd2:	68b8      	ldr	r0, [r7, #8]
 8007cd4:	f004 faa6 	bl	800c224 <Frame_getSpaceLeft>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	dd01      	ble.n	8007ce4 <MeasuredValueScaledWithCP24Time2a_encode+0x32>
        return false;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e00d      	b.n	8007d00 <MeasuredValueScaledWithCP24Time2a_encode+0x4e>

    MeasuredValueNormalized_encode((MeasuredValueNormalized) self, frame, parameters, isSequence);
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff fc69 	bl	80075c2 <MeasuredValueNormalized_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	330f      	adds	r3, #15
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68b8      	ldr	r0, [r7, #8]
 8007cfa:	f004 fa82 	bl	800c202 <Frame_appendBytes>

    return true;
 8007cfe:	2301      	movs	r3, #1
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <MeasuredValueScaledWithCP24Time2a_initialize>:
        (DestroyFunction) MeasuredValueScaled_destroy
};

static void
MeasuredValueScaledWithCP24Time2a_initialize(MeasuredValueScaledWithCP24Time2a self)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueScaledWithCP24Time2aVFT);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a05      	ldr	r2, [pc, #20]	; (8007d28 <MeasuredValueScaledWithCP24Time2a_initialize+0x20>)
 8007d14:	609a      	str	r2, [r3, #8]
    self->type = M_ME_TB_1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	220c      	movs	r2, #12
 8007d1a:	711a      	strb	r2, [r3, #4]
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	200001c8 	.word	0x200001c8

08007d2c <MeasuredValueScaledWithCP24Time2a_getFromBuffer>:
}

MeasuredValueScaledWithCP24Time2a
MeasuredValueScaledWithCP24Time2a_getFromBuffer(MeasuredValueScaledWithCP24Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 6;
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	3306      	adds	r3, #6
 8007d3e:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8007d40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d44:	f083 0301 	eor.w	r3, r3, #1
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d004      	beq.n	8007d58 <MeasuredValueScaledWithCP24Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4413      	add	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	dd01      	ble.n	8007d64 <MeasuredValueScaledWithCP24Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	e042      	b.n	8007dea <MeasuredValueScaledWithCP24Time2a_getFromBuffer+0xbe>
    }

    if (self == NULL)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <MeasuredValueScaledWithCP24Time2a_getFromBuffer+0x46>
		self = (MeasuredValueScaledWithCP24Time2a) GLOBAL_MALLOC(sizeof(struct sMeasuredValueScaledWithCP24Time2a));
 8007d6a:	2014      	movs	r0, #20
 8007d6c:	f7fc f88a 	bl	8003e84 <Memory_malloc>
 8007d70:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d037      	beq.n	8007de8 <MeasuredValueScaledWithCP24Time2a_getFromBuffer+0xbc>
        MeasuredValueScaledWithCP24Time2a_initialize(self);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff ffc5 	bl	8007d08 <MeasuredValueScaledWithCP24Time2a_initialize>

        if (!isSequence) {
 8007d7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d82:	f083 0301 	eor.w	r3, r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <MeasuredValueScaledWithCP24Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7fe fb09 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	6a3a      	ldr	r2, [r7, #32]
 8007d9e:	4413      	add	r3, r2
 8007da0:	623b      	str	r3, [r7, #32]
        }

        self->encodedValue[0] = msg [startIndex++];
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	623a      	str	r2, [r7, #32]
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4413      	add	r3, r2
 8007dae:	781a      	ldrb	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg [startIndex++];
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	623a      	str	r2, [r7, #32]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	781a      	ldrb	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	735a      	strb	r2, [r3, #13]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	623a      	str	r2, [r7, #32]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	739a      	strb	r2, [r3, #14]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f103 000f 	add.w	r0, r3, #15
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	f7fc f896 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 8007de8:	68fb      	ldr	r3, [r7, #12]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <MeasuredValueScaledWithCP56Time2a_encode>:
 * MeasuredValueScaledWithCP56Time2a
 *******************************************/

static bool
MeasuredValueScaledWithCP56Time2a_encode(MeasuredValueScaledWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b086      	sub	sp, #24
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	607a      	str	r2, [r7, #4]
 8007dfe:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 10 : (parameters->sizeOfIOA + 10);
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <MeasuredValueScaledWithCP56Time2a_encode+0x18>
 8007e06:	230a      	movs	r3, #10
 8007e08:	e002      	b.n	8007e10 <MeasuredValueScaledWithCP56Time2a_encode+0x1e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	330a      	adds	r3, #10
 8007e10:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8007e12:	68b8      	ldr	r0, [r7, #8]
 8007e14:	f004 fa06 	bl	800c224 <Frame_getSpaceLeft>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	dd01      	ble.n	8007e24 <MeasuredValueScaledWithCP56Time2a_encode+0x32>
        return false;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e00d      	b.n	8007e40 <MeasuredValueScaledWithCP56Time2a_encode+0x4e>

    MeasuredValueNormalized_encode((MeasuredValueNormalized) self, frame, parameters, isSequence);
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff fbc9 	bl	80075c2 <MeasuredValueNormalized_encode>

    /* timestamp */
    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	330f      	adds	r3, #15
 8007e34:	2207      	movs	r2, #7
 8007e36:	4619      	mov	r1, r3
 8007e38:	68b8      	ldr	r0, [r7, #8]
 8007e3a:	f004 f9e2 	bl	800c202 <Frame_appendBytes>

    return true;
 8007e3e:	2301      	movs	r3, #1
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <MeasuredValueScaledWithCP56Time2a_initialize>:
        (DestroyFunction) MeasuredValueScaledWithCP56Time2a_destroy
};

static void
MeasuredValueScaledWithCP56Time2a_initialize(MeasuredValueScaledWithCP56Time2a self)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &measuredValueScaledWithCP56Time2aVFT;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a05      	ldr	r2, [pc, #20]	; (8007e68 <MeasuredValueScaledWithCP56Time2a_initialize+0x20>)
 8007e54:	609a      	str	r2, [r3, #8]
    self->type = M_ME_TE_1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2223      	movs	r2, #35	; 0x23
 8007e5a:	711a      	strb	r2, [r3, #4]
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	200001d0 	.word	0x200001d0

08007e6c <MeasuredValueScaledWithCP56Time2a_destroy>:

void
MeasuredValueScaledWithCP56Time2a_destroy(MeasuredValueScaledWithCP56Time2a self)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7fc f818 	bl	8003eaa <Memory_free>
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <MeasuredValueScaledWithCP56Time2a_getFromBuffer>:


MeasuredValueScaledWithCP56Time2a
MeasuredValueScaledWithCP56Time2a_getFromBuffer(MeasuredValueScaledWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b086      	sub	sp, #24
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
 8007e8e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 10;
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	330a      	adds	r3, #10
 8007e94:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8007e96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e9a:	f083 0301 	eor.w	r3, r3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <MeasuredValueScaledWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	4413      	add	r3, r2
 8007eac:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	dd01      	ble.n	8007eba <MeasuredValueScaledWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e042      	b.n	8007f40 <MeasuredValueScaledWithCP56Time2a_getFromBuffer+0xbe>
    }

    if (self == NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d103      	bne.n	8007ec8 <MeasuredValueScaledWithCP56Time2a_getFromBuffer+0x46>
		self = (MeasuredValueScaledWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sMeasuredValueScaledWithCP56Time2a));
 8007ec0:	2018      	movs	r0, #24
 8007ec2:	f7fb ffdf 	bl	8003e84 <Memory_malloc>
 8007ec6:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d037      	beq.n	8007f3e <MeasuredValueScaledWithCP56Time2a_getFromBuffer+0xbc>
        MeasuredValueScaledWithCP56Time2a_initialize(self);
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f7ff ffba 	bl	8007e48 <MeasuredValueScaledWithCP56Time2a_initialize>

        if (!isSequence) {
 8007ed4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ed8:	f083 0301 	eor.w	r3, r3, #1
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <MeasuredValueScaledWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7fe fa5e 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	6a3a      	ldr	r2, [r7, #32]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	623b      	str	r3, [r7, #32]
        }

        /* scaled value */
        self->encodedValue[0] = msg [startIndex++];
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	623a      	str	r2, [r7, #32]
 8007efe:	461a      	mov	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4413      	add	r3, r2
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg [startIndex++];
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	623a      	str	r2, [r7, #32]
 8007f10:	461a      	mov	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4413      	add	r3, r2
 8007f16:	781a      	ldrb	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	735a      	strb	r2, [r3, #13]

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	623a      	str	r2, [r7, #32]
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4413      	add	r3, r2
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	739a      	strb	r2, [r3, #14]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f103 000f 	add.w	r0, r3, #15
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	f7fc f815 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <MeasuredValueShort_encode>:
 * MeasuredValueShort
 *******************************************/

static bool
MeasuredValueShort_encode(MeasuredValueShort self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 5 : (parameters->sizeOfIOA + 5);
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <MeasuredValueShort_encode+0x18>
 8007f5c:	2305      	movs	r3, #5
 8007f5e:	e002      	b.n	8007f66 <MeasuredValueShort_encode+0x1e>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	3305      	adds	r3, #5
 8007f66:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8007f68:	68b8      	ldr	r0, [r7, #8]
 8007f6a:	f004 f95b 	bl	800c224 <Frame_getSpaceLeft>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	4293      	cmp	r3, r2
 8007f74:	dd01      	ble.n	8007f7a <MeasuredValueShort_encode+0x32>
        return false;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e014      	b.n	8007fa4 <MeasuredValueShort_encode+0x5c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7fe f9ae 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t* valueBytes = (uint8_t*) &(self->value);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
    Frame_appendBytes(frame, valueBytes, 4);
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	6939      	ldr	r1, [r7, #16]
 8007f90:	68b8      	ldr	r0, [r7, #8]
 8007f92:	f004 f936 	bl	800c202 <Frame_appendBytes>
    Frame_setNextByte(frame, valueBytes[2]);
    Frame_setNextByte(frame, valueBytes[1]);
    Frame_setNextByte(frame, valueBytes[0]);
#endif

    Frame_setNextByte(frame, (uint8_t) self->quality);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	7c1b      	ldrb	r3, [r3, #16]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	68b8      	ldr	r0, [r7, #8]
 8007f9e:	f004 f91f 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8007fa2:	2301      	movs	r3, #1
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <MeasuredValueShort_initialize>:
        (DestroyFunction) MeasuredValueShort_destroy
};

static void
MeasuredValueShort_initialize(MeasuredValueShort self)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueShortVFT);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a05      	ldr	r2, [pc, #20]	; (8007fcc <MeasuredValueShort_initialize+0x20>)
 8007fb8:	609a      	str	r2, [r3, #8]
    self->type = M_ME_NC_1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	220d      	movs	r2, #13
 8007fbe:	711a      	strb	r2, [r3, #4]
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	200001d8 	.word	0x200001d8

08007fd0 <MeasuredValueShort_destroy>:

void
MeasuredValueShort_destroy(MeasuredValueShort self)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fb ff66 	bl	8003eaa <Memory_free>
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <MeasuredValueShort_getValue>:
    return self;
}

float
MeasuredValueShort_getValue(MeasuredValueShort self)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
    return self->value;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	ee07 3a90 	vmov	s15, r3
}
 8007ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <MeasuredValueShort_getFromBuffer>:
}

MeasuredValueShort
MeasuredValueShort_getFromBuffer(MeasuredValueShort self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 5;
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	3305      	adds	r3, #5
 8008016:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8008018:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800801c:	f083 0301 	eor.w	r3, r3, #1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <MeasuredValueShort_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4413      	add	r3, r2
 800802e:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	dd01      	ble.n	800803c <MeasuredValueShort_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8008038:	2300      	movs	r3, #0
 800803a:	e052      	b.n	80080e2 <MeasuredValueShort_getFromBuffer+0xde>
    }

    if (self == NULL)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d103      	bne.n	800804a <MeasuredValueShort_getFromBuffer+0x46>
		self = (MeasuredValueShort) GLOBAL_MALLOC(sizeof(struct sMeasuredValueShort));
 8008042:	2014      	movs	r0, #20
 8008044:	f7fb ff1e 	bl	8003e84 <Memory_malloc>
 8008048:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d047      	beq.n	80080e0 <MeasuredValueShort_getFromBuffer+0xdc>
        MeasuredValueShort_initialize(self);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff ffab 	bl	8007fac <MeasuredValueShort_initialize>

        if (!isSequence) {
 8008056:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800805a:	f083 0301 	eor.w	r3, r3, #1
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <MeasuredValueShort_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f7fe f99d 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	6a3a      	ldr	r2, [r7, #32]
 8008076:	4413      	add	r3, r2
 8008078:	623b      	str	r3, [r7, #32]
        }

        uint8_t* valueBytes = (uint8_t*) &(self->value);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	330c      	adds	r3, #12
 800807e:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
        valueBytes[0] = msg [startIndex++];
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	623a      	str	r2, [r7, #32]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4413      	add	r3, r2
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	623a      	str	r2, [r7, #32]
 8008098:	461a      	mov	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	441a      	add	r2, r3
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	3301      	adds	r3, #1
 80080a2:	7812      	ldrb	r2, [r2, #0]
 80080a4:	701a      	strb	r2, [r3, #0]
        valueBytes[2] = msg [startIndex++];
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	623a      	str	r2, [r7, #32]
 80080ac:	461a      	mov	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	441a      	add	r2, r3
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3302      	adds	r3, #2
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	701a      	strb	r2, [r3, #0]
        valueBytes[3] = msg [startIndex++];
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	623a      	str	r2, [r7, #32]
 80080c0:	461a      	mov	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	441a      	add	r2, r3
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	3303      	adds	r3, #3
 80080ca:	7812      	ldrb	r2, [r2, #0]
 80080cc:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
        valueBytes[0] = msg [startIndex++];
#endif

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	623a      	str	r2, [r7, #32]
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	781a      	ldrb	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	741a      	strb	r2, [r3, #16]
    }

    return self;
 80080e0:	68fb      	ldr	r3, [r7, #12]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <ParameterFloatValue_getFromBuffer>:
}

ParameterFloatValue
ParameterFloatValue_getFromBuffer(ParameterFloatValue self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b088      	sub	sp, #32
 80080ee:	af02      	add	r7, sp, #8
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
 80080f6:	603b      	str	r3, [r7, #0]
    ParameterFloatValue psv =
            MeasuredValueShort_getFromBuffer(self, parameters, msg, msgSize, startIndex, false);
 80080f8:	2300      	movs	r3, #0
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff ff7c 	bl	8008004 <MeasuredValueShort_getFromBuffer>
 800810c:	6178      	str	r0, [r7, #20]

    if (psv)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <ParameterFloatValue_getFromBuffer+0x30>
        psv->type = P_ME_NC_1;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2270      	movs	r2, #112	; 0x70
 8008118:	711a      	strb	r2, [r3, #4]

    return (ParameterFloatValue) psv;
 800811a:	697b      	ldr	r3, [r7, #20]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <MeasuredValueShortWithCP24Time2a_encode>:
 * MeasuredValueFloatWithCP24Time2a
 *******************************************/

static bool
MeasuredValueShortWithCP24Time2a_encode(MeasuredValueShortWithCP24Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 8 : (parameters->sizeOfIOA + 8);
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <MeasuredValueShortWithCP24Time2a_encode+0x18>
 8008138:	2308      	movs	r3, #8
 800813a:	e002      	b.n	8008142 <MeasuredValueShortWithCP24Time2a_encode+0x1e>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	3308      	adds	r3, #8
 8008142:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8008144:	68b8      	ldr	r0, [r7, #8]
 8008146:	f004 f86d 	bl	800c224 <Frame_getSpaceLeft>
 800814a:	4602      	mov	r2, r0
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	4293      	cmp	r3, r2
 8008150:	dd01      	ble.n	8008156 <MeasuredValueShortWithCP24Time2a_encode+0x32>
        return false;
 8008152:	2300      	movs	r3, #0
 8008154:	e00d      	b.n	8008172 <MeasuredValueShortWithCP24Time2a_encode+0x4e>

    MeasuredValueShort_encode((MeasuredValueShort) self, frame, parameters, isSequence);
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff fef3 	bl	8007f48 <MeasuredValueShort_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3311      	adds	r3, #17
 8008166:	2203      	movs	r2, #3
 8008168:	4619      	mov	r1, r3
 800816a:	68b8      	ldr	r0, [r7, #8]
 800816c:	f004 f849 	bl	800c202 <Frame_appendBytes>

    return true;
 8008170:	2301      	movs	r3, #1
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <MeasuredValueShortWithCP24Time2a_initialize>:
        (DestroyFunction) MeasuredValueShortWithCP24Time2a_destroy
};

static void
MeasuredValueShortWithCP24Time2a_initialize(MeasuredValueShortWithCP24Time2a self)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueShortWithCP24Time2aVFT);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a05      	ldr	r2, [pc, #20]	; (800819c <MeasuredValueShortWithCP24Time2a_initialize+0x20>)
 8008188:	609a      	str	r2, [r3, #8]
    self->type = M_ME_TC_1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	220e      	movs	r2, #14
 800818e:	711a      	strb	r2, [r3, #4]
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	200001e0 	.word	0x200001e0

080081a0 <MeasuredValueShortWithCP24Time2a_destroy>:

void
MeasuredValueShortWithCP24Time2a_destroy(MeasuredValueShortWithCP24Time2a self)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fb fe7e 	bl	8003eaa <Memory_free>
}
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <MeasuredValueShortWithCP24Time2a_getFromBuffer>:
}

MeasuredValueShortWithCP24Time2a
MeasuredValueShortWithCP24Time2a_getFromBuffer(MeasuredValueShortWithCP24Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 8;
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	3308      	adds	r3, #8
 80081c8:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 80081ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081ce:	f083 0301 	eor.w	r3, r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <MeasuredValueShortWithCP24Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4413      	add	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	dd01      	ble.n	80081ee <MeasuredValueShortWithCP24Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e05a      	b.n	80082a4 <MeasuredValueShortWithCP24Time2a_getFromBuffer+0xee>
    }

    if (self == NULL)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d103      	bne.n	80081fc <MeasuredValueShortWithCP24Time2a_getFromBuffer+0x46>
		self = (MeasuredValueShortWithCP24Time2a) GLOBAL_MALLOC(sizeof(struct sMeasuredValueShortWithCP24Time2a));
 80081f4:	2014      	movs	r0, #20
 80081f6:	f7fb fe45 	bl	8003e84 <Memory_malloc>
 80081fa:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d04f      	beq.n	80082a2 <MeasuredValueShortWithCP24Time2a_getFromBuffer+0xec>
        MeasuredValueShortWithCP24Time2a_initialize(self);
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7ff ffba 	bl	800817c <MeasuredValueShortWithCP24Time2a_initialize>

        if (!isSequence) {
 8008208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800820c:	f083 0301 	eor.w	r3, r3, #1
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <MeasuredValueShortWithCP24Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f7fe f8c4 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	4413      	add	r3, r2
 800822a:	623b      	str	r3, [r7, #32]
        }

        uint8_t* valueBytes = (uint8_t*) &(self->value);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	330c      	adds	r3, #12
 8008230:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
        valueBytes[0] = msg [startIndex++];
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	623a      	str	r2, [r7, #32]
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	781a      	ldrb	r2, [r3, #0]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	623a      	str	r2, [r7, #32]
 800824a:	461a      	mov	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	441a      	add	r2, r3
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	3301      	adds	r3, #1
 8008254:	7812      	ldrb	r2, [r2, #0]
 8008256:	701a      	strb	r2, [r3, #0]
        valueBytes[2] = msg [startIndex++];
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	623a      	str	r2, [r7, #32]
 800825e:	461a      	mov	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	441a      	add	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	3302      	adds	r3, #2
 8008268:	7812      	ldrb	r2, [r2, #0]
 800826a:	701a      	strb	r2, [r3, #0]
        valueBytes[3] = msg [startIndex++];
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	623a      	str	r2, [r7, #32]
 8008272:	461a      	mov	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	441a      	add	r2, r3
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	3303      	adds	r3, #3
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
        valueBytes[0] = msg [startIndex++];
#endif

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	623a      	str	r2, [r7, #32]
 8008286:	461a      	mov	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4413      	add	r3, r2
 800828c:	781a      	ldrb	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	741a      	strb	r2, [r3, #16]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f103 0011 	add.w	r0, r3, #17
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	f7fb fe39 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 80082a2:	68fb      	ldr	r3, [r7, #12]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <MeasuredValueShortWithCP56Time2a_encode>:
 * MeasuredValueFloatWithCP56Time2a
 *******************************************/

static bool
MeasuredValueShortWithCP56Time2a_encode(MeasuredValueShortWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 12 : (parameters->sizeOfIOA + 12);
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <MeasuredValueShortWithCP56Time2a_encode+0x18>
 80082c0:	230c      	movs	r3, #12
 80082c2:	e002      	b.n	80082ca <MeasuredValueShortWithCP56Time2a_encode+0x1e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	330c      	adds	r3, #12
 80082ca:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80082cc:	68b8      	ldr	r0, [r7, #8]
 80082ce:	f003 ffa9 	bl	800c224 <Frame_getSpaceLeft>
 80082d2:	4602      	mov	r2, r0
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	4293      	cmp	r3, r2
 80082d8:	dd01      	ble.n	80082de <MeasuredValueShortWithCP56Time2a_encode+0x32>
        return false;
 80082da:	2300      	movs	r3, #0
 80082dc:	e00d      	b.n	80082fa <MeasuredValueShortWithCP56Time2a_encode+0x4e>

    MeasuredValueShort_encode((MeasuredValueShort) self, frame, parameters, isSequence);
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	68b9      	ldr	r1, [r7, #8]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f7ff fe2f 	bl	8007f48 <MeasuredValueShort_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3311      	adds	r3, #17
 80082ee:	2207      	movs	r2, #7
 80082f0:	4619      	mov	r1, r3
 80082f2:	68b8      	ldr	r0, [r7, #8]
 80082f4:	f003 ff85 	bl	800c202 <Frame_appendBytes>

    return true;
 80082f8:	2301      	movs	r3, #1
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <MeasuredValueShortWithCP56Time2a_initialize>:
        (DestroyFunction) MeasuredValueShortWithCP56Time2a_destroy
};

static void
MeasuredValueShortWithCP56Time2a_initialize(MeasuredValueShortWithCP56Time2a self)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(measuredValueShortWithCP56Time2aVFT);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a05      	ldr	r2, [pc, #20]	; (8008324 <MeasuredValueShortWithCP56Time2a_initialize+0x20>)
 8008310:	609a      	str	r2, [r3, #8]
    self->type = M_ME_TF_1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2224      	movs	r2, #36	; 0x24
 8008316:	711a      	strb	r2, [r3, #4]
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	200001e8 	.word	0x200001e8

08008328 <MeasuredValueShortWithCP56Time2a_destroy>:

void
MeasuredValueShortWithCP56Time2a_destroy(MeasuredValueShortWithCP56Time2a self)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7fb fdba 	bl	8003eaa <Memory_free>
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <MeasuredValueShortWithCP56Time2a_getFromBuffer>:
}

MeasuredValueShortWithCP56Time2a
MeasuredValueShortWithCP56Time2a_getFromBuffer(MeasuredValueShortWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
 800834a:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 12;
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	330c      	adds	r3, #12
 8008350:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8008352:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008356:	f083 0301 	eor.w	r3, r3, #1
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d004      	beq.n	800836a <MeasuredValueShortWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	4413      	add	r3, r2
 8008368:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	dd01      	ble.n	8008376 <MeasuredValueShortWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	e05a      	b.n	800842c <MeasuredValueShortWithCP56Time2a_getFromBuffer+0xee>
    }

    if (self == NULL)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <MeasuredValueShortWithCP56Time2a_getFromBuffer+0x46>
		self = (MeasuredValueShortWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sMeasuredValueShortWithCP56Time2a));
 800837c:	2018      	movs	r0, #24
 800837e:	f7fb fd81 	bl	8003e84 <Memory_malloc>
 8008382:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d04f      	beq.n	800842a <MeasuredValueShortWithCP56Time2a_getFromBuffer+0xec>
        MeasuredValueShortWithCP56Time2a_initialize(self);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff ffba 	bl	8008304 <MeasuredValueShortWithCP56Time2a_initialize>

        if (!isSequence) {
 8008390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008394:	f083 0301 	eor.w	r3, r3, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <MeasuredValueShortWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	68b9      	ldr	r1, [r7, #8]
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7fe f800 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	6a3a      	ldr	r2, [r7, #32]
 80083b0:	4413      	add	r3, r2
 80083b2:	623b      	str	r3, [r7, #32]
        }

        uint8_t* valueBytes = (uint8_t*) &(self->value);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	330c      	adds	r3, #12
 80083b8:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
        valueBytes[0] = msg [startIndex++];
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	623a      	str	r2, [r7, #32]
 80083c0:	461a      	mov	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4413      	add	r3, r2
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	623a      	str	r2, [r7, #32]
 80083d2:	461a      	mov	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	441a      	add	r2, r3
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3301      	adds	r3, #1
 80083dc:	7812      	ldrb	r2, [r2, #0]
 80083de:	701a      	strb	r2, [r3, #0]
        valueBytes[2] = msg [startIndex++];
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	623a      	str	r2, [r7, #32]
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	441a      	add	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	3302      	adds	r3, #2
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	701a      	strb	r2, [r3, #0]
        valueBytes[3] = msg [startIndex++];
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	623a      	str	r2, [r7, #32]
 80083fa:	461a      	mov	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	441a      	add	r2, r3
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	3303      	adds	r3, #3
 8008404:	7812      	ldrb	r2, [r2, #0]
 8008406:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
        valueBytes[0] = msg [startIndex++];
#endif

        /* quality */
        self->quality = (QualityDescriptor) msg [startIndex++];
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	623a      	str	r2, [r7, #32]
 800840e:	461a      	mov	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4413      	add	r3, r2
 8008414:	781a      	ldrb	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	741a      	strb	r2, [r3, #16]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f103 0011 	add.w	r0, r3, #17
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	f7fb fd9f 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800842a:	68fb      	ldr	r3, [r7, #12]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <IntegratedTotals_encode>:
 * IntegratedTotals
 *******************************************/

static bool
IntegratedTotals_encode(IntegratedTotals self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 5 : (parameters->sizeOfIOA + 5);
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <IntegratedTotals_encode+0x18>
 8008448:	2305      	movs	r3, #5
 800844a:	e002      	b.n	8008452 <IntegratedTotals_encode+0x1e>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	3305      	adds	r3, #5
 8008452:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8008454:	68b8      	ldr	r0, [r7, #8]
 8008456:	f003 fee5 	bl	800c224 <Frame_getSpaceLeft>
 800845a:	4602      	mov	r2, r0
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	4293      	cmp	r3, r2
 8008460:	dd01      	ble.n	8008466 <IntegratedTotals_encode+0x32>
        return false;
 8008462:	2300      	movs	r3, #0
 8008464:	e00d      	b.n	8008482 <IntegratedTotals_encode+0x4e>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7fd ff38 	bl	80062e2 <InformationObject_encodeBase>

    Frame_appendBytes(frame, self->totals.encodedValue, 5);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	330c      	adds	r3, #12
 8008476:	2205      	movs	r2, #5
 8008478:	4619      	mov	r1, r3
 800847a:	68b8      	ldr	r0, [r7, #8]
 800847c:	f003 fec1 	bl	800c202 <Frame_appendBytes>

    return true;
 8008480:	2301      	movs	r3, #1
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <IntegratedTotals_initialize>:
        (DestroyFunction) IntegratedTotals_destroy
};

static void
IntegratedTotals_initialize(IntegratedTotals self)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(integratedTotalsVFT);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a05      	ldr	r2, [pc, #20]	; (80084ac <IntegratedTotals_initialize+0x20>)
 8008498:	609a      	str	r2, [r3, #8]
    self->type = M_IT_NA_1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	220f      	movs	r2, #15
 800849e:	711a      	strb	r2, [r3, #4]
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	200001f0 	.word	0x200001f0

080084b0 <IntegratedTotals_destroy>:

void
IntegratedTotals_destroy(IntegratedTotals self)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7fb fcf6 	bl	8003eaa <Memory_free>
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <IntegratedTotals_getFromBuffer>:
}

IntegratedTotals
IntegratedTotals_getFromBuffer(IntegratedTotals self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b086      	sub	sp, #24
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 5;
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	3305      	adds	r3, #5
 80084d8:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 80084da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084de:	f083 0301 	eor.w	r3, r3, #1
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d004      	beq.n	80084f2 <IntegratedTotals_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	dd01      	ble.n	80084fe <IntegratedTotals_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e037      	b.n	800856e <IntegratedTotals_getFromBuffer+0xa8>
    }

    if (self == NULL)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <IntegratedTotals_getFromBuffer+0x46>
		self = (IntegratedTotals) GLOBAL_MALLOC(sizeof(struct sIntegratedTotals));
 8008504:	2014      	movs	r0, #20
 8008506:	f7fb fcbd 	bl	8003e84 <Memory_malloc>
 800850a:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d02c      	beq.n	800856c <IntegratedTotals_getFromBuffer+0xa6>
        IntegratedTotals_initialize(self);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff ffba 	bl	800848c <IntegratedTotals_initialize>

        if (!isSequence) {
 8008518:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800851c:	f083 0301 	eor.w	r3, r3, #1
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <IntegratedTotals_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7fd ff3c 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	6a3a      	ldr	r2, [r7, #32]
 8008538:	4413      	add	r3, r2
 800853a:	623b      	str	r3, [r7, #32]
        }

        /* BCR */
        int i = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]

        for (i = 0; i < 5; i++)
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	e00f      	b.n	8008566 <IntegratedTotals_getFromBuffer+0xa0>
            self->totals.encodedValue[i] = msg [startIndex++];
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	623a      	str	r2, [r7, #32]
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4413      	add	r3, r2
 8008552:	7819      	ldrb	r1, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	4413      	add	r3, r2
 800855a:	330c      	adds	r3, #12
 800855c:	460a      	mov	r2, r1
 800855e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 5; i++)
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	3301      	adds	r3, #1
 8008564:	613b      	str	r3, [r7, #16]
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	2b04      	cmp	r3, #4
 800856a:	ddec      	ble.n	8008546 <IntegratedTotals_getFromBuffer+0x80>
    }

    return self;
 800856c:	68fb      	ldr	r3, [r7, #12]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <IntegratedTotalsWithCP24Time2a_encode>:
 * IntegratedTotalsWithCP24Time2a : IntegratedTotals
 ***********************************************************************/

static bool
IntegratedTotalsWithCP24Time2a_encode(IntegratedTotalsWithCP24Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b086      	sub	sp, #24
 800857a:	af00      	add	r7, sp, #0
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	607a      	str	r2, [r7, #4]
 8008582:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 8 : (parameters->sizeOfIOA + 8);
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <IntegratedTotalsWithCP24Time2a_encode+0x18>
 800858a:	2308      	movs	r3, #8
 800858c:	e002      	b.n	8008594 <IntegratedTotalsWithCP24Time2a_encode+0x1e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	3308      	adds	r3, #8
 8008594:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8008596:	68b8      	ldr	r0, [r7, #8]
 8008598:	f003 fe44 	bl	800c224 <Frame_getSpaceLeft>
 800859c:	4602      	mov	r2, r0
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	dd01      	ble.n	80085a8 <IntegratedTotalsWithCP24Time2a_encode+0x32>
        return false;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e00d      	b.n	80085c4 <IntegratedTotalsWithCP24Time2a_encode+0x4e>

    IntegratedTotals_encode((IntegratedTotals) self, frame, parameters, isSequence);
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff ff40 	bl	8008434 <IntegratedTotals_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3311      	adds	r3, #17
 80085b8:	2203      	movs	r2, #3
 80085ba:	4619      	mov	r1, r3
 80085bc:	68b8      	ldr	r0, [r7, #8]
 80085be:	f003 fe20 	bl	800c202 <Frame_appendBytes>

    return true;
 80085c2:	2301      	movs	r3, #1
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <IntegratedTotalsWithCP24Time2a_initialize>:
        (DestroyFunction) IntegratedTotalsWithCP24Time2a_destroy
};

static void
IntegratedTotalsWithCP24Time2a_initialize(IntegratedTotalsWithCP24Time2a self)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(integratedTotalsWithCP24Time2aVFT);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a05      	ldr	r2, [pc, #20]	; (80085ec <IntegratedTotalsWithCP24Time2a_initialize+0x20>)
 80085d8:	609a      	str	r2, [r3, #8]
    self->type = M_IT_TA_1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2210      	movs	r2, #16
 80085de:	711a      	strb	r2, [r3, #4]
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	200001f8 	.word	0x200001f8

080085f0 <IntegratedTotalsWithCP24Time2a_destroy>:

void
IntegratedTotalsWithCP24Time2a_destroy(IntegratedTotalsWithCP24Time2a self)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7fb fc56 	bl	8003eaa <Memory_free>
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <IntegratedTotalsWithCP24Time2a_getFromBuffer>:


IntegratedTotalsWithCP24Time2a
IntegratedTotalsWithCP24Time2a_getFromBuffer(IntegratedTotalsWithCP24Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 8;
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	3308      	adds	r3, #8
 8008618:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800861a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800861e:	f083 0301 	eor.w	r3, r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d004      	beq.n	8008632 <IntegratedTotalsWithCP24Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4413      	add	r3, r2
 8008630:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	dd01      	ble.n	800863e <IntegratedTotalsWithCP24Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800863a:	2300      	movs	r3, #0
 800863c:	e03f      	b.n	80086be <IntegratedTotalsWithCP24Time2a_getFromBuffer+0xb8>
    }

    if (self == NULL)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d103      	bne.n	800864c <IntegratedTotalsWithCP24Time2a_getFromBuffer+0x46>
		self = (IntegratedTotalsWithCP24Time2a) GLOBAL_MALLOC(sizeof(struct sIntegratedTotalsWithCP24Time2a));
 8008644:	2014      	movs	r0, #20
 8008646:	f7fb fc1d 	bl	8003e84 <Memory_malloc>
 800864a:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d034      	beq.n	80086bc <IntegratedTotalsWithCP24Time2a_getFromBuffer+0xb6>
        IntegratedTotalsWithCP24Time2a_initialize(self);
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f7ff ffba 	bl	80085cc <IntegratedTotalsWithCP24Time2a_initialize>

        if (!isSequence) {
 8008658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800865c:	f083 0301 	eor.w	r3, r3, #1
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <IntegratedTotalsWithCP24Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7fd fe9c 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	6a3a      	ldr	r2, [r7, #32]
 8008678:	4413      	add	r3, r2
 800867a:	623b      	str	r3, [r7, #32]
        }

        /* BCR */
        int i = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	613b      	str	r3, [r7, #16]

        for (i = 0; i < 5; i++)
 8008680:	2300      	movs	r3, #0
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	e00f      	b.n	80086a6 <IntegratedTotalsWithCP24Time2a_getFromBuffer+0xa0>
            self->totals.encodedValue[i] = msg [startIndex++];
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	623a      	str	r2, [r7, #32]
 800868c:	461a      	mov	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4413      	add	r3, r2
 8008692:	7819      	ldrb	r1, [r3, #0]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	4413      	add	r3, r2
 800869a:	330c      	adds	r3, #12
 800869c:	460a      	mov	r2, r1
 800869e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 5; i++)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	3301      	adds	r3, #1
 80086a4:	613b      	str	r3, [r7, #16]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	ddec      	ble.n	8008686 <IntegratedTotalsWithCP24Time2a_getFromBuffer+0x80>

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f103 0011 	add.w	r0, r3, #17
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	f7fb fc2c 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <IntegratedTotalsWithCP56Time2a_encode>:
 ***********************************************************************/


static bool
IntegratedTotalsWithCP56Time2a_encode(IntegratedTotalsWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	607a      	str	r2, [r7, #4]
 80086d2:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 12 : (parameters->sizeOfIOA + 12);
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <IntegratedTotalsWithCP56Time2a_encode+0x18>
 80086da:	230c      	movs	r3, #12
 80086dc:	e002      	b.n	80086e4 <IntegratedTotalsWithCP56Time2a_encode+0x1e>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	330c      	adds	r3, #12
 80086e4:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80086e6:	68b8      	ldr	r0, [r7, #8]
 80086e8:	f003 fd9c 	bl	800c224 <Frame_getSpaceLeft>
 80086ec:	4602      	mov	r2, r0
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	dd01      	ble.n	80086f8 <IntegratedTotalsWithCP56Time2a_encode+0x32>
        return false;
 80086f4:	2300      	movs	r3, #0
 80086f6:	e00d      	b.n	8008714 <IntegratedTotalsWithCP56Time2a_encode+0x4e>

    IntegratedTotals_encode((IntegratedTotals) self, frame, parameters, isSequence);
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff fe98 	bl	8008434 <IntegratedTotals_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3311      	adds	r3, #17
 8008708:	2207      	movs	r2, #7
 800870a:	4619      	mov	r1, r3
 800870c:	68b8      	ldr	r0, [r7, #8]
 800870e:	f003 fd78 	bl	800c202 <Frame_appendBytes>

    return true;
 8008712:	2301      	movs	r3, #1
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <IntegratedTotalsWithCP56Time2a_initialize>:
        (DestroyFunction) IntegratedTotalsWithCP56Time2a_destroy
};

static void
IntegratedTotalsWithCP56Time2a_initialize(IntegratedTotalsWithCP56Time2a self)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(integratedTotalsWithCP56Time2aVFT);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a05      	ldr	r2, [pc, #20]	; (800873c <IntegratedTotalsWithCP56Time2a_initialize+0x20>)
 8008728:	609a      	str	r2, [r3, #8]
    self->type = M_IT_TB_1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2225      	movs	r2, #37	; 0x25
 800872e:	711a      	strb	r2, [r3, #4]
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	20000200 	.word	0x20000200

08008740 <IntegratedTotalsWithCP56Time2a_destroy>:

void
IntegratedTotalsWithCP56Time2a_destroy(IntegratedTotalsWithCP56Time2a self)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7fb fbae 	bl	8003eaa <Memory_free>
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <IntegratedTotalsWithCP56Time2a_getFromBuffer>:


IntegratedTotalsWithCP56Time2a
IntegratedTotalsWithCP56Time2a_getFromBuffer(IntegratedTotalsWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 12;
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	330c      	adds	r3, #12
 8008768:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800876a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800876e:	f083 0301 	eor.w	r3, r3, #1
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d004      	beq.n	8008782 <IntegratedTotalsWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	dd01      	ble.n	800878e <IntegratedTotalsWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	e03f      	b.n	800880e <IntegratedTotalsWithCP56Time2a_getFromBuffer+0xb8>
    }

    if (self == NULL)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <IntegratedTotalsWithCP56Time2a_getFromBuffer+0x46>
		self = (IntegratedTotalsWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sIntegratedTotalsWithCP56Time2a));
 8008794:	2018      	movs	r0, #24
 8008796:	f7fb fb75 	bl	8003e84 <Memory_malloc>
 800879a:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d034      	beq.n	800880c <IntegratedTotalsWithCP56Time2a_getFromBuffer+0xb6>
        IntegratedTotalsWithCP56Time2a_initialize(self);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff ffba 	bl	800871c <IntegratedTotalsWithCP56Time2a_initialize>

        if (!isSequence) {
 80087a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087ac:	f083 0301 	eor.w	r3, r3, #1
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <IntegratedTotalsWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7fd fdf4 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	6a3a      	ldr	r2, [r7, #32]
 80087c8:	4413      	add	r3, r2
 80087ca:	623b      	str	r3, [r7, #32]
        }

        /* BCR */
        int i = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	613b      	str	r3, [r7, #16]

        for (i = 0; i < 5; i++)
 80087d0:	2300      	movs	r3, #0
 80087d2:	613b      	str	r3, [r7, #16]
 80087d4:	e00f      	b.n	80087f6 <IntegratedTotalsWithCP56Time2a_getFromBuffer+0xa0>
            self->totals.encodedValue[i] = msg [startIndex++];
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	623a      	str	r2, [r7, #32]
 80087dc:	461a      	mov	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	7819      	ldrb	r1, [r3, #0]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	4413      	add	r3, r2
 80087ea:	330c      	adds	r3, #12
 80087ec:	460a      	mov	r2, r1
 80087ee:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 5; i++)
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	3301      	adds	r3, #1
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	ddec      	ble.n	80087d6 <IntegratedTotalsWithCP56Time2a_getFromBuffer+0x80>

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f103 0011 	add.w	r0, r3, #17
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	f7fb fbae 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800880c:	68fb      	ldr	r3, [r7, #12]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <EventOfProtectionEquipment_encode>:
 * EventOfProtectionEquipment : InformationObject
 ***********************************************************************/

static bool
EventOfProtectionEquipment_encode(EventOfProtectionEquipment self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b086      	sub	sp, #24
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	607a      	str	r2, [r7, #4]
 8008822:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 6 : (parameters->sizeOfIOA + 6);
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <EventOfProtectionEquipment_encode+0x18>
 800882a:	2306      	movs	r3, #6
 800882c:	e002      	b.n	8008834 <EventOfProtectionEquipment_encode+0x1e>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	3306      	adds	r3, #6
 8008834:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8008836:	68b8      	ldr	r0, [r7, #8]
 8008838:	f003 fcf4 	bl	800c224 <Frame_getSpaceLeft>
 800883c:	4602      	mov	r2, r0
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4293      	cmp	r3, r2
 8008842:	dd01      	ble.n	8008848 <EventOfProtectionEquipment_encode+0x32>
        return false;
 8008844:	2300      	movs	r3, #0
 8008846:	e01a      	b.n	800887e <EventOfProtectionEquipment_encode+0x68>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	68b9      	ldr	r1, [r7, #8]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f7fd fd47 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, (uint8_t) self->event);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	7b1b      	ldrb	r3, [r3, #12]
 8008858:	4619      	mov	r1, r3
 800885a:	68b8      	ldr	r0, [r7, #8]
 800885c:	f003 fcc0 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->elapsedTime.encodedValue, 2);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	330d      	adds	r3, #13
 8008864:	2202      	movs	r2, #2
 8008866:	4619      	mov	r1, r3
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	f003 fcca 	bl	800c202 <Frame_appendBytes>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	330f      	adds	r3, #15
 8008872:	2203      	movs	r2, #3
 8008874:	4619      	mov	r1, r3
 8008876:	68b8      	ldr	r0, [r7, #8]
 8008878:	f003 fcc3 	bl	800c202 <Frame_appendBytes>

    return true;
 800887c:	2301      	movs	r3, #1
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <EventOfProtectionEquipment_initialize>:
        (DestroyFunction) EventOfProtectionEquipment_destroy
};

static void
EventOfProtectionEquipment_initialize(EventOfProtectionEquipment self)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(eventOfProtectionEquipmentVFT);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a05      	ldr	r2, [pc, #20]	; (80088a8 <EventOfProtectionEquipment_initialize+0x20>)
 8008894:	609a      	str	r2, [r3, #8]
    self->type = M_EP_TA_1;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2211      	movs	r2, #17
 800889a:	711a      	strb	r2, [r3, #4]
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	20000208 	.word	0x20000208

080088ac <EventOfProtectionEquipment_destroy>:

void
EventOfProtectionEquipment_destroy(EventOfProtectionEquipment self)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fb faf8 	bl	8003eaa <Memory_free>
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <EventOfProtectionEquipment_getFromBuffer>:
}

EventOfProtectionEquipment
EventOfProtectionEquipment_getFromBuffer(EventOfProtectionEquipment self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b086      	sub	sp, #24
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 6;
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	3306      	adds	r3, #6
 80088d4:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 80088d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088da:	f083 0301 	eor.w	r3, r3, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d004      	beq.n	80088ee <EventOfProtectionEquipment_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	4413      	add	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	dd01      	ble.n	80088fa <EventOfProtectionEquipment_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	e03b      	b.n	8008972 <EventOfProtectionEquipment_getFromBuffer+0xb0>
    }

    if (self == NULL)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d103      	bne.n	8008908 <EventOfProtectionEquipment_getFromBuffer+0x46>
        self = (EventOfProtectionEquipment) GLOBAL_MALLOC(sizeof(struct sEventOfProtectionEquipment));
 8008900:	2014      	movs	r0, #20
 8008902:	f7fb fabf 	bl	8003e84 <Memory_malloc>
 8008906:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d030      	beq.n	8008970 <EventOfProtectionEquipment_getFromBuffer+0xae>
        EventOfProtectionEquipment_initialize(self);
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff ffba 	bl	8008888 <EventOfProtectionEquipment_initialize>

        if (!isSequence) {
 8008914:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008918:	f083 0301 	eor.w	r3, r3, #1
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <EventOfProtectionEquipment_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	68b9      	ldr	r1, [r7, #8]
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7fd fd3e 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	4413      	add	r3, r2
 8008936:	623b      	str	r3, [r7, #32]
        }

        /* event */
        self->event = msg[startIndex++];
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	623a      	str	r2, [r7, #32]
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4413      	add	r3, r2
 8008944:	781a      	ldrb	r2, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	731a      	strb	r2, [r3, #12]

        /* elapsed time */
        CP16Time2a_getFromBuffer(&(self->elapsedTime), msg, msgSize, startIndex);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f103 000d 	add.w	r0, r3, #13
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	f7fb fab3 	bl	8003ec0 <CP16Time2a_getFromBuffer>
        startIndex += 2;
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	3302      	adds	r3, #2
 800895e:	623b      	str	r3, [r7, #32]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f103 000f 	add.w	r0, r3, #15
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	f7fb fad2 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 8008970:	68fb      	ldr	r3, [r7, #12]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <EventOfProtectionEquipmentWithCP56Time2a_encode>:
 * EventOfProtectionEquipmentWithCP56Time2a : InformationObject
 ***********************************************************************/

static bool
EventOfProtectionEquipmentWithCP56Time2a_encode(EventOfProtectionEquipmentWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b086      	sub	sp, #24
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	607a      	str	r2, [r7, #4]
 8008986:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 10 : (parameters->sizeOfIOA + 10);
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <EventOfProtectionEquipmentWithCP56Time2a_encode+0x18>
 800898e:	230a      	movs	r3, #10
 8008990:	e002      	b.n	8008998 <EventOfProtectionEquipmentWithCP56Time2a_encode+0x1e>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	330a      	adds	r3, #10
 8008998:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800899a:	68b8      	ldr	r0, [r7, #8]
 800899c:	f003 fc42 	bl	800c224 <Frame_getSpaceLeft>
 80089a0:	4602      	mov	r2, r0
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	4293      	cmp	r3, r2
 80089a6:	dd01      	ble.n	80089ac <EventOfProtectionEquipmentWithCP56Time2a_encode+0x32>
        return false;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e01a      	b.n	80089e2 <EventOfProtectionEquipmentWithCP56Time2a_encode+0x68>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f7fd fc95 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, (uint8_t) self->event);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	7b1b      	ldrb	r3, [r3, #12]
 80089bc:	4619      	mov	r1, r3
 80089be:	68b8      	ldr	r0, [r7, #8]
 80089c0:	f003 fc0e 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->elapsedTime.encodedValue, 2);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	330d      	adds	r3, #13
 80089c8:	2202      	movs	r2, #2
 80089ca:	4619      	mov	r1, r3
 80089cc:	68b8      	ldr	r0, [r7, #8]
 80089ce:	f003 fc18 	bl	800c202 <Frame_appendBytes>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	330f      	adds	r3, #15
 80089d6:	2207      	movs	r2, #7
 80089d8:	4619      	mov	r1, r3
 80089da:	68b8      	ldr	r0, [r7, #8]
 80089dc:	f003 fc11 	bl	800c202 <Frame_appendBytes>

    return true;
 80089e0:	2301      	movs	r3, #1
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <EventOfProtectionEquipmentWithCP56Time2a_initialize>:
        (DestroyFunction) EventOfProtectionEquipmentWithCP56Time2a_destroy
};

static void
EventOfProtectionEquipmentWithCP56Time2a_initialize(EventOfProtectionEquipmentWithCP56Time2a self)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(eventOfProtectionEquipmentWithCP56Time2aVFT);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a05      	ldr	r2, [pc, #20]	; (8008a0c <EventOfProtectionEquipmentWithCP56Time2a_initialize+0x20>)
 80089f8:	609a      	str	r2, [r3, #8]
    self->type = M_EP_TD_1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2226      	movs	r2, #38	; 0x26
 80089fe:	711a      	strb	r2, [r3, #4]
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	20000210 	.word	0x20000210

08008a10 <EventOfProtectionEquipmentWithCP56Time2a_destroy>:

void
EventOfProtectionEquipmentWithCP56Time2a_destroy(EventOfProtectionEquipmentWithCP56Time2a self)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fb fa46 	bl	8003eaa <Memory_free>
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer>:
}

EventOfProtectionEquipmentWithCP56Time2a
EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer(EventOfProtectionEquipmentWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b086      	sub	sp, #24
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
 8008a32:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 10;
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	330a      	adds	r3, #10
 8008a38:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8008a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a3e:	f083 0301 	eor.w	r3, r3, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d004      	beq.n	8008a52 <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	4413      	add	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	dd01      	ble.n	8008a5e <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e03b      	b.n	8008ad6 <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0xb0>
    }

    if (self == NULL)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0x46>
        self = (EventOfProtectionEquipmentWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sEventOfProtectionEquipmentWithCP56Time2a));
 8008a64:	2018      	movs	r0, #24
 8008a66:	f7fb fa0d 	bl	8003e84 <Memory_malloc>
 8008a6a:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d030      	beq.n	8008ad4 <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0xae>
        EventOfProtectionEquipmentWithCP56Time2a_initialize(self);
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f7ff ffba 	bl	80089ec <EventOfProtectionEquipmentWithCP56Time2a_initialize>

        if (!isSequence) {
 8008a78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a7c:	f083 0301 	eor.w	r3, r3, #1
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <EventOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7fd fc8c 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	6a3a      	ldr	r2, [r7, #32]
 8008a98:	4413      	add	r3, r2
 8008a9a:	623b      	str	r3, [r7, #32]
        }

        /* event */
        self->event = msg[startIndex++];
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	623a      	str	r2, [r7, #32]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	781a      	ldrb	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	731a      	strb	r2, [r3, #12]

        /* elapsed time */
        CP16Time2a_getFromBuffer(&(self->elapsedTime), msg, msgSize, startIndex);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f103 000d 	add.w	r0, r3, #13
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	f7fb fa01 	bl	8003ec0 <CP16Time2a_getFromBuffer>
        startIndex += 2;
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	623b      	str	r3, [r7, #32]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f103 000f 	add.w	r0, r3, #15
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	f7fb fa4a 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <PackedStartEventsOfProtectionEquipment_encode>:
 * PackedStartEventsOfProtectionEquipment : InformationObject
 ***********************************************************************/

static bool
PackedStartEventsOfProtectionEquipment_encode(PackedStartEventsOfProtectionEquipment self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	607a      	str	r2, [r7, #4]
 8008aea:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 7 : (parameters->sizeOfIOA + 7);
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <PackedStartEventsOfProtectionEquipment_encode+0x18>
 8008af2:	2307      	movs	r3, #7
 8008af4:	e002      	b.n	8008afc <PackedStartEventsOfProtectionEquipment_encode+0x1e>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	3307      	adds	r3, #7
 8008afc:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8008afe:	68b8      	ldr	r0, [r7, #8]
 8008b00:	f003 fb90 	bl	800c224 <Frame_getSpaceLeft>
 8008b04:	4602      	mov	r2, r0
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	dd01      	ble.n	8008b10 <PackedStartEventsOfProtectionEquipment_encode+0x32>
        return false;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e020      	b.n	8008b52 <PackedStartEventsOfProtectionEquipment_encode+0x74>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7fd fbe3 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, (uint8_t) self->event);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	7b1b      	ldrb	r3, [r3, #12]
 8008b20:	4619      	mov	r1, r3
 8008b22:	68b8      	ldr	r0, [r7, #8]
 8008b24:	f003 fb5c 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->qdp);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	7b5b      	ldrb	r3, [r3, #13]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	68b8      	ldr	r0, [r7, #8]
 8008b30:	f003 fb56 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->elapsedTime.encodedValue, 2);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	330e      	adds	r3, #14
 8008b38:	2202      	movs	r2, #2
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	68b8      	ldr	r0, [r7, #8]
 8008b3e:	f003 fb60 	bl	800c202 <Frame_appendBytes>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3310      	adds	r3, #16
 8008b46:	2203      	movs	r2, #3
 8008b48:	4619      	mov	r1, r3
 8008b4a:	68b8      	ldr	r0, [r7, #8]
 8008b4c:	f003 fb59 	bl	800c202 <Frame_appendBytes>

    return true;
 8008b50:	2301      	movs	r3, #1
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <PackedStartEventsOfProtectionEquipment_initialize>:
        (DestroyFunction) PackedStartEventsOfProtectionEquipment_destroy
};

static void
PackedStartEventsOfProtectionEquipment_initialize(PackedStartEventsOfProtectionEquipment self)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(packedStartEventsOfProtectionEquipmentVFT);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a05      	ldr	r2, [pc, #20]	; (8008b7c <PackedStartEventsOfProtectionEquipment_initialize+0x20>)
 8008b68:	609a      	str	r2, [r3, #8]
    self->type = M_EP_TB_1;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2212      	movs	r2, #18
 8008b6e:	711a      	strb	r2, [r3, #4]
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	20000218 	.word	0x20000218

08008b80 <PackedStartEventsOfProtectionEquipment_destroy>:

void
PackedStartEventsOfProtectionEquipment_destroy(PackedStartEventsOfProtectionEquipment self)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7fb f98e 	bl	8003eaa <Memory_free>
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <PackedStartEventsOfProtectionEquipment_getFromBuffer>:
}

PackedStartEventsOfProtectionEquipment
PackedStartEventsOfProtectionEquipment_getFromBuffer(PackedStartEventsOfProtectionEquipment self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b086      	sub	sp, #24
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 7;
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	3307      	adds	r3, #7
 8008ba8:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8008baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bae:	f083 0301 	eor.w	r3, r3, #1
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d004      	beq.n	8008bc2 <PackedStartEventsOfProtectionEquipment_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	dd01      	ble.n	8008bce <PackedStartEventsOfProtectionEquipment_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e044      	b.n	8008c58 <PackedStartEventsOfProtectionEquipment_getFromBuffer+0xc2>
    }

    if (self == NULL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <PackedStartEventsOfProtectionEquipment_getFromBuffer+0x46>
        self = (PackedStartEventsOfProtectionEquipment) GLOBAL_MALLOC(sizeof(struct sPackedStartEventsOfProtectionEquipment));
 8008bd4:	2014      	movs	r0, #20
 8008bd6:	f7fb f955 	bl	8003e84 <Memory_malloc>
 8008bda:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d039      	beq.n	8008c56 <PackedStartEventsOfProtectionEquipment_getFromBuffer+0xc0>
        PackedStartEventsOfProtectionEquipment_initialize(self);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff ffba 	bl	8008b5c <PackedStartEventsOfProtectionEquipment_initialize>

        if (!isSequence) {
 8008be8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bec:	f083 0301 	eor.w	r3, r3, #1
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <PackedStartEventsOfProtectionEquipment_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7fd fbd4 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	6a3a      	ldr	r2, [r7, #32]
 8008c08:	4413      	add	r3, r2
 8008c0a:	623b      	str	r3, [r7, #32]
        }

        /* event */
        self->event = msg[startIndex++];
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	623a      	str	r2, [r7, #32]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4413      	add	r3, r2
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	731a      	strb	r2, [r3, #12]

        /* qdp */
        self->qdp = msg[startIndex++];
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	623a      	str	r2, [r7, #32]
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4413      	add	r3, r2
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	735a      	strb	r2, [r3, #13]

        /* elapsed time */
        CP16Time2a_getFromBuffer(&(self->elapsedTime), msg, msgSize, startIndex);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f103 000e 	add.w	r0, r3, #14
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	f7fb f940 	bl	8003ec0 <CP16Time2a_getFromBuffer>
        startIndex += 2;
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	3302      	adds	r3, #2
 8008c44:	623b      	str	r3, [r7, #32]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f103 0010 	add.w	r0, r3, #16
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	f7fb f95f 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 8008c56:	68fb      	ldr	r3, [r7, #12]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_encode>:
 * PackedStartEventsOfProtectionEquipmentWithCP56Time2a : InformationObject
 ***************************************************************************/

static bool
PackedStartEventsOfProtectionEquipmentWithCP56Time2a_encode(PackedStartEventsOfProtectionEquipmentWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 11 : (parameters->sizeOfIOA + 11);
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_encode+0x18>
 8008c74:	230b      	movs	r3, #11
 8008c76:	e002      	b.n	8008c7e <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_encode+0x1e>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	330b      	adds	r3, #11
 8008c7e:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8008c80:	68b8      	ldr	r0, [r7, #8]
 8008c82:	f003 facf 	bl	800c224 <Frame_getSpaceLeft>
 8008c86:	4602      	mov	r2, r0
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	dd01      	ble.n	8008c92 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_encode+0x32>
        return false;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e020      	b.n	8008cd4 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_encode+0x74>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8008c92:	78fb      	ldrb	r3, [r7, #3]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7fd fb22 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, (uint8_t) self->event);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	7b1b      	ldrb	r3, [r3, #12]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	68b8      	ldr	r0, [r7, #8]
 8008ca6:	f003 fa9b 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->qdp);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	7b5b      	ldrb	r3, [r3, #13]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	68b8      	ldr	r0, [r7, #8]
 8008cb2:	f003 fa95 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->elapsedTime.encodedValue, 2);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	330e      	adds	r3, #14
 8008cba:	2202      	movs	r2, #2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	68b8      	ldr	r0, [r7, #8]
 8008cc0:	f003 fa9f 	bl	800c202 <Frame_appendBytes>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3310      	adds	r3, #16
 8008cc8:	2207      	movs	r2, #7
 8008cca:	4619      	mov	r1, r3
 8008ccc:	68b8      	ldr	r0, [r7, #8]
 8008cce:	f003 fa98 	bl	800c202 <Frame_appendBytes>

    return true;
 8008cd2:	2301      	movs	r3, #1
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_initialize>:
        (DestroyFunction) PackedStartEventsOfProtectionEquipmentWithCP56Time2a_destroy
};

static void
PackedStartEventsOfProtectionEquipmentWithCP56Time2a_initialize(PackedStartEventsOfProtectionEquipmentWithCP56Time2a self)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(packedStartEventsOfProtectionEquipmentWithCP56Time2aVFT);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a05      	ldr	r2, [pc, #20]	; (8008cfc <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_initialize+0x20>)
 8008ce8:	609a      	str	r2, [r3, #8]
    self->type = M_EP_TE_1;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2227      	movs	r2, #39	; 0x27
 8008cee:	711a      	strb	r2, [r3, #4]
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	20000220 	.word	0x20000220

08008d00 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_destroy>:

void
PackedStartEventsOfProtectionEquipmentWithCP56Time2a_destroy(PackedStartEventsOfProtectionEquipmentWithCP56Time2a self)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7fb f8ce 	bl	8003eaa <Memory_free>
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer>:
}

PackedStartEventsOfProtectionEquipmentWithCP56Time2a
PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer(PackedStartEventsOfProtectionEquipmentWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b086      	sub	sp, #24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 11;
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	330b      	adds	r3, #11
 8008d28:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8008d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d2e:	f083 0301 	eor.w	r3, r3, #1
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d004      	beq.n	8008d42 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	4413      	add	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	dd01      	ble.n	8008d4e <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e044      	b.n	8008dd8 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0xc2>
    }

    if (self == NULL)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d103      	bne.n	8008d5c <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0x46>
        self = (PackedStartEventsOfProtectionEquipmentWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sPackedStartEventsOfProtectionEquipmentWithCP56Time2a));
 8008d54:	2018      	movs	r0, #24
 8008d56:	f7fb f895 	bl	8003e84 <Memory_malloc>
 8008d5a:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d039      	beq.n	8008dd6 <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0xc0>
        PackedStartEventsOfProtectionEquipmentWithCP56Time2a_initialize(self);
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7ff ffba 	bl	8008cdc <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_initialize>

        if (!isSequence) {
 8008d68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d6c:	f083 0301 	eor.w	r3, r3, #1
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <PackedStartEventsOfProtectionEquipmentWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7fd fb14 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	6a3a      	ldr	r2, [r7, #32]
 8008d88:	4413      	add	r3, r2
 8008d8a:	623b      	str	r3, [r7, #32]
        }

        /* event */
        self->event = msg[startIndex++];
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	623a      	str	r2, [r7, #32]
 8008d92:	461a      	mov	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4413      	add	r3, r2
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	731a      	strb	r2, [r3, #12]

        /* qdp */
        self->qdp = msg[startIndex++];
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	623a      	str	r2, [r7, #32]
 8008da4:	461a      	mov	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4413      	add	r3, r2
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	735a      	strb	r2, [r3, #13]

        /* elapsed time */
        CP16Time2a_getFromBuffer(&(self->elapsedTime), msg, msgSize, startIndex);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f103 000e 	add.w	r0, r3, #14
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	f7fb f880 	bl	8003ec0 <CP16Time2a_getFromBuffer>
        startIndex += 2;
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	3302      	adds	r3, #2
 8008dc4:	623b      	str	r3, [r7, #32]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f103 0010 	add.w	r0, r3, #16
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	f7fb f8c9 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <PacketOutputCircuitInfo_encode>:
 * PacketOutputCircuitInfo : InformationObject
 ***********************************************************************/

static bool
PacketOutputCircuitInfo_encode(PackedOutputCircuitInfo self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 7 : (parameters->sizeOfIOA + 7);
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <PacketOutputCircuitInfo_encode+0x18>
 8008df4:	2307      	movs	r3, #7
 8008df6:	e002      	b.n	8008dfe <PacketOutputCircuitInfo_encode+0x1e>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	3307      	adds	r3, #7
 8008dfe:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8008e00:	68b8      	ldr	r0, [r7, #8]
 8008e02:	f003 fa0f 	bl	800c224 <Frame_getSpaceLeft>
 8008e06:	4602      	mov	r2, r0
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	dd01      	ble.n	8008e12 <PacketOutputCircuitInfo_encode+0x32>
        return false;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e020      	b.n	8008e54 <PacketOutputCircuitInfo_encode+0x74>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	68b9      	ldr	r1, [r7, #8]
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7fd fa62 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, (uint8_t) self->oci);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	7b1b      	ldrb	r3, [r3, #12]
 8008e22:	4619      	mov	r1, r3
 8008e24:	68b8      	ldr	r0, [r7, #8]
 8008e26:	f003 f9db 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->qdp);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	7b5b      	ldrb	r3, [r3, #13]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	68b8      	ldr	r0, [r7, #8]
 8008e32:	f003 f9d5 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->operatingTime.encodedValue, 2);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	330e      	adds	r3, #14
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	68b8      	ldr	r0, [r7, #8]
 8008e40:	f003 f9df 	bl	800c202 <Frame_appendBytes>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 3);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3310      	adds	r3, #16
 8008e48:	2203      	movs	r2, #3
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68b8      	ldr	r0, [r7, #8]
 8008e4e:	f003 f9d8 	bl	800c202 <Frame_appendBytes>

    return true;
 8008e52:	2301      	movs	r3, #1
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <PacketOutputCircuitInfo_initialize>:
        (DestroyFunction) PackedOutputCircuitInfo_destroy
};

static void
PacketOutputCircuitInfo_initialize(PackedOutputCircuitInfo self)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(packedOutputCircuitInfoVFT);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a05      	ldr	r2, [pc, #20]	; (8008e7c <PacketOutputCircuitInfo_initialize+0x20>)
 8008e68:	609a      	str	r2, [r3, #8]
    self->type = M_EP_TC_1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2213      	movs	r2, #19
 8008e6e:	711a      	strb	r2, [r3, #4]
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	20000228 	.word	0x20000228

08008e80 <PackedOutputCircuitInfo_destroy>:

void
PackedOutputCircuitInfo_destroy(PackedOutputCircuitInfo self)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7fb f80e 	bl	8003eaa <Memory_free>
}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <PackedOutputCircuitInfo_getFromBuffer>:
}

PackedOutputCircuitInfo
PackedOutputCircuitInfo_getFromBuffer(PackedOutputCircuitInfo self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b086      	sub	sp, #24
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 7;
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	3307      	adds	r3, #7
 8008ea8:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8008eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008eae:	f083 0301 	eor.w	r3, r3, #1
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <PackedOutputCircuitInfo_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	dd01      	ble.n	8008ece <PackedOutputCircuitInfo_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e044      	b.n	8008f58 <PackedOutputCircuitInfo_getFromBuffer+0xc2>
    }

    if (self == NULL)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <PackedOutputCircuitInfo_getFromBuffer+0x46>
        self = (PackedOutputCircuitInfo) GLOBAL_MALLOC(sizeof(struct sPackedOutputCircuitInfo));
 8008ed4:	2014      	movs	r0, #20
 8008ed6:	f7fa ffd5 	bl	8003e84 <Memory_malloc>
 8008eda:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d039      	beq.n	8008f56 <PackedOutputCircuitInfo_getFromBuffer+0xc0>
        PacketOutputCircuitInfo_initialize(self);
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff ffba 	bl	8008e5c <PacketOutputCircuitInfo_initialize>

        if (!isSequence) {
 8008ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008eec:	f083 0301 	eor.w	r3, r3, #1
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <PackedOutputCircuitInfo_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7fd fa54 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	6a3a      	ldr	r2, [r7, #32]
 8008f08:	4413      	add	r3, r2
 8008f0a:	623b      	str	r3, [r7, #32]
        }

        /* OCI - output circuit information */
        self->oci = msg[startIndex++];
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	623a      	str	r2, [r7, #32]
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4413      	add	r3, r2
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	731a      	strb	r2, [r3, #12]

        /* qdp */
        self->qdp = msg[startIndex++];
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	623a      	str	r2, [r7, #32]
 8008f24:	461a      	mov	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4413      	add	r3, r2
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	735a      	strb	r2, [r3, #13]

        /* operating time */
        CP16Time2a_getFromBuffer(&(self->operatingTime), msg, msgSize, startIndex);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f103 000e 	add.w	r0, r3, #14
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	f7fa ffc0 	bl	8003ec0 <CP16Time2a_getFromBuffer>
        startIndex += 2;
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	3302      	adds	r3, #2
 8008f44:	623b      	str	r3, [r7, #32]

        /* timestamp */
        CP24Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f103 0010 	add.w	r0, r3, #16
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	f7fa ffdf 	bl	8003f14 <CP24Time2a_getFromBuffer>
    }

    return self;
 8008f56:	68fb      	ldr	r3, [r7, #12]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <PackedOutputCircuitInfoWithCP56Time2a_encode>:
 * PackedOutputCircuitInfoWithCP56Time2a : InformationObject
 ***********************************************************************/

static bool
PackedOutputCircuitInfoWithCP56Time2a_encode(PackedOutputCircuitInfoWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 11 : (parameters->sizeOfIOA + 11);
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <PackedOutputCircuitInfoWithCP56Time2a_encode+0x18>
 8008f74:	230b      	movs	r3, #11
 8008f76:	e002      	b.n	8008f7e <PackedOutputCircuitInfoWithCP56Time2a_encode+0x1e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	330b      	adds	r3, #11
 8008f7e:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8008f80:	68b8      	ldr	r0, [r7, #8]
 8008f82:	f003 f94f 	bl	800c224 <Frame_getSpaceLeft>
 8008f86:	4602      	mov	r2, r0
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	dd01      	ble.n	8008f92 <PackedOutputCircuitInfoWithCP56Time2a_encode+0x32>
        return false;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e020      	b.n	8008fd4 <PackedOutputCircuitInfoWithCP56Time2a_encode+0x74>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f7fd f9a2 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, (uint8_t) self->oci);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	7b1b      	ldrb	r3, [r3, #12]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	68b8      	ldr	r0, [r7, #8]
 8008fa6:	f003 f91b 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte(frame, (uint8_t) self->qdp);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	7b5b      	ldrb	r3, [r3, #13]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	68b8      	ldr	r0, [r7, #8]
 8008fb2:	f003 f915 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->operatingTime.encodedValue, 2);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	330e      	adds	r3, #14
 8008fba:	2202      	movs	r2, #2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	68b8      	ldr	r0, [r7, #8]
 8008fc0:	f003 f91f 	bl	800c202 <Frame_appendBytes>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3310      	adds	r3, #16
 8008fc8:	2207      	movs	r2, #7
 8008fca:	4619      	mov	r1, r3
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f003 f918 	bl	800c202 <Frame_appendBytes>

    return true;
 8008fd2:	2301      	movs	r3, #1
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <PackedOutputCircuitInfoWithCP56Time2a_initialize>:
        (DestroyFunction) PackedOutputCircuitInfoWithCP56Time2a_destroy
};

static void
PackedOutputCircuitInfoWithCP56Time2a_initialize(PackedOutputCircuitInfoWithCP56Time2a self)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(packedOutputCircuitInfoWithCP56Time2aVFT);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a05      	ldr	r2, [pc, #20]	; (8008ffc <PackedOutputCircuitInfoWithCP56Time2a_initialize+0x20>)
 8008fe8:	609a      	str	r2, [r3, #8]
    self->type = M_EP_TF_1;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2228      	movs	r2, #40	; 0x28
 8008fee:	711a      	strb	r2, [r3, #4]
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20000230 	.word	0x20000230

08009000 <PackedOutputCircuitInfoWithCP56Time2a_destroy>:

void
PackedOutputCircuitInfoWithCP56Time2a_destroy(PackedOutputCircuitInfoWithCP56Time2a self)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7fa ff4e 	bl	8003eaa <Memory_free>
}
 800900e:	bf00      	nop
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer>:
}

PackedOutputCircuitInfoWithCP56Time2a
PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer(PackedOutputCircuitInfoWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b086      	sub	sp, #24
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
 8009022:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 11;
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	330b      	adds	r3, #11
 8009028:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 800902a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800902e:	f083 0301 	eor.w	r3, r3, #1
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	4413      	add	r3, r2
 8009040:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	dd01      	ble.n	800904e <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	e044      	b.n	80090d8 <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer+0xc2>
    }

    if (self == NULL)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer+0x46>
        self = (PackedOutputCircuitInfoWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sPackedOutputCircuitInfoWithCP56Time2a));
 8009054:	2018      	movs	r0, #24
 8009056:	f7fa ff15 	bl	8003e84 <Memory_malloc>
 800905a:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d039      	beq.n	80090d6 <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer+0xc0>
        PackedOutputCircuitInfoWithCP56Time2a_initialize(self);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff ffba 	bl	8008fdc <PackedOutputCircuitInfoWithCP56Time2a_initialize>

        if (!isSequence) {
 8009068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800906c:	f083 0301 	eor.w	r3, r3, #1
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <PackedOutputCircuitInfoWithCP56Time2a_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7fd f994 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	6a3a      	ldr	r2, [r7, #32]
 8009088:	4413      	add	r3, r2
 800908a:	623b      	str	r3, [r7, #32]
        }

        /* OCI - output circuit information */
        self->oci = msg[startIndex++];
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	623a      	str	r2, [r7, #32]
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4413      	add	r3, r2
 8009098:	781a      	ldrb	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	731a      	strb	r2, [r3, #12]

        /* qdp */
        self->qdp = msg[startIndex++];
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	623a      	str	r2, [r7, #32]
 80090a4:	461a      	mov	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4413      	add	r3, r2
 80090aa:	781a      	ldrb	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	735a      	strb	r2, [r3, #13]

        /* operating time */
        CP16Time2a_getFromBuffer(&(self->operatingTime), msg, msgSize, startIndex);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f103 000e 	add.w	r0, r3, #14
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	f7fa ff00 	bl	8003ec0 <CP16Time2a_getFromBuffer>
        startIndex += 2;
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	3302      	adds	r3, #2
 80090c4:	623b      	str	r3, [r7, #32]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f103 0010 	add.w	r0, r3, #16
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	f7fa ff49 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 80090d6:	68fb      	ldr	r3, [r7, #12]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <PackedSinglePointWithSCD_encode>:
 * PackedSinglePointWithSCD : InformationObject
 ***********************************************************************/

static bool
PackedSinglePointWithSCD_encode(PackedSinglePointWithSCD self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 5 : (parameters->sizeOfIOA + 5);
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <PackedSinglePointWithSCD_encode+0x18>
 80090f4:	2305      	movs	r3, #5
 80090f6:	e002      	b.n	80090fe <PackedSinglePointWithSCD_encode+0x1e>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	3305      	adds	r3, #5
 80090fe:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8009100:	68b8      	ldr	r0, [r7, #8]
 8009102:	f003 f88f 	bl	800c224 <Frame_getSpaceLeft>
 8009106:	4602      	mov	r2, r0
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	4293      	cmp	r3, r2
 800910c:	dd01      	ble.n	8009112 <PackedSinglePointWithSCD_encode+0x32>
        return false;
 800910e:	2300      	movs	r3, #0
 8009110:	e013      	b.n	800913a <PackedSinglePointWithSCD_encode+0x5a>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7fd f8e2 	bl	80062e2 <InformationObject_encodeBase>

    Frame_appendBytes(frame, self->scd.encodedValue, 4);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	330c      	adds	r3, #12
 8009122:	2204      	movs	r2, #4
 8009124:	4619      	mov	r1, r3
 8009126:	68b8      	ldr	r0, [r7, #8]
 8009128:	f003 f86b 	bl	800c202 <Frame_appendBytes>

    Frame_setNextByte(frame, (uint8_t) self->qds);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	7c1b      	ldrb	r3, [r3, #16]
 8009130:	4619      	mov	r1, r3
 8009132:	68b8      	ldr	r0, [r7, #8]
 8009134:	f003 f854 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8009138:	2301      	movs	r3, #1
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <PackedSinglePointWithSCD_initialize>:
        (DestroyFunction) PackedSinglePointWithSCD_destroy
};

static void
PackedSinglePointWithSCD_initialize(PackedSinglePointWithSCD self)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(packedSinglePointWithSCDVFT);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a05      	ldr	r2, [pc, #20]	; (8009164 <PackedSinglePointWithSCD_initialize+0x20>)
 8009150:	609a      	str	r2, [r3, #8]
    self->type = M_PS_NA_1;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2214      	movs	r2, #20
 8009156:	711a      	strb	r2, [r3, #4]
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	20000238 	.word	0x20000238

08009168 <PackedSinglePointWithSCD_destroy>:

void
PackedSinglePointWithSCD_destroy(PackedSinglePointWithSCD self)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7fa fe9a 	bl	8003eaa <Memory_free>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <PackedSinglePointWithSCD_getFromBuffer>:
}

PackedSinglePointWithSCD
PackedSinglePointWithSCD_getFromBuffer(PackedSinglePointWithSCD self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	607a      	str	r2, [r7, #4]
 800918a:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 5;
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	3305      	adds	r3, #5
 8009190:	617b      	str	r3, [r7, #20]

    if (!isSequence)
 8009192:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009196:	f083 0301 	eor.w	r3, r3, #1
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <PackedSinglePointWithSCD_getFromBuffer+0x2c>
        minSize += parameters->sizeOfIOA;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	4413      	add	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	dd01      	ble.n	80091b6 <PackedSinglePointWithSCD_getFromBuffer+0x38>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e049      	b.n	800924a <PackedSinglePointWithSCD_getFromBuffer+0xcc>
    }

    if (self == NULL)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <PackedSinglePointWithSCD_getFromBuffer+0x46>
        self = (PackedSinglePointWithSCD) GLOBAL_MALLOC(sizeof(struct sPackedSinglePointWithSCD));
 80091bc:	2014      	movs	r0, #20
 80091be:	f7fa fe61 	bl	8003e84 <Memory_malloc>
 80091c2:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d03e      	beq.n	8009248 <PackedSinglePointWithSCD_getFromBuffer+0xca>
        PackedSinglePointWithSCD_initialize(self);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff ffba 	bl	8009144 <PackedSinglePointWithSCD_initialize>

        if (!isSequence) {
 80091d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091d4:	f083 0301 	eor.w	r3, r3, #1
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <PackedSinglePointWithSCD_getFromBuffer+0x76>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	68b9      	ldr	r1, [r7, #8]
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f7fd f8e0 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	6a3a      	ldr	r2, [r7, #32]
 80091f0:	4413      	add	r3, r2
 80091f2:	623b      	str	r3, [r7, #32]
        }

        /* SCD */
        self->scd.encodedValue[0] = msg[startIndex++];
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	623a      	str	r2, [r7, #32]
 80091fa:	461a      	mov	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4413      	add	r3, r2
 8009200:	781a      	ldrb	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	731a      	strb	r2, [r3, #12]
        self->scd.encodedValue[1] = msg[startIndex++];
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	623a      	str	r2, [r7, #32]
 800920c:	461a      	mov	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4413      	add	r3, r2
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	735a      	strb	r2, [r3, #13]
        self->scd.encodedValue[2] = msg[startIndex++];
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	623a      	str	r2, [r7, #32]
 800921e:	461a      	mov	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4413      	add	r3, r2
 8009224:	781a      	ldrb	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	739a      	strb	r2, [r3, #14]
        self->scd.encodedValue[3] = msg[startIndex++];
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	623a      	str	r2, [r7, #32]
 8009230:	461a      	mov	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	73da      	strb	r2, [r3, #15]

        /* QDS */
        self->qds = msg[startIndex];
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	4413      	add	r3, r2
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	741a      	strb	r2, [r3, #16]
    }

    return self;
 8009248:	68fb      	ldr	r3, [r7, #12]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <SingleCommand_encode>:
 * SingleCommand
 *******************************************/

static bool
SingleCommand_encode(SingleCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b086      	sub	sp, #24
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <SingleCommand_encode+0x18>
 8009266:	2301      	movs	r3, #1
 8009268:	e002      	b.n	8009270 <SingleCommand_encode+0x1e>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	3301      	adds	r3, #1
 8009270:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8009272:	68b8      	ldr	r0, [r7, #8]
 8009274:	f002 ffd6 	bl	800c224 <Frame_getSpaceLeft>
 8009278:	4602      	mov	r2, r0
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	4293      	cmp	r3, r2
 800927e:	dd01      	ble.n	8009284 <SingleCommand_encode+0x32>
        return false;
 8009280:	2300      	movs	r3, #0
 8009282:	e00c      	b.n	800929e <SingleCommand_encode+0x4c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	68b9      	ldr	r1, [r7, #8]
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f7fd f829 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->sco);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	7b1b      	ldrb	r3, [r3, #12]
 8009294:	4619      	mov	r1, r3
 8009296:	68b8      	ldr	r0, [r7, #8]
 8009298:	f002 ffa2 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800929c:	2301      	movs	r3, #1
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <SingleCommand_initialize>:
        (DestroyFunction) SingleCommand_destroy
};

static void
SingleCommand_initialize(SingleCommand self)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(singleCommandVFT);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a05      	ldr	r2, [pc, #20]	; (80092c8 <SingleCommand_initialize+0x20>)
 80092b4:	609a      	str	r2, [r3, #8]
    self->type = C_SC_NA_1;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	222d      	movs	r2, #45	; 0x2d
 80092ba:	711a      	strb	r2, [r3, #4]
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	20000240 	.word	0x20000240

080092cc <SingleCommand_destroy>:

void
SingleCommand_destroy(SingleCommand self)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7fa fde8 	bl	8003eaa <Memory_free>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <SingleCommand_create>:

SingleCommand
SingleCommand_create(SingleCommand self, int ioa, bool command, bool selectCommand, int qu)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	4611      	mov	r1, r2
 80092ee:	461a      	mov	r2, r3
 80092f0:	460b      	mov	r3, r1
 80092f2:	71fb      	strb	r3, [r7, #7]
 80092f4:	4613      	mov	r3, r2
 80092f6:	71bb      	strb	r3, [r7, #6]
    if (self == NULL)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <SingleCommand_create+0x24>
		self = (SingleCommand) GLOBAL_MALLOC(sizeof(struct sSingleCommand));
 80092fe:	2010      	movs	r0, #16
 8009300:	f7fa fdc0 	bl	8003e84 <Memory_malloc>
 8009304:	60f8      	str	r0, [r7, #12]

    if (self) {
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01d      	beq.n	8009348 <SingleCommand_create+0x66>
        SingleCommand_initialize(self);
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f7ff ffcb 	bl	80092a8 <SingleCommand_initialize>

        self->objectAddress = ioa;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	601a      	str	r2, [r3, #0]

        uint8_t sco = ((qu & 0x1f) * 4);
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 031f 	and.w	r3, r3, #31
 8009320:	b2db      	uxtb	r3, r3
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	75fb      	strb	r3, [r7, #23]

        if (command) sco |= 0x01;
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d003      	beq.n	8009334 <SingleCommand_create+0x52>
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	f043 0301 	orr.w	r3, r3, #1
 8009332:	75fb      	strb	r3, [r7, #23]

        if (selectCommand) sco |= 0x80;
 8009334:	79bb      	ldrb	r3, [r7, #6]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <SingleCommand_create+0x60>
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009340:	75fb      	strb	r3, [r7, #23]

        self->sco = sco;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	7dfa      	ldrb	r2, [r7, #23]
 8009346:	731a      	strb	r2, [r3, #12]
    }

    return self;
 8009348:	68fb      	ldr	r3, [r7, #12]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <SingleCommand_getFromBuffer>:
}

SingleCommand
SingleCommand_getFromBuffer(SingleCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
 800935e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 1;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	695a      	ldr	r2, [r3, #20]
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	4413      	add	r3, r2
 8009368:	3301      	adds	r3, #1
 800936a:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	dd01      	ble.n	8009378 <SingleCommand_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009374:	2300      	movs	r3, #0
 8009376:	e01e      	b.n	80093b6 <SingleCommand_getFromBuffer+0x64>
    }

    if (self == NULL)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d103      	bne.n	8009386 <SingleCommand_getFromBuffer+0x34>
		self = (SingleCommand) GLOBAL_MALLOC(sizeof(struct sSingleCommand));
 800937e:	2010      	movs	r0, #16
 8009380:	f7fa fd80 	bl	8003e84 <Memory_malloc>
 8009384:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d013      	beq.n	80093b4 <SingleCommand_getFromBuffer+0x62>
        SingleCommand_initialize(self);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff ff8b 	bl	80092a8 <SingleCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f7fd f806 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	4413      	add	r3, r2
 80093a6:	623b      	str	r3, [r7, #32]

        /* SCO */
        self->sco = msg[startIndex];
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	781a      	ldrb	r2, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	731a      	strb	r2, [r3, #12]
    }

    return self;
 80093b4:	68fb      	ldr	r3, [r7, #12]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <SingleCommandWithCP56Time2a_encode>:
 * SingleCommandWithCP56Time2a : SingleCommand
 ***********************************************************************/

static bool
SingleCommandWithCP56Time2a_encode(SingleCommandWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b086      	sub	sp, #24
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	607a      	str	r2, [r7, #4]
 80093ca:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 8 : (parameters->sizeOfIOA + 8);
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <SingleCommandWithCP56Time2a_encode+0x18>
 80093d2:	2308      	movs	r3, #8
 80093d4:	e002      	b.n	80093dc <SingleCommandWithCP56Time2a_encode+0x1e>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	3308      	adds	r3, #8
 80093dc:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80093de:	68b8      	ldr	r0, [r7, #8]
 80093e0:	f002 ff20 	bl	800c224 <Frame_getSpaceLeft>
 80093e4:	4602      	mov	r2, r0
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	4293      	cmp	r3, r2
 80093ea:	dd01      	ble.n	80093f0 <SingleCommandWithCP56Time2a_encode+0x32>
        return false;
 80093ec:	2300      	movs	r3, #0
 80093ee:	e00d      	b.n	800940c <SingleCommandWithCP56Time2a_encode+0x4e>

    SingleCommand_encode((SingleCommand) self, frame, parameters, isSequence);
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	68b9      	ldr	r1, [r7, #8]
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f7ff ff2b 	bl	8009252 <SingleCommand_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	330d      	adds	r3, #13
 8009400:	2207      	movs	r2, #7
 8009402:	4619      	mov	r1, r3
 8009404:	68b8      	ldr	r0, [r7, #8]
 8009406:	f002 fefc 	bl	800c202 <Frame_appendBytes>

    return true;
 800940a:	2301      	movs	r3, #1
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SingleCommandWithCP56Time2a_initialize>:
        (DestroyFunction) SingleCommandWithCP56Time2a_destroy
};

static void
SingleCommandWithCP56Time2a_initialize(SingleCommandWithCP56Time2a self)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(singleCommandWithCP56Time2aVFT);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a05      	ldr	r2, [pc, #20]	; (8009434 <SingleCommandWithCP56Time2a_initialize+0x20>)
 8009420:	609a      	str	r2, [r3, #8]
    self->type = C_SC_TA_1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	223a      	movs	r2, #58	; 0x3a
 8009426:	711a      	strb	r2, [r3, #4]
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	20000248 	.word	0x20000248

08009438 <SingleCommandWithCP56Time2a_destroy>:

void
SingleCommandWithCP56Time2a_destroy(SingleCommandWithCP56Time2a self)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7fa fd32 	bl	8003eaa <Memory_free>
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <SingleCommandWithCP56Time2a_getFromBuffer>:
}

SingleCommandWithCP56Time2a
SingleCommandWithCP56Time2a_getFromBuffer(SingleCommandWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b086      	sub	sp, #24
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 8;
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	695a      	ldr	r2, [r3, #20]
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	4413      	add	r3, r2
 8009464:	3308      	adds	r3, #8
 8009466:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	dd01      	ble.n	8009474 <SingleCommandWithCP56Time2a_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009470:	2300      	movs	r3, #0
 8009472:	e029      	b.n	80094c8 <SingleCommandWithCP56Time2a_getFromBuffer+0x7a>
    }

    if (self == NULL)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <SingleCommandWithCP56Time2a_getFromBuffer+0x34>
		self = (SingleCommandWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sSingleCommandWithCP56Time2a));
 800947a:	2014      	movs	r0, #20
 800947c:	f7fa fd02 	bl	8003e84 <Memory_malloc>
 8009480:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d01e      	beq.n	80094c6 <SingleCommandWithCP56Time2a_getFromBuffer+0x78>
        SingleCommandWithCP56Time2a_initialize(self);
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7ff ffc3 	bl	8009414 <SingleCommandWithCP56Time2a_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f7fc ff88 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	6a3a      	ldr	r2, [r7, #32]
 80094a0:	4413      	add	r3, r2
 80094a2:	623b      	str	r3, [r7, #32]

        /* SCO */
        self->sco = msg[startIndex++];
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	623a      	str	r2, [r7, #32]
 80094aa:	461a      	mov	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	731a      	strb	r2, [r3, #12]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f103 000d 	add.w	r0, r3, #13
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	f7fa fd51 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 80094c6:	68fb      	ldr	r3, [r7, #12]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <DoubleCommand_encode>:
 * DoubleCommand : InformationObject
 *******************************************/

static bool
DoubleCommand_encode(DoubleCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <DoubleCommand_encode+0x18>
 80094e4:	2301      	movs	r3, #1
 80094e6:	e002      	b.n	80094ee <DoubleCommand_encode+0x1e>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	3301      	adds	r3, #1
 80094ee:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80094f0:	68b8      	ldr	r0, [r7, #8]
 80094f2:	f002 fe97 	bl	800c224 <Frame_getSpaceLeft>
 80094f6:	4602      	mov	r2, r0
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	4293      	cmp	r3, r2
 80094fc:	dd01      	ble.n	8009502 <DoubleCommand_encode+0x32>
        return false;
 80094fe:	2300      	movs	r3, #0
 8009500:	e00c      	b.n	800951c <DoubleCommand_encode+0x4c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7fc feea 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->dcq);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	7b1b      	ldrb	r3, [r3, #12]
 8009512:	4619      	mov	r1, r3
 8009514:	68b8      	ldr	r0, [r7, #8]
 8009516:	f002 fe63 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800951a:	2301      	movs	r3, #1
}
 800951c:	4618      	mov	r0, r3
 800951e:	3718      	adds	r7, #24
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <DoubleCommand_initialize>:
        (DestroyFunction) DoubleCommand_destroy
};

static void
DoubleCommand_initialize(DoubleCommand self)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(doubleCommandVFT);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a05      	ldr	r2, [pc, #20]	; (8009544 <DoubleCommand_initialize+0x20>)
 8009530:	609a      	str	r2, [r3, #8]
    self->type = C_DC_NA_1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	222e      	movs	r2, #46	; 0x2e
 8009536:	711a      	strb	r2, [r3, #4]
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	20000250 	.word	0x20000250

08009548 <DoubleCommand_destroy>:

void
DoubleCommand_destroy(DoubleCommand self)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7fa fcaa 	bl	8003eaa <Memory_free>
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <DoubleCommand_getFromBuffer>:
}

DoubleCommand
DoubleCommand_getFromBuffer(DoubleCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 1;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	695a      	ldr	r2, [r3, #20]
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	4413      	add	r3, r2
 8009574:	3301      	adds	r3, #1
 8009576:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	dd01      	ble.n	8009584 <DoubleCommand_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009580:	2300      	movs	r3, #0
 8009582:	e01e      	b.n	80095c2 <DoubleCommand_getFromBuffer+0x64>
    }

    if (self == NULL)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <DoubleCommand_getFromBuffer+0x34>
		self = (DoubleCommand) GLOBAL_MALLOC(sizeof(struct sDoubleCommand));
 800958a:	2010      	movs	r0, #16
 800958c:	f7fa fc7a 	bl	8003e84 <Memory_malloc>
 8009590:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d013      	beq.n	80095c0 <DoubleCommand_getFromBuffer+0x62>
        DoubleCommand_initialize(self);
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7ff ffc3 	bl	8009524 <DoubleCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	68b9      	ldr	r1, [r7, #8]
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7fc ff00 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	6a3a      	ldr	r2, [r7, #32]
 80095b0:	4413      	add	r3, r2
 80095b2:	623b      	str	r3, [r7, #32]

        /* SCO */
        self->dcq = msg[startIndex];
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	4413      	add	r3, r2
 80095ba:	781a      	ldrb	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	731a      	strb	r2, [r3, #12]
    }

    return self;
 80095c0:	68fb      	ldr	r3, [r7, #12]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <DoubleCommandWithCP56Time2a_encode>:
 **********************************************/


static bool
DoubleCommandWithCP56Time2a_encode(DoubleCommandWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	607a      	str	r2, [r7, #4]
 80095d6:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 8 : (parameters->sizeOfIOA + 8);
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <DoubleCommandWithCP56Time2a_encode+0x18>
 80095de:	2308      	movs	r3, #8
 80095e0:	e002      	b.n	80095e8 <DoubleCommandWithCP56Time2a_encode+0x1e>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	3308      	adds	r3, #8
 80095e8:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80095ea:	68b8      	ldr	r0, [r7, #8]
 80095ec:	f002 fe1a 	bl	800c224 <Frame_getSpaceLeft>
 80095f0:	4602      	mov	r2, r0
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	4293      	cmp	r3, r2
 80095f6:	dd01      	ble.n	80095fc <DoubleCommandWithCP56Time2a_encode+0x32>
        return false;
 80095f8:	2300      	movs	r3, #0
 80095fa:	e00d      	b.n	8009618 <DoubleCommandWithCP56Time2a_encode+0x4e>

    DoubleCommand_encode((DoubleCommand) self, frame, parameters, isSequence);
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	68b9      	ldr	r1, [r7, #8]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f7ff ff64 	bl	80094d0 <DoubleCommand_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	330d      	adds	r3, #13
 800960c:	2207      	movs	r2, #7
 800960e:	4619      	mov	r1, r3
 8009610:	68b8      	ldr	r0, [r7, #8]
 8009612:	f002 fdf6 	bl	800c202 <Frame_appendBytes>

    return true;
 8009616:	2301      	movs	r3, #1
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <DoubleCommandWithCP56Time2a_initialize>:
        (DestroyFunction) DoubleCommandWithCP56Time2a_destroy
};

static void
DoubleCommandWithCP56Time2a_initialize(DoubleCommandWithCP56Time2a self)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(doubleCommandWithCP56Time2aVFT);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a05      	ldr	r2, [pc, #20]	; (8009640 <DoubleCommandWithCP56Time2a_initialize+0x20>)
 800962c:	609a      	str	r2, [r3, #8]
    self->type = C_DC_TA_1;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	223b      	movs	r2, #59	; 0x3b
 8009632:	711a      	strb	r2, [r3, #4]
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	20000258 	.word	0x20000258

08009644 <DoubleCommandWithCP56Time2a_destroy>:

void
DoubleCommandWithCP56Time2a_destroy(DoubleCommandWithCP56Time2a self)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7fa fc2c 	bl	8003eaa <Memory_free>
}
 8009652:	bf00      	nop
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <DoubleCommandWithCP56Time2a_getFromBuffer>:
}

DoubleCommandWithCP56Time2a
DoubleCommandWithCP56Time2a_getFromBuffer(DoubleCommandWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b086      	sub	sp, #24
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
 8009666:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 8;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	695a      	ldr	r2, [r3, #20]
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	4413      	add	r3, r2
 8009670:	3308      	adds	r3, #8
 8009672:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	dd01      	ble.n	8009680 <DoubleCommandWithCP56Time2a_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800967c:	2300      	movs	r3, #0
 800967e:	e029      	b.n	80096d4 <DoubleCommandWithCP56Time2a_getFromBuffer+0x7a>
    }

    if (self == NULL)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d103      	bne.n	800968e <DoubleCommandWithCP56Time2a_getFromBuffer+0x34>
        self = (DoubleCommandWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sDoubleCommandWithCP56Time2a));
 8009686:	2014      	movs	r0, #20
 8009688:	f7fa fbfc 	bl	8003e84 <Memory_malloc>
 800968c:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d01e      	beq.n	80096d2 <DoubleCommandWithCP56Time2a_getFromBuffer+0x78>
        DoubleCommandWithCP56Time2a_initialize(self);
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f7ff ffc3 	bl	8009620 <DoubleCommandWithCP56Time2a_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7fc fe82 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	6a3a      	ldr	r2, [r7, #32]
 80096ac:	4413      	add	r3, r2
 80096ae:	623b      	str	r3, [r7, #32]

        /* DCQ */
        self->dcq = msg[startIndex++];
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	623a      	str	r2, [r7, #32]
 80096b6:	461a      	mov	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4413      	add	r3, r2
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	731a      	strb	r2, [r3, #12]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f103 000d 	add.w	r0, r3, #13
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	f7fa fc4b 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 80096d2:	68fb      	ldr	r3, [r7, #12]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <StepCommand_encode>:
 * StepCommand : InformationObject
 *******************************************/

static bool
StepCommand_encode(StepCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <StepCommand_encode+0x18>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e002      	b.n	80096fa <StepCommand_encode+0x1e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	3301      	adds	r3, #1
 80096fa:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80096fc:	68b8      	ldr	r0, [r7, #8]
 80096fe:	f002 fd91 	bl	800c224 <Frame_getSpaceLeft>
 8009702:	4602      	mov	r2, r0
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	4293      	cmp	r3, r2
 8009708:	dd01      	ble.n	800970e <StepCommand_encode+0x32>
        return false;
 800970a:	2300      	movs	r3, #0
 800970c:	e00c      	b.n	8009728 <StepCommand_encode+0x4c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	68b9      	ldr	r1, [r7, #8]
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7fc fde4 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->dcq);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	7b1b      	ldrb	r3, [r3, #12]
 800971e:	4619      	mov	r1, r3
 8009720:	68b8      	ldr	r0, [r7, #8]
 8009722:	f002 fd5d 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8009726:	2301      	movs	r3, #1
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <StepCommand_initialize>:
        (DestroyFunction) StepCommand_destroy
};

static void
StepCommand_initialize(StepCommand self)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(stepCommandVFT);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a05      	ldr	r2, [pc, #20]	; (8009750 <StepCommand_initialize+0x20>)
 800973c:	609a      	str	r2, [r3, #8]
    self->type = C_RC_NA_1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	222f      	movs	r2, #47	; 0x2f
 8009742:	711a      	strb	r2, [r3, #4]
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	20000260 	.word	0x20000260

08009754 <StepCommand_destroy>:

void
StepCommand_destroy(StepCommand self)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fa fba4 	bl	8003eaa <Memory_free>
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <StepCommand_getFromBuffer>:
}

StepCommand
StepCommand_getFromBuffer(StepCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b086      	sub	sp, #24
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	607a      	str	r2, [r7, #4]
 8009776:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 1;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	695a      	ldr	r2, [r3, #20]
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	4413      	add	r3, r2
 8009780:	3301      	adds	r3, #1
 8009782:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	dd01      	ble.n	8009790 <StepCommand_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800978c:	2300      	movs	r3, #0
 800978e:	e01e      	b.n	80097ce <StepCommand_getFromBuffer+0x64>
    }

    if (self == NULL)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d103      	bne.n	800979e <StepCommand_getFromBuffer+0x34>
		self = (StepCommand) GLOBAL_MALLOC(sizeof(struct sStepCommand));
 8009796:	2010      	movs	r0, #16
 8009798:	f7fa fb74 	bl	8003e84 <Memory_malloc>
 800979c:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d013      	beq.n	80097cc <StepCommand_getFromBuffer+0x62>
        StepCommand_initialize(self);
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7ff ffc3 	bl	8009730 <StepCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7fc fdfa 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	6a3a      	ldr	r2, [r7, #32]
 80097bc:	4413      	add	r3, r2
 80097be:	623b      	str	r3, [r7, #32]

        /* SCO */
        self->dcq = msg[startIndex];
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	4413      	add	r3, r2
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	731a      	strb	r2, [r3, #12]
    }

    return self;
 80097cc:	68fb      	ldr	r3, [r7, #12]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <StepCommandWithCP56Time2a_encode>:
 * StepCommandWithCP56Time2a : InformationObject
 *************************************************/

static bool
StepCommandWithCP56Time2a_encode(StepCommandWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b086      	sub	sp, #24
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
 80097e2:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 8 : (parameters->sizeOfIOA + 8);
 80097e4:	78fb      	ldrb	r3, [r7, #3]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <StepCommandWithCP56Time2a_encode+0x18>
 80097ea:	2308      	movs	r3, #8
 80097ec:	e002      	b.n	80097f4 <StepCommandWithCP56Time2a_encode+0x1e>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	3308      	adds	r3, #8
 80097f4:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 80097f6:	68b8      	ldr	r0, [r7, #8]
 80097f8:	f002 fd14 	bl	800c224 <Frame_getSpaceLeft>
 80097fc:	4602      	mov	r2, r0
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	4293      	cmp	r3, r2
 8009802:	dd01      	ble.n	8009808 <StepCommandWithCP56Time2a_encode+0x32>
        return false;
 8009804:	2300      	movs	r3, #0
 8009806:	e00d      	b.n	8009824 <StepCommandWithCP56Time2a_encode+0x4e>

    StepCommand_encode((StepCommand) self, frame, parameters, isSequence);
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	68b9      	ldr	r1, [r7, #8]
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7ff ff64 	bl	80096dc <StepCommand_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	330d      	adds	r3, #13
 8009818:	2207      	movs	r2, #7
 800981a:	4619      	mov	r1, r3
 800981c:	68b8      	ldr	r0, [r7, #8]
 800981e:	f002 fcf0 	bl	800c202 <Frame_appendBytes>

    return true;
 8009822:	2301      	movs	r3, #1
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <StepCommandWithCP56Time2a_initialize>:
        (DestroyFunction) StepCommandWithCP56Time2a_destroy
};

static void
StepCommandWithCP56Time2a_initialize(StepCommandWithCP56Time2a self)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(stepCommandWithCP56Time2aVFT);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a05      	ldr	r2, [pc, #20]	; (800984c <StepCommandWithCP56Time2a_initialize+0x20>)
 8009838:	609a      	str	r2, [r3, #8]
    self->type = C_RC_TA_1;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	223c      	movs	r2, #60	; 0x3c
 800983e:	711a      	strb	r2, [r3, #4]
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	20000268 	.word	0x20000268

08009850 <StepCommandWithCP56Time2a_destroy>:

void
StepCommandWithCP56Time2a_destroy(StepCommandWithCP56Time2a self)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fa fb26 	bl	8003eaa <Memory_free>
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <StepCommandWithCP56Time2a_getFromBuffer>:
}

StepCommandWithCP56Time2a
StepCommandWithCP56Time2a_getFromBuffer(StepCommandWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b086      	sub	sp, #24
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 8;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	695a      	ldr	r2, [r3, #20]
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	4413      	add	r3, r2
 800987c:	3308      	adds	r3, #8
 800987e:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	429a      	cmp	r2, r3
 8009886:	dd01      	ble.n	800988c <StepCommandWithCP56Time2a_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009888:	2300      	movs	r3, #0
 800988a:	e029      	b.n	80098e0 <StepCommandWithCP56Time2a_getFromBuffer+0x7a>
    }

    if (self == NULL)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d103      	bne.n	800989a <StepCommandWithCP56Time2a_getFromBuffer+0x34>
        self = (StepCommandWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sStepCommandWithCP56Time2a));
 8009892:	2014      	movs	r0, #20
 8009894:	f7fa faf6 	bl	8003e84 <Memory_malloc>
 8009898:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d01e      	beq.n	80098de <StepCommandWithCP56Time2a_getFromBuffer+0x78>
        StepCommandWithCP56Time2a_initialize(self);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff ffc3 	bl	800982c <StepCommandWithCP56Time2a_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f7fc fd7c 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	6a3a      	ldr	r2, [r7, #32]
 80098b8:	4413      	add	r3, r2
 80098ba:	623b      	str	r3, [r7, #32]

        /* SCO */
        self->dcq = msg[startIndex++];
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	623a      	str	r2, [r7, #32]
 80098c2:	461a      	mov	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4413      	add	r3, r2
 80098c8:	781a      	ldrb	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	731a      	strb	r2, [r3, #12]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f103 000d 	add.w	r0, r3, #13
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	f7fa fb45 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 80098de:	68fb      	ldr	r3, [r7, #12]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <SetpointCommandNormalized_encode>:
 * SetpointCommandNormalized : InformationObject
 ************************************************/

static bool
SetpointCommandNormalized_encode(SetpointCommandNormalized self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 3 : (parameters->sizeOfIOA + 3);
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <SetpointCommandNormalized_encode+0x18>
 80098fc:	2303      	movs	r3, #3
 80098fe:	e002      	b.n	8009906 <SetpointCommandNormalized_encode+0x1e>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	3303      	adds	r3, #3
 8009906:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8009908:	68b8      	ldr	r0, [r7, #8]
 800990a:	f002 fc8b 	bl	800c224 <Frame_getSpaceLeft>
 800990e:	4602      	mov	r2, r0
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	4293      	cmp	r3, r2
 8009914:	dd01      	ble.n	800991a <SetpointCommandNormalized_encode+0x32>
        return false;
 8009916:	2300      	movs	r3, #0
 8009918:	e013      	b.n	8009942 <SetpointCommandNormalized_encode+0x5a>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f7fc fcde 	bl	80062e2 <InformationObject_encodeBase>

    Frame_appendBytes(frame, self->encodedValue, 2);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	330c      	adds	r3, #12
 800992a:	2202      	movs	r2, #2
 800992c:	4619      	mov	r1, r3
 800992e:	68b8      	ldr	r0, [r7, #8]
 8009930:	f002 fc67 	bl	800c202 <Frame_appendBytes>
    Frame_setNextByte(frame, self->qos);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	7b9b      	ldrb	r3, [r3, #14]
 8009938:	4619      	mov	r1, r3
 800993a:	68b8      	ldr	r0, [r7, #8]
 800993c:	f002 fc50 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8009940:	2301      	movs	r3, #1
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <SetpointCommandNormalized_initialize>:
        (DestroyFunction) SetpointCommandNormalized_destroy
};

static void
SetpointCommandNormalized_initialize(SetpointCommandNormalized self)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(setpointCommandNormalizedVFT);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a05      	ldr	r2, [pc, #20]	; (800996c <SetpointCommandNormalized_initialize+0x20>)
 8009958:	609a      	str	r2, [r3, #8]
    self->type = C_SE_NA_1;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2230      	movs	r2, #48	; 0x30
 800995e:	711a      	strb	r2, [r3, #4]
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	20000270 	.word	0x20000270

08009970 <SetpointCommandNormalized_destroy>:

void
SetpointCommandNormalized_destroy(SetpointCommandNormalized self)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7fa fa96 	bl	8003eaa <Memory_free>
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <SetpointCommandNormalized_getFromBuffer>:
}

SetpointCommandNormalized
SetpointCommandNormalized_getFromBuffer(SetpointCommandNormalized self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 3;
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	695a      	ldr	r2, [r3, #20]
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	4413      	add	r3, r2
 800999c:	3303      	adds	r3, #3
 800999e:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	dd01      	ble.n	80099ac <SetpointCommandNormalized_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e030      	b.n	8009a0e <SetpointCommandNormalized_getFromBuffer+0x88>
    }

    if (self == NULL)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d103      	bne.n	80099ba <SetpointCommandNormalized_getFromBuffer+0x34>
		self = (SetpointCommandNormalized) GLOBAL_MALLOC(sizeof(struct sSetpointCommandNormalized));
 80099b2:	2010      	movs	r0, #16
 80099b4:	f7fa fa66 	bl	8003e84 <Memory_malloc>
 80099b8:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d025      	beq.n	8009a0c <SetpointCommandNormalized_getFromBuffer+0x86>
        SetpointCommandNormalized_initialize(self);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7ff ffc3 	bl	800994c <SetpointCommandNormalized_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f7fc fcec 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	4413      	add	r3, r2
 80099da:	623b      	str	r3, [r7, #32]

        self->encodedValue[0] = msg[startIndex++];
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	623a      	str	r2, [r7, #32]
 80099e2:	461a      	mov	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4413      	add	r3, r2
 80099e8:	781a      	ldrb	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg[startIndex++];
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	623a      	str	r2, [r7, #32]
 80099f4:	461a      	mov	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4413      	add	r3, r2
 80099fa:	781a      	ldrb	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	735a      	strb	r2, [r3, #13]

        /* QOS - qualifier of setpoint command */
        self->qos = msg[startIndex];
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	4413      	add	r3, r2
 8009a06:	781a      	ldrb	r2, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	739a      	strb	r2, [r3, #14]
    }

    return self;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <SetpointCommandNormalizedWithCP56Time2a_encode>:
 * SetpointCommandNormalizedWithCP56Time2a : SetpointCommandNormalized
 **********************************************************************/

static bool
SetpointCommandNormalizedWithCP56Time2a_encode(SetpointCommandNormalizedWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b086      	sub	sp, #24
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]
 8009a22:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 10 : (parameters->sizeOfIOA + 10);
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <SetpointCommandNormalizedWithCP56Time2a_encode+0x18>
 8009a2a:	230a      	movs	r3, #10
 8009a2c:	e002      	b.n	8009a34 <SetpointCommandNormalizedWithCP56Time2a_encode+0x1e>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	330a      	adds	r3, #10
 8009a34:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8009a36:	68b8      	ldr	r0, [r7, #8]
 8009a38:	f002 fbf4 	bl	800c224 <Frame_getSpaceLeft>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4293      	cmp	r3, r2
 8009a42:	dd01      	ble.n	8009a48 <SetpointCommandNormalizedWithCP56Time2a_encode+0x32>
        return false;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e00d      	b.n	8009a64 <SetpointCommandNormalizedWithCP56Time2a_encode+0x4e>

    SetpointCommandNormalized_encode((SetpointCommandNormalized) self, frame, parameters, isSequence);
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7ff ff4a 	bl	80098e8 <SetpointCommandNormalized_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	330f      	adds	r3, #15
 8009a58:	2207      	movs	r2, #7
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	68b8      	ldr	r0, [r7, #8]
 8009a5e:	f002 fbd0 	bl	800c202 <Frame_appendBytes>

    return true;
 8009a62:	2301      	movs	r3, #1
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <SetpointCommandNormalizedWithCP56Time2a_initialize>:
        (DestroyFunction) SetpointCommandNormalizedWithCP56Time2a_destroy
};

static void
SetpointCommandNormalizedWithCP56Time2a_initialize(SetpointCommandNormalizedWithCP56Time2a self)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(setpointCommandNormalizedWithCP56Time2aVFT);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a05      	ldr	r2, [pc, #20]	; (8009a8c <SetpointCommandNormalizedWithCP56Time2a_initialize+0x20>)
 8009a78:	609a      	str	r2, [r3, #8]
    self->type = C_SE_TA_1;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	223d      	movs	r2, #61	; 0x3d
 8009a7e:	711a      	strb	r2, [r3, #4]
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	20000278 	.word	0x20000278

08009a90 <SetpointCommandNormalizedWithCP56Time2a_destroy>:

void
SetpointCommandNormalizedWithCP56Time2a_destroy(SetpointCommandNormalizedWithCP56Time2a self)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7fa fa06 	bl	8003eaa <Memory_free>
}
 8009a9e:	bf00      	nop
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <SetpointCommandNormalizedWithCP56Time2a_getFromBuffer>:
}

SetpointCommandNormalizedWithCP56Time2a
SetpointCommandNormalizedWithCP56Time2a_getFromBuffer(SetpointCommandNormalizedWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b086      	sub	sp, #24
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	607a      	str	r2, [r7, #4]
 8009ab2:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 10;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	695a      	ldr	r2, [r3, #20]
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	4413      	add	r3, r2
 8009abc:	330a      	adds	r3, #10
 8009abe:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	dd01      	ble.n	8009acc <SetpointCommandNormalizedWithCP56Time2a_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e03b      	b.n	8009b44 <SetpointCommandNormalizedWithCP56Time2a_getFromBuffer+0x9e>
    }

    if (self == NULL)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d103      	bne.n	8009ada <SetpointCommandNormalizedWithCP56Time2a_getFromBuffer+0x34>
        self = (SetpointCommandNormalizedWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sSetpointCommandNormalizedWithCP56Time2a));
 8009ad2:	2018      	movs	r0, #24
 8009ad4:	f7fa f9d6 	bl	8003e84 <Memory_malloc>
 8009ad8:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d030      	beq.n	8009b42 <SetpointCommandNormalizedWithCP56Time2a_getFromBuffer+0x9c>
        SetpointCommandNormalizedWithCP56Time2a_initialize(self);
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f7ff ffc3 	bl	8009a6c <SetpointCommandNormalizedWithCP56Time2a_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7fc fc5c 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	6a3a      	ldr	r2, [r7, #32]
 8009af8:	4413      	add	r3, r2
 8009afa:	623b      	str	r3, [r7, #32]

        self->encodedValue[0] = msg[startIndex++];
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	623a      	str	r2, [r7, #32]
 8009b02:	461a      	mov	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4413      	add	r3, r2
 8009b08:	781a      	ldrb	r2, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg[startIndex++];
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	623a      	str	r2, [r7, #32]
 8009b14:	461a      	mov	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4413      	add	r3, r2
 8009b1a:	781a      	ldrb	r2, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	735a      	strb	r2, [r3, #13]

        /* QOS - qualifier of setpoint command */
        self->qos = msg[startIndex++];
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	623a      	str	r2, [r7, #32]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	781a      	ldrb	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	739a      	strb	r2, [r3, #14]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f103 000f 	add.w	r0, r3, #15
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	6879      	ldr	r1, [r7, #4]
 8009b3e:	f7fa fa13 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 8009b42:	68fb      	ldr	r3, [r7, #12]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <SetpointCommandScaled_encode>:
 * SetpointCommandScaled: InformationObject
 ************************************************/

static bool
SetpointCommandScaled_encode(SetpointCommandScaled self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 3 : (parameters->sizeOfIOA + 3);
 8009b5a:	78fb      	ldrb	r3, [r7, #3]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <SetpointCommandScaled_encode+0x18>
 8009b60:	2303      	movs	r3, #3
 8009b62:	e002      	b.n	8009b6a <SetpointCommandScaled_encode+0x1e>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	3303      	adds	r3, #3
 8009b6a:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8009b6c:	68b8      	ldr	r0, [r7, #8]
 8009b6e:	f002 fb59 	bl	800c224 <Frame_getSpaceLeft>
 8009b72:	4602      	mov	r2, r0
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	4293      	cmp	r3, r2
 8009b78:	dd01      	ble.n	8009b7e <SetpointCommandScaled_encode+0x32>
        return false;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e013      	b.n	8009ba6 <SetpointCommandScaled_encode+0x5a>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8009b7e:	78fb      	ldrb	r3, [r7, #3]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7fc fbac 	bl	80062e2 <InformationObject_encodeBase>

    Frame_appendBytes(frame, self->encodedValue, 2);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	330c      	adds	r3, #12
 8009b8e:	2202      	movs	r2, #2
 8009b90:	4619      	mov	r1, r3
 8009b92:	68b8      	ldr	r0, [r7, #8]
 8009b94:	f002 fb35 	bl	800c202 <Frame_appendBytes>
    Frame_setNextByte(frame, self->qos);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	7b9b      	ldrb	r3, [r3, #14]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	68b8      	ldr	r0, [r7, #8]
 8009ba0:	f002 fb1e 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8009ba4:	2301      	movs	r3, #1
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <SetpointCommandScaled_initialize>:
        (DestroyFunction) SetpointCommandScaled_destroy
};

static void
SetpointCommandScaled_initialize(SetpointCommandScaled self)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(setpointCommandScaledVFT);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a05      	ldr	r2, [pc, #20]	; (8009bd0 <SetpointCommandScaled_initialize+0x20>)
 8009bbc:	609a      	str	r2, [r3, #8]
    self->type = C_SE_NB_1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2231      	movs	r2, #49	; 0x31
 8009bc2:	711a      	strb	r2, [r3, #4]
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	20000280 	.word	0x20000280

08009bd4 <SetpointCommandScaled_destroy>:

void
SetpointCommandScaled_destroy(SetpointCommandScaled self)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7fa f964 	bl	8003eaa <Memory_free>
}
 8009be2:	bf00      	nop
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <SetpointCommandScaled_getFromBuffer>:
}

SetpointCommandScaled
SetpointCommandScaled_getFromBuffer(SetpointCommandScaled self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b086      	sub	sp, #24
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
 8009bf6:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 3;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	695a      	ldr	r2, [r3, #20]
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	4413      	add	r3, r2
 8009c00:	3303      	adds	r3, #3
 8009c02:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	dd01      	ble.n	8009c10 <SetpointCommandScaled_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	e030      	b.n	8009c72 <SetpointCommandScaled_getFromBuffer+0x88>
    }

    if (self == NULL)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d103      	bne.n	8009c1e <SetpointCommandScaled_getFromBuffer+0x34>
		self = (SetpointCommandScaled) GLOBAL_MALLOC(sizeof(struct sSetpointCommandScaled));
 8009c16:	2010      	movs	r0, #16
 8009c18:	f7fa f934 	bl	8003e84 <Memory_malloc>
 8009c1c:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d025      	beq.n	8009c70 <SetpointCommandScaled_getFromBuffer+0x86>
        SetpointCommandScaled_initialize(self);
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff ffc3 	bl	8009bb0 <SetpointCommandScaled_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f7fc fbba 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	6a3a      	ldr	r2, [r7, #32]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	623b      	str	r3, [r7, #32]

        self->encodedValue[0] = msg[startIndex++];
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	623a      	str	r2, [r7, #32]
 8009c46:	461a      	mov	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg[startIndex++];
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	623a      	str	r2, [r7, #32]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	781a      	ldrb	r2, [r3, #0]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	735a      	strb	r2, [r3, #13]

        /* QOS - qualifier of setpoint command */
        self->qos = msg[startIndex];
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	4413      	add	r3, r2
 8009c6a:	781a      	ldrb	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	739a      	strb	r2, [r3, #14]
    }

    return self;
 8009c70:	68fb      	ldr	r3, [r7, #12]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <SetpointCommandScaledWithCP56Time2a_encode>:
 * SetpointCommandScaledWithCP56Time2a : SetpointCommandScaled
 **********************************************************************/

static bool
SetpointCommandScaledWithCP56Time2a_encode(SetpointCommandScaledWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b086      	sub	sp, #24
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	607a      	str	r2, [r7, #4]
 8009c86:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 10 : (parameters->sizeOfIOA + 10);
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <SetpointCommandScaledWithCP56Time2a_encode+0x18>
 8009c8e:	230a      	movs	r3, #10
 8009c90:	e002      	b.n	8009c98 <SetpointCommandScaledWithCP56Time2a_encode+0x1e>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	330a      	adds	r3, #10
 8009c98:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8009c9a:	68b8      	ldr	r0, [r7, #8]
 8009c9c:	f002 fac2 	bl	800c224 <Frame_getSpaceLeft>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	dd01      	ble.n	8009cac <SetpointCommandScaledWithCP56Time2a_encode+0x32>
        return false;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e00d      	b.n	8009cc8 <SetpointCommandScaledWithCP56Time2a_encode+0x4e>

    SetpointCommandScaled_encode((SetpointCommandScaled) self, frame, parameters, isSequence);
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f7ff ff4a 	bl	8009b4c <SetpointCommandScaled_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	330f      	adds	r3, #15
 8009cbc:	2207      	movs	r2, #7
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	68b8      	ldr	r0, [r7, #8]
 8009cc2:	f002 fa9e 	bl	800c202 <Frame_appendBytes>

    return true;
 8009cc6:	2301      	movs	r3, #1
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3718      	adds	r7, #24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <SetpointCommandScaledWithCP56Time2a_initialize>:
        (DestroyFunction) SetpointCommandScaledWithCP56Time2a_destroy
};

static void
SetpointCommandScaledWithCP56Time2a_initialize(SetpointCommandScaledWithCP56Time2a self)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(setpointCommandScaledWithCP56Time2aVFT);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a05      	ldr	r2, [pc, #20]	; (8009cf0 <SetpointCommandScaledWithCP56Time2a_initialize+0x20>)
 8009cdc:	609a      	str	r2, [r3, #8]
    self->type = C_SE_TB_1;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	223e      	movs	r2, #62	; 0x3e
 8009ce2:	711a      	strb	r2, [r3, #4]
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	20000288 	.word	0x20000288

08009cf4 <SetpointCommandScaledWithCP56Time2a_destroy>:

void
SetpointCommandScaledWithCP56Time2a_destroy(SetpointCommandScaledWithCP56Time2a self)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7fa f8d4 	bl	8003eaa <Memory_free>
}
 8009d02:	bf00      	nop
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <SetpointCommandScaledWithCP56Time2a_getFromBuffer>:
}

SetpointCommandScaledWithCP56Time2a
SetpointCommandScaledWithCP56Time2a_getFromBuffer(SetpointCommandScaledWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b086      	sub	sp, #24
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 10;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	695a      	ldr	r2, [r3, #20]
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	4413      	add	r3, r2
 8009d20:	330a      	adds	r3, #10
 8009d22:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	dd01      	ble.n	8009d30 <SetpointCommandScaledWithCP56Time2a_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e03b      	b.n	8009da8 <SetpointCommandScaledWithCP56Time2a_getFromBuffer+0x9e>
    }

    if (self == NULL)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d103      	bne.n	8009d3e <SetpointCommandScaledWithCP56Time2a_getFromBuffer+0x34>
        self = (SetpointCommandScaledWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sSetpointCommandScaledWithCP56Time2a));
 8009d36:	2018      	movs	r0, #24
 8009d38:	f7fa f8a4 	bl	8003e84 <Memory_malloc>
 8009d3c:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d030      	beq.n	8009da6 <SetpointCommandScaledWithCP56Time2a_getFromBuffer+0x9c>
        SetpointCommandScaledWithCP56Time2a_initialize(self);
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff ffc3 	bl	8009cd0 <SetpointCommandScaledWithCP56Time2a_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	68b9      	ldr	r1, [r7, #8]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7fc fb2a 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	6a3a      	ldr	r2, [r7, #32]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	623b      	str	r3, [r7, #32]

        self->encodedValue[0] = msg[startIndex++];
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	623a      	str	r2, [r7, #32]
 8009d66:	461a      	mov	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	781a      	ldrb	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	731a      	strb	r2, [r3, #12]
        self->encodedValue[1] = msg[startIndex++];
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	623a      	str	r2, [r7, #32]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	735a      	strb	r2, [r3, #13]

        /* QOS - qualifier of setpoint command */
        self->qos = msg[startIndex++];
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	1c5a      	adds	r2, r3, #1
 8009d88:	623a      	str	r2, [r7, #32]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4413      	add	r3, r2
 8009d90:	781a      	ldrb	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	739a      	strb	r2, [r3, #14]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f103 000f 	add.w	r0, r3, #15
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	f7fa f8e1 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 8009da6:	68fb      	ldr	r3, [r7, #12]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3718      	adds	r7, #24
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <SetpointCommandShort_encode>:
 * SetpointCommandShort: InformationObject
 ************************************************/

static bool
SetpointCommandShort_encode(SetpointCommandShort self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 5 : (parameters->sizeOfIOA + 5);
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <SetpointCommandShort_encode+0x18>
 8009dc4:	2305      	movs	r3, #5
 8009dc6:	e002      	b.n	8009dce <SetpointCommandShort_encode+0x1e>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	3305      	adds	r3, #5
 8009dce:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8009dd0:	68b8      	ldr	r0, [r7, #8]
 8009dd2:	f002 fa27 	bl	800c224 <Frame_getSpaceLeft>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	dd01      	ble.n	8009de2 <SetpointCommandShort_encode+0x32>
        return false;
 8009dde:	2300      	movs	r3, #0
 8009de0:	e014      	b.n	8009e0c <SetpointCommandShort_encode+0x5c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 8009de2:	78fb      	ldrb	r3, [r7, #3]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f7fc fa7a 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t* valueBytes = (uint8_t*) &(self->value);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	330c      	adds	r3, #12
 8009df2:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
    Frame_appendBytes(frame, valueBytes, 4);
 8009df4:	2204      	movs	r2, #4
 8009df6:	6939      	ldr	r1, [r7, #16]
 8009df8:	68b8      	ldr	r0, [r7, #8]
 8009dfa:	f002 fa02 	bl	800c202 <Frame_appendBytes>
    Frame_setNextByte(frame, valueBytes[2]);
    Frame_setNextByte(frame, valueBytes[1]);
    Frame_setNextByte(frame, valueBytes[0]);
#endif

    Frame_setNextByte(frame, self->qos);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	7c1b      	ldrb	r3, [r3, #16]
 8009e02:	4619      	mov	r1, r3
 8009e04:	68b8      	ldr	r0, [r7, #8]
 8009e06:	f002 f9eb 	bl	800c1e0 <Frame_setNextByte>

    return true;
 8009e0a:	2301      	movs	r3, #1
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <SetpointCommandShort_initialize>:
        (DestroyFunction) SetpointCommandShort_destroy
};

static void
SetpointCommandShort_initialize(SetpointCommandShort self)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(setpointCommandShortVFT);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a05      	ldr	r2, [pc, #20]	; (8009e34 <SetpointCommandShort_initialize+0x20>)
 8009e20:	609a      	str	r2, [r3, #8]
    self->type = C_SE_NC_1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2232      	movs	r2, #50	; 0x32
 8009e26:	711a      	strb	r2, [r3, #4]
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	20000290 	.word	0x20000290

08009e38 <SetpointCommandShort_destroy>:

void
SetpointCommandShort_destroy(SetpointCommandShort self)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7fa f832 	bl	8003eaa <Memory_free>
}
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <SetpointCommandShort_getFromBuffer>:
}

SetpointCommandShort
SetpointCommandShort_getFromBuffer(SetpointCommandShort self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b086      	sub	sp, #24
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	60f8      	str	r0, [r7, #12]
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	607a      	str	r2, [r7, #4]
 8009e5a:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 5;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	695a      	ldr	r2, [r3, #20]
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	4413      	add	r3, r2
 8009e64:	3305      	adds	r3, #5
 8009e66:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	dd01      	ble.n	8009e74 <SetpointCommandShort_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	e048      	b.n	8009f06 <SetpointCommandShort_getFromBuffer+0xb8>
    }

    if (self == NULL)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d103      	bne.n	8009e82 <SetpointCommandShort_getFromBuffer+0x34>
		self = (SetpointCommandShort) GLOBAL_MALLOC(sizeof(struct sSetpointCommandShort));
 8009e7a:	2014      	movs	r0, #20
 8009e7c:	f7fa f802 	bl	8003e84 <Memory_malloc>
 8009e80:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d03d      	beq.n	8009f04 <SetpointCommandShort_getFromBuffer+0xb6>
        SetpointCommandShort_initialize(self);
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7ff ffc3 	bl	8009e14 <SetpointCommandShort_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	68b9      	ldr	r1, [r7, #8]
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7fc fa88 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	6a3a      	ldr	r2, [r7, #32]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	623b      	str	r3, [r7, #32]

        uint8_t* valueBytes = (uint8_t*) &(self->value);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	330c      	adds	r3, #12
 8009ea8:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
        valueBytes[0] = msg [startIndex++];
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	623a      	str	r2, [r7, #32]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	781a      	ldrb	r2, [r3, #0]
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	623a      	str	r2, [r7, #32]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	441a      	add	r2, r3
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	7812      	ldrb	r2, [r2, #0]
 8009ece:	701a      	strb	r2, [r3, #0]
        valueBytes[2] = msg [startIndex++];
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	623a      	str	r2, [r7, #32]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	441a      	add	r2, r3
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	3302      	adds	r3, #2
 8009ee0:	7812      	ldrb	r2, [r2, #0]
 8009ee2:	701a      	strb	r2, [r3, #0]
        valueBytes[3] = msg [startIndex++];
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	623a      	str	r2, [r7, #32]
 8009eea:	461a      	mov	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	441a      	add	r2, r3
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	3303      	adds	r3, #3
 8009ef4:	7812      	ldrb	r2, [r2, #0]
 8009ef6:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
        valueBytes[0] = msg [startIndex++];
#endif

        /* QOS - qualifier of setpoint command */
        self->qos = msg[startIndex];
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	4413      	add	r3, r2
 8009efe:	781a      	ldrb	r2, [r3, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	741a      	strb	r2, [r3, #16]
    }

    return self;
 8009f04:	68fb      	ldr	r3, [r7, #12]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <SetpointCommandShortWithCP56Time2a_encode>:
 * SetpointCommandShortWithCP56Time2a : SetpointCommandShort
 **********************************************************************/

static bool
SetpointCommandShortWithCP56Time2a_encode(SetpointCommandShortWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b086      	sub	sp, #24
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
 8009f1a:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 12 : (parameters->sizeOfIOA + 12);
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <SetpointCommandShortWithCP56Time2a_encode+0x18>
 8009f22:	230c      	movs	r3, #12
 8009f24:	e002      	b.n	8009f2c <SetpointCommandShortWithCP56Time2a_encode+0x1e>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	330c      	adds	r3, #12
 8009f2c:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 8009f2e:	68b8      	ldr	r0, [r7, #8]
 8009f30:	f002 f978 	bl	800c224 <Frame_getSpaceLeft>
 8009f34:	4602      	mov	r2, r0
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	dd01      	ble.n	8009f40 <SetpointCommandShortWithCP56Time2a_encode+0x32>
        return false;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e00d      	b.n	8009f5c <SetpointCommandShortWithCP56Time2a_encode+0x4e>

    SetpointCommandShort_encode((SetpointCommandShort) self, frame, parameters, isSequence);
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	68b9      	ldr	r1, [r7, #8]
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f7ff ff32 	bl	8009db0 <SetpointCommandShort_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3311      	adds	r3, #17
 8009f50:	2207      	movs	r2, #7
 8009f52:	4619      	mov	r1, r3
 8009f54:	68b8      	ldr	r0, [r7, #8]
 8009f56:	f002 f954 	bl	800c202 <Frame_appendBytes>

    return true;
 8009f5a:	2301      	movs	r3, #1
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <SetpointCommandShortWithCP56Time2a_initialize>:
        (DestroyFunction) SetpointCommandShortWithCP56Time2a_destroy
};

static void
SetpointCommandShortWithCP56Time2a_initialize(SetpointCommandShortWithCP56Time2a self)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(setpointCommandShortWithCP56Time2aVFT);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a05      	ldr	r2, [pc, #20]	; (8009f84 <SetpointCommandShortWithCP56Time2a_initialize+0x20>)
 8009f70:	609a      	str	r2, [r3, #8]
    self->type = C_SE_TC_1;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	223f      	movs	r2, #63	; 0x3f
 8009f76:	711a      	strb	r2, [r3, #4]
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	20000298 	.word	0x20000298

08009f88 <SetpointCommandShortWithCP56Time2a_destroy>:

void
SetpointCommandShortWithCP56Time2a_destroy(SetpointCommandShortWithCP56Time2a self)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7f9 ff8a 	bl	8003eaa <Memory_free>
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <SetpointCommandShortWithCP56Time2a_getFromBuffer>:
}

SetpointCommandShortWithCP56Time2a
SetpointCommandShortWithCP56Time2a_getFromBuffer(SetpointCommandShortWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 12;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	695a      	ldr	r2, [r3, #20]
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	330c      	adds	r3, #12
 8009fb6:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	dd01      	ble.n	8009fc4 <SetpointCommandShortWithCP56Time2a_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e053      	b.n	800a06c <SetpointCommandShortWithCP56Time2a_getFromBuffer+0xce>
    }

    if (self == NULL)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d103      	bne.n	8009fd2 <SetpointCommandShortWithCP56Time2a_getFromBuffer+0x34>
        self = (SetpointCommandShortWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sSetpointCommandShortWithCP56Time2a));
 8009fca:	2018      	movs	r0, #24
 8009fcc:	f7f9 ff5a 	bl	8003e84 <Memory_malloc>
 8009fd0:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d048      	beq.n	800a06a <SetpointCommandShortWithCP56Time2a_getFromBuffer+0xcc>
        SetpointCommandShortWithCP56Time2a_initialize(self);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff ffc3 	bl	8009f64 <SetpointCommandShortWithCP56Time2a_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f7fc f9e0 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	6a3a      	ldr	r2, [r7, #32]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	623b      	str	r3, [r7, #32]

        uint8_t* valueBytes = (uint8_t*) &(self->value);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	330c      	adds	r3, #12
 8009ff8:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
        valueBytes[0] = msg [startIndex++];
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	623a      	str	r2, [r7, #32]
 800a000:	461a      	mov	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4413      	add	r3, r2
 800a006:	781a      	ldrb	r2, [r3, #0]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	623a      	str	r2, [r7, #32]
 800a012:	461a      	mov	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	441a      	add	r2, r3
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	3301      	adds	r3, #1
 800a01c:	7812      	ldrb	r2, [r2, #0]
 800a01e:	701a      	strb	r2, [r3, #0]
        valueBytes[2] = msg [startIndex++];
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	623a      	str	r2, [r7, #32]
 800a026:	461a      	mov	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	441a      	add	r2, r3
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	3302      	adds	r3, #2
 800a030:	7812      	ldrb	r2, [r2, #0]
 800a032:	701a      	strb	r2, [r3, #0]
        valueBytes[3] = msg [startIndex++];
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	623a      	str	r2, [r7, #32]
 800a03a:	461a      	mov	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	441a      	add	r2, r3
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	3303      	adds	r3, #3
 800a044:	7812      	ldrb	r2, [r2, #0]
 800a046:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
        valueBytes[0] = msg [startIndex++];
#endif

        /* QOS - qualifier of setpoint command */
        self->qos = msg[startIndex++];
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	623a      	str	r2, [r7, #32]
 800a04e:	461a      	mov	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4413      	add	r3, r2
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	741a      	strb	r2, [r3, #16]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f103 0011 	add.w	r0, r3, #17
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	6879      	ldr	r1, [r7, #4]
 800a066:	f7f9 ff7f 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800a06a:	68fb      	ldr	r3, [r7, #12]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <Bitstring32Command_encode>:
 * Bitstring32Command : InformationObject
 ************************************************/

static bool
Bitstring32Command_encode(Bitstring32Command self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 5 : (parameters->sizeOfIOA + 5);
 800a082:	78fb      	ldrb	r3, [r7, #3]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <Bitstring32Command_encode+0x18>
 800a088:	2305      	movs	r3, #5
 800a08a:	e002      	b.n	800a092 <Bitstring32Command_encode+0x1e>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	3305      	adds	r3, #5
 800a092:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a094:	68b8      	ldr	r0, [r7, #8]
 800a096:	f002 f8c5 	bl	800c224 <Frame_getSpaceLeft>
 800a09a:	4602      	mov	r2, r0
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	dd01      	ble.n	800a0a6 <Bitstring32Command_encode+0x32>
        return false;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e00e      	b.n	800a0c4 <Bitstring32Command_encode+0x50>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800a0a6:	78fb      	ldrb	r3, [r7, #3]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	68b9      	ldr	r1, [r7, #8]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7fc f918 	bl	80062e2 <InformationObject_encodeBase>

    uint8_t* valueBytes = (uint8_t*) &(self->value);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	330c      	adds	r3, #12
 800a0b6:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
    Frame_appendBytes(frame, valueBytes, 4);
 800a0b8:	2204      	movs	r2, #4
 800a0ba:	6939      	ldr	r1, [r7, #16]
 800a0bc:	68b8      	ldr	r0, [r7, #8]
 800a0be:	f002 f8a0 	bl	800c202 <Frame_appendBytes>
    Frame_setNextByte(frame, valueBytes[2]);
    Frame_setNextByte(frame, valueBytes[1]);
    Frame_setNextByte(frame, valueBytes[0]);
#endif

    return true;
 800a0c2:	2301      	movs	r3, #1
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <Bitstring32Command_initialize>:
        (DestroyFunction) Bitstring32Command_destroy
};

static void
Bitstring32Command_initialize(Bitstring32Command self)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(bitstring32CommandVFT);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a05      	ldr	r2, [pc, #20]	; (800a0ec <Bitstring32Command_initialize+0x20>)
 800a0d8:	609a      	str	r2, [r3, #8]
    self->type = C_BO_NA_1;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2233      	movs	r2, #51	; 0x33
 800a0de:	711a      	strb	r2, [r3, #4]
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	200002a0 	.word	0x200002a0

0800a0f0 <Bitstring32Command_destroy>:
    return self;
}

void
Bitstring32Command_destroy(Bitstring32Command self)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7f9 fed6 	bl	8003eaa <Memory_free>
}
 800a0fe:	bf00      	nop
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <Bitstring32Command_getFromBuffer>:
}

Bitstring32Command
Bitstring32Command_getFromBuffer(Bitstring32Command self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b086      	sub	sp, #24
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
 800a112:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 4;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	695a      	ldr	r2, [r3, #20]
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	4413      	add	r3, r2
 800a11c:	3304      	adds	r3, #4
 800a11e:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	429a      	cmp	r2, r3
 800a126:	dd01      	ble.n	800a12c <Bitstring32Command_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	e042      	b.n	800a1b2 <Bitstring32Command_getFromBuffer+0xac>
    }

    if (self == NULL)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d103      	bne.n	800a13a <Bitstring32Command_getFromBuffer+0x34>
		self = (Bitstring32Command) GLOBAL_MALLOC(sizeof(struct sBitstring32Command));
 800a132:	2010      	movs	r0, #16
 800a134:	f7f9 fea6 	bl	8003e84 <Memory_malloc>
 800a138:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d037      	beq.n	800a1b0 <Bitstring32Command_getFromBuffer+0xaa>
        Bitstring32Command_initialize(self);
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f7ff ffc3 	bl	800a0cc <Bitstring32Command_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7fc f92c 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	6a3a      	ldr	r2, [r7, #32]
 800a158:	4413      	add	r3, r2
 800a15a:	623b      	str	r3, [r7, #32]

        uint8_t* valueBytes = (uint8_t*) &(self->value);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	330c      	adds	r3, #12
 800a160:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
        valueBytes[0] = msg [startIndex++];
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	623a      	str	r2, [r7, #32]
 800a168:	461a      	mov	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	781a      	ldrb	r2, [r3, #0]
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	623a      	str	r2, [r7, #32]
 800a17a:	461a      	mov	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	441a      	add	r2, r3
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	3301      	adds	r3, #1
 800a184:	7812      	ldrb	r2, [r2, #0]
 800a186:	701a      	strb	r2, [r3, #0]
        valueBytes[2] = msg [startIndex++];
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	623a      	str	r2, [r7, #32]
 800a18e:	461a      	mov	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	441a      	add	r2, r3
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	3302      	adds	r3, #2
 800a198:	7812      	ldrb	r2, [r2, #0]
 800a19a:	701a      	strb	r2, [r3, #0]
        valueBytes[3] = msg [startIndex++];
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	623a      	str	r2, [r7, #32]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	441a      	add	r2, r3
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	3303      	adds	r3, #3
 800a1ac:	7812      	ldrb	r2, [r2, #0]
 800a1ae:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
        valueBytes[0] = msg [startIndex++];
#endif
    }

    return self;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <Bitstring32CommandWithCP56Time2a_encode>:
 * Bitstring32CommandWithCP56Time2a: Bitstring32Command
 *******************************************************/

static bool
Bitstring32CommandWithCP56Time2a_encode(Bitstring32CommandWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 12 : (parameters->sizeOfIOA + 12);
 800a1c8:	78fb      	ldrb	r3, [r7, #3]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <Bitstring32CommandWithCP56Time2a_encode+0x18>
 800a1ce:	230c      	movs	r3, #12
 800a1d0:	e002      	b.n	800a1d8 <Bitstring32CommandWithCP56Time2a_encode+0x1e>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	330c      	adds	r3, #12
 800a1d8:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a1da:	68b8      	ldr	r0, [r7, #8]
 800a1dc:	f002 f822 	bl	800c224 <Frame_getSpaceLeft>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	dd01      	ble.n	800a1ec <Bitstring32CommandWithCP56Time2a_encode+0x32>
        return false;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e00d      	b.n	800a208 <Bitstring32CommandWithCP56Time2a_encode+0x4e>

    Bitstring32Command_encode((Bitstring32Command) self, frame, parameters, isSequence);
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff ff3e 	bl	800a074 <Bitstring32Command_encode>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3310      	adds	r3, #16
 800a1fc:	2207      	movs	r2, #7
 800a1fe:	4619      	mov	r1, r3
 800a200:	68b8      	ldr	r0, [r7, #8]
 800a202:	f001 fffe 	bl	800c202 <Frame_appendBytes>

    return true;
 800a206:	2301      	movs	r3, #1
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <Bitstring32CommandWithCP56Time2a_initialize>:
        (DestroyFunction) Bitstring32CommandWithCP56Time2a_destroy
};

static void
Bitstring32CommandWithCP56Time2a_initialize(Bitstring32CommandWithCP56Time2a self)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(bitstring32CommandWithCP56Time2aVFT);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a05      	ldr	r2, [pc, #20]	; (800a230 <Bitstring32CommandWithCP56Time2a_initialize+0x20>)
 800a21c:	609a      	str	r2, [r3, #8]
    self->type = C_BO_TA_1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2240      	movs	r2, #64	; 0x40
 800a222:	711a      	strb	r2, [r3, #4]
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	200002a8 	.word	0x200002a8

0800a234 <Bitstring32CommandWithCP56Time2a_destroy>:
    return self;
}

void
Bitstring32CommandWithCP56Time2a_destroy(Bitstring32CommandWithCP56Time2a self)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7f9 fe34 	bl	8003eaa <Memory_free>
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <Bitstring32CommandWithCP56Time2a_getFromBuffer>:
}

Bitstring32CommandWithCP56Time2a
Bitstring32CommandWithCP56Time2a_getFromBuffer(Bitstring32CommandWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b086      	sub	sp, #24
 800a24e:	af00      	add	r7, sp, #0
 800a250:	60f8      	str	r0, [r7, #12]
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	607a      	str	r2, [r7, #4]
 800a256:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 11;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	695a      	ldr	r2, [r3, #20]
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	4413      	add	r3, r2
 800a260:	330b      	adds	r3, #11
 800a262:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	dd01      	ble.n	800a270 <Bitstring32CommandWithCP56Time2a_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800a26c:	2300      	movs	r3, #0
 800a26e:	e04a      	b.n	800a306 <Bitstring32CommandWithCP56Time2a_getFromBuffer+0xbc>
    }

    if (self == NULL)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d103      	bne.n	800a27e <Bitstring32CommandWithCP56Time2a_getFromBuffer+0x34>
        self = (Bitstring32CommandWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sBitstring32CommandWithCP56Time2a));
 800a276:	2018      	movs	r0, #24
 800a278:	f7f9 fe04 	bl	8003e84 <Memory_malloc>
 800a27c:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d03f      	beq.n	800a304 <Bitstring32CommandWithCP56Time2a_getFromBuffer+0xba>
        Bitstring32CommandWithCP56Time2a_initialize(self);
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f7ff ffc3 	bl	800a210 <Bitstring32CommandWithCP56Time2a_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7fc f88a 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	6a3a      	ldr	r2, [r7, #32]
 800a29c:	4413      	add	r3, r2
 800a29e:	623b      	str	r3, [r7, #32]

        uint8_t* valueBytes = (uint8_t*) &(self->value);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	330c      	adds	r3, #12
 800a2a4:	613b      	str	r3, [r7, #16]

#if (ORDER_LITTLE_ENDIAN == 1)
        valueBytes[0] = msg [startIndex++];
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	623a      	str	r2, [r7, #32]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	781a      	ldrb	r2, [r3, #0]
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	1c5a      	adds	r2, r3, #1
 800a2bc:	623a      	str	r2, [r7, #32]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	441a      	add	r2, r3
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	7812      	ldrb	r2, [r2, #0]
 800a2ca:	701a      	strb	r2, [r3, #0]
        valueBytes[2] = msg [startIndex++];
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	623a      	str	r2, [r7, #32]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	441a      	add	r2, r3
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	3302      	adds	r3, #2
 800a2dc:	7812      	ldrb	r2, [r2, #0]
 800a2de:	701a      	strb	r2, [r3, #0]
        valueBytes[3] = msg [startIndex++];
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	623a      	str	r2, [r7, #32]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	441a      	add	r2, r3
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	3303      	adds	r3, #3
 800a2f0:	7812      	ldrb	r2, [r2, #0]
 800a2f2:	701a      	strb	r2, [r3, #0]
        valueBytes[1] = msg [startIndex++];
        valueBytes[0] = msg [startIndex++];
#endif

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f103 0010 	add.w	r0, r3, #16
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	f7f9 fe32 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800a304:	68fb      	ldr	r3, [r7, #12]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <ReadCommand_encode>:
 * ReadCommand : InformationObject
 ************************************************/

static bool
ReadCommand_encode(ReadCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b086      	sub	sp, #24
 800a312:	af00      	add	r7, sp, #0
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	607a      	str	r2, [r7, #4]
 800a31a:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 0 : (parameters->sizeOfIOA + 0);
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <ReadCommand_encode+0x18>
 800a322:	2300      	movs	r3, #0
 800a324:	e001      	b.n	800a32a <ReadCommand_encode+0x1c>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a32c:	68b8      	ldr	r0, [r7, #8]
 800a32e:	f001 ff79 	bl	800c224 <Frame_getSpaceLeft>
 800a332:	4602      	mov	r2, r0
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	4293      	cmp	r3, r2
 800a338:	dd01      	ble.n	800a33e <ReadCommand_encode+0x30>
        return false;
 800a33a:	2300      	movs	r3, #0
 800a33c:	e006      	b.n	800a34c <ReadCommand_encode+0x3e>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f7fb ffcc 	bl	80062e2 <InformationObject_encodeBase>

    return true;
 800a34a:	2301      	movs	r3, #1
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <ReadCommand_initialize>:
        (DestroyFunction) ReadCommand_destroy
};

static void
ReadCommand_initialize(ReadCommand self)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(readCommandVFT);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a05      	ldr	r2, [pc, #20]	; (800a374 <ReadCommand_initialize+0x20>)
 800a360:	609a      	str	r2, [r3, #8]
    self->type = C_RD_NA_1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2266      	movs	r2, #102	; 0x66
 800a366:	711a      	strb	r2, [r3, #4]
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	200002b0 	.word	0x200002b0

0800a378 <ReadCommand_destroy>:
    return self;
}

void
ReadCommand_destroy(ReadCommand self)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7f9 fd92 	bl	8003eaa <Memory_free>
}
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <ReadCommand_getFromBuffer>:


ReadCommand
ReadCommand_getFromBuffer(ReadCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b086      	sub	sp, #24
 800a392:	af00      	add	r7, sp, #0
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 0;
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	6a3a      	ldr	r2, [r7, #32]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	dd01      	ble.n	800a3b2 <ReadCommand_getFromBuffer+0x24>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e013      	b.n	800a3da <ReadCommand_getFromBuffer+0x4c>
    }

    if (self == NULL)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d103      	bne.n	800a3c0 <ReadCommand_getFromBuffer+0x32>
		self = (ReadCommand) GLOBAL_MALLOC(sizeof(struct sReadCommand));
 800a3b8:	200c      	movs	r0, #12
 800a3ba:	f7f9 fd63 	bl	8003e84 <Memory_malloc>
 800a3be:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d008      	beq.n	800a3d8 <ReadCommand_getFromBuffer+0x4a>
        ReadCommand_initialize(self);
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff ffc4 	bl	800a354 <ReadCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	68b9      	ldr	r1, [r7, #8]
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7fb ffe9 	bl	80063aa <InformationObject_getFromBuffer>
    }

    return self;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <ClockSynchronizationCommand_encode>:
 * ClockSynchronizationCommand : InformationObject
 **************************************************/

static bool
ClockSynchronizationCommand_encode(ClockSynchronizationCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
 800a3ee:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 7 : (parameters->sizeOfIOA + 7);
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <ClockSynchronizationCommand_encode+0x18>
 800a3f6:	2307      	movs	r3, #7
 800a3f8:	e002      	b.n	800a400 <ClockSynchronizationCommand_encode+0x1e>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	3307      	adds	r3, #7
 800a400:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a402:	68b8      	ldr	r0, [r7, #8]
 800a404:	f001 ff0e 	bl	800c224 <Frame_getSpaceLeft>
 800a408:	4602      	mov	r2, r0
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	4293      	cmp	r3, r2
 800a40e:	dd01      	ble.n	800a414 <ClockSynchronizationCommand_encode+0x32>
        return false;
 800a410:	2300      	movs	r3, #0
 800a412:	e00d      	b.n	800a430 <ClockSynchronizationCommand_encode+0x4e>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	68b9      	ldr	r1, [r7, #8]
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7fb ff61 	bl	80062e2 <InformationObject_encodeBase>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	330c      	adds	r3, #12
 800a424:	2207      	movs	r2, #7
 800a426:	4619      	mov	r1, r3
 800a428:	68b8      	ldr	r0, [r7, #8]
 800a42a:	f001 feea 	bl	800c202 <Frame_appendBytes>

    return true;
 800a42e:	2301      	movs	r3, #1
}
 800a430:	4618      	mov	r0, r3
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <ClockSynchronizationCommand_initialize>:
        (DestroyFunction) ClockSynchronizationCommand_destroy
};

static void
ClockSynchronizationCommand_initialize(ClockSynchronizationCommand self)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(clockSynchronizationCommandVFT);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a05      	ldr	r2, [pc, #20]	; (800a458 <ClockSynchronizationCommand_initialize+0x20>)
 800a444:	609a      	str	r2, [r3, #8]
    self->type = C_CS_NA_1;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2267      	movs	r2, #103	; 0x67
 800a44a:	711a      	strb	r2, [r3, #4]
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	200002b8 	.word	0x200002b8

0800a45c <ClockSynchronizationCommand_destroy>:
    return self;
}

void
ClockSynchronizationCommand_destroy(ClockSynchronizationCommand self)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7f9 fd20 	bl	8003eaa <Memory_free>
}
 800a46a:	bf00      	nop
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <ClockSynchronizationCommand_getFromBuffer>:
}

ClockSynchronizationCommand
ClockSynchronizationCommand_getFromBuffer(ClockSynchronizationCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b086      	sub	sp, #24
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	607a      	str	r2, [r7, #4]
 800a47e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 7;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	695a      	ldr	r2, [r3, #20]
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	4413      	add	r3, r2
 800a488:	3307      	adds	r3, #7
 800a48a:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	dd01      	ble.n	800a498 <ClockSynchronizationCommand_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800a494:	2300      	movs	r3, #0
 800a496:	e020      	b.n	800a4da <ClockSynchronizationCommand_getFromBuffer+0x68>
    }

    if (self == NULL)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <ClockSynchronizationCommand_getFromBuffer+0x34>
		self = (ClockSynchronizationCommand) GLOBAL_MALLOC(sizeof(struct sClockSynchronizationCommand));
 800a49e:	2014      	movs	r0, #20
 800a4a0:	f7f9 fcf0 	bl	8003e84 <Memory_malloc>
 800a4a4:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d015      	beq.n	800a4d8 <ClockSynchronizationCommand_getFromBuffer+0x66>
        ClockSynchronizationCommand_initialize(self);
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f7ff ffc3 	bl	800a438 <ClockSynchronizationCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	68b9      	ldr	r1, [r7, #8]
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7fb ff76 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	6a3a      	ldr	r2, [r7, #32]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	623b      	str	r3, [r7, #32]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f103 000c 	add.w	r0, r3, #12
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	f7f9 fd48 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <InterrogationCommand_encode>:
 * InterrogationCommand : InformationObject
 ************************************************/

static bool
InterrogationCommand_encode(InterrogationCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <InterrogationCommand_encode+0x18>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e002      	b.n	800a500 <InterrogationCommand_encode+0x1e>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	3301      	adds	r3, #1
 800a500:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a502:	68b8      	ldr	r0, [r7, #8]
 800a504:	f001 fe8e 	bl	800c224 <Frame_getSpaceLeft>
 800a508:	4602      	mov	r2, r0
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	4293      	cmp	r3, r2
 800a50e:	dd01      	ble.n	800a514 <InterrogationCommand_encode+0x32>
        return false;
 800a510:	2300      	movs	r3, #0
 800a512:	e00c      	b.n	800a52e <InterrogationCommand_encode+0x4c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7fb fee1 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->qoi);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	7b1b      	ldrb	r3, [r3, #12]
 800a524:	4619      	mov	r1, r3
 800a526:	68b8      	ldr	r0, [r7, #8]
 800a528:	f001 fe5a 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800a52c:	2301      	movs	r3, #1
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <InterrogationCommand_initialize>:
        (DestroyFunction) InterrogationCommand_destroy
};

static void
InterrogationCommand_initialize(InterrogationCommand self)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(interrogationCommandVFT);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a05      	ldr	r2, [pc, #20]	; (800a558 <InterrogationCommand_initialize+0x20>)
 800a544:	609a      	str	r2, [r3, #8]
    self->type = C_IC_NA_1;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2264      	movs	r2, #100	; 0x64
 800a54a:	711a      	strb	r2, [r3, #4]
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	200002c0 	.word	0x200002c0

0800a55c <InterrogationCommand_create>:

InterrogationCommand
InterrogationCommand_create(InterrogationCommand self, int ioa, uint8_t qoi)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	4613      	mov	r3, r2
 800a568:	71fb      	strb	r3, [r7, #7]
    if (self == NULL)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d103      	bne.n	800a578 <InterrogationCommand_create+0x1c>
		self = (InterrogationCommand) GLOBAL_MALLOC(sizeof(struct sInterrogationCommand));
 800a570:	2010      	movs	r0, #16
 800a572:	f7f9 fc87 	bl	8003e84 <Memory_malloc>
 800a576:	60f8      	str	r0, [r7, #12]

    if (self) {
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d008      	beq.n	800a590 <InterrogationCommand_create+0x34>
        InterrogationCommand_initialize(self);
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff ffda 	bl	800a538 <InterrogationCommand_initialize>

        self->objectAddress = ioa;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	601a      	str	r2, [r3, #0]

        self->qoi = qoi;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	79fa      	ldrb	r2, [r7, #7]
 800a58e:	731a      	strb	r2, [r3, #12]
    }

    return self;
 800a590:	68fb      	ldr	r3, [r7, #12]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <InterrogationCommand_destroy>:

void
InterrogationCommand_destroy(InterrogationCommand self)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7f9 fc81 	bl	8003eaa <Memory_free>
}
 800a5a8:	bf00      	nop
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <InterrogationCommand_getFromBuffer>:
}

InterrogationCommand
InterrogationCommand_getFromBuffer(InterrogationCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 1;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	695a      	ldr	r2, [r3, #20]
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	dd01      	ble.n	800a5d6 <InterrogationCommand_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e01e      	b.n	800a614 <InterrogationCommand_getFromBuffer+0x64>
    }

    if (self == NULL)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d103      	bne.n	800a5e4 <InterrogationCommand_getFromBuffer+0x34>
		self = (InterrogationCommand) GLOBAL_MALLOC(sizeof(struct sInterrogationCommand));
 800a5dc:	2010      	movs	r0, #16
 800a5de:	f7f9 fc51 	bl	8003e84 <Memory_malloc>
 800a5e2:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d013      	beq.n	800a612 <InterrogationCommand_getFromBuffer+0x62>
        InterrogationCommand_initialize(self);
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff ffa4 	bl	800a538 <InterrogationCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7fb fed7 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	6a3a      	ldr	r2, [r7, #32]
 800a602:	4413      	add	r3, r2
 800a604:	623b      	str	r3, [r7, #32]

        /* QUI */
        self->qoi = msg[startIndex];
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	4413      	add	r3, r2
 800a60c:	781a      	ldrb	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	731a      	strb	r2, [r3, #12]
    }

    return self;
 800a612:	68fb      	ldr	r3, [r7, #12]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <CounterInterrogationCommand_encode>:
 * CounterInterrogationCommand : InformationObject
 **************************************************/

static bool
CounterInterrogationCommand_encode(CounterInterrogationCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <CounterInterrogationCommand_encode+0x18>
 800a630:	2301      	movs	r3, #1
 800a632:	e002      	b.n	800a63a <CounterInterrogationCommand_encode+0x1e>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	3301      	adds	r3, #1
 800a63a:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a63c:	68b8      	ldr	r0, [r7, #8]
 800a63e:	f001 fdf1 	bl	800c224 <Frame_getSpaceLeft>
 800a642:	4602      	mov	r2, r0
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	4293      	cmp	r3, r2
 800a648:	dd01      	ble.n	800a64e <CounterInterrogationCommand_encode+0x32>
        return false;
 800a64a:	2300      	movs	r3, #0
 800a64c:	e00c      	b.n	800a668 <CounterInterrogationCommand_encode+0x4c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	68b9      	ldr	r1, [r7, #8]
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7fb fe44 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->qcc);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	7b1b      	ldrb	r3, [r3, #12]
 800a65e:	4619      	mov	r1, r3
 800a660:	68b8      	ldr	r0, [r7, #8]
 800a662:	f001 fdbd 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800a666:	2301      	movs	r3, #1
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <CounterInterrogationCommand_initialize>:
        (DestroyFunction) CounterInterrogationCommand_destroy
};

static void
CounterInterrogationCommand_initialize(CounterInterrogationCommand self)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(counterInterrogationCommandVFT);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a05      	ldr	r2, [pc, #20]	; (800a690 <CounterInterrogationCommand_initialize+0x20>)
 800a67c:	609a      	str	r2, [r3, #8]
    self->type = C_CI_NA_1;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2265      	movs	r2, #101	; 0x65
 800a682:	711a      	strb	r2, [r3, #4]
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	200002c8 	.word	0x200002c8

0800a694 <CounterInterrogationCommand_destroy>:
    return self;
}

void
CounterInterrogationCommand_destroy(CounterInterrogationCommand self)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7f9 fc04 	bl	8003eaa <Memory_free>
}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <CounterInterrogationCommand_getFromBuffer>:
}

CounterInterrogationCommand
CounterInterrogationCommand_getFromBuffer(CounterInterrogationCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b086      	sub	sp, #24
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
 800a6b6:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 1;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	695a      	ldr	r2, [r3, #20]
 800a6bc:	6a3b      	ldr	r3, [r7, #32]
 800a6be:	4413      	add	r3, r2
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	dd01      	ble.n	800a6d0 <CounterInterrogationCommand_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	e01e      	b.n	800a70e <CounterInterrogationCommand_getFromBuffer+0x64>
    }

    if (self == NULL)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d103      	bne.n	800a6de <CounterInterrogationCommand_getFromBuffer+0x34>
        self = (CounterInterrogationCommand) GLOBAL_MALLOC(sizeof(struct sCounterInterrogationCommand));
 800a6d6:	2010      	movs	r0, #16
 800a6d8:	f7f9 fbd4 	bl	8003e84 <Memory_malloc>
 800a6dc:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d013      	beq.n	800a70c <CounterInterrogationCommand_getFromBuffer+0x62>
        CounterInterrogationCommand_initialize(self);
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f7ff ffc3 	bl	800a670 <CounterInterrogationCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	68b9      	ldr	r1, [r7, #8]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7fb fe5a 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	6a3a      	ldr	r2, [r7, #32]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	623b      	str	r3, [r7, #32]

        /* QCC */
        self->qcc = msg[startIndex];
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	4413      	add	r3, r2
 800a706:	781a      	ldrb	r2, [r3, #0]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	731a      	strb	r2, [r3, #12]
    }

    return self;
 800a70c:	68fb      	ldr	r3, [r7, #12]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <TestCommand_encode>:
 * TestCommand : InformationObject
 ************************************************/

static bool
TestCommand_encode(TestCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b086      	sub	sp, #24
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 2 : (parameters->sizeOfIOA + 2);
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d001      	beq.n	800a72e <TestCommand_encode+0x18>
 800a72a:	2302      	movs	r3, #2
 800a72c:	e002      	b.n	800a734 <TestCommand_encode+0x1e>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	3302      	adds	r3, #2
 800a734:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a736:	68b8      	ldr	r0, [r7, #8]
 800a738:	f001 fd74 	bl	800c224 <Frame_getSpaceLeft>
 800a73c:	4602      	mov	r2, r0
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	4293      	cmp	r3, r2
 800a742:	dd01      	ble.n	800a748 <TestCommand_encode+0x32>
        return false;
 800a744:	2300      	movs	r3, #0
 800a746:	e012      	b.n	800a76e <TestCommand_encode+0x58>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	68b9      	ldr	r1, [r7, #8]
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7fb fdc7 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->byte1);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	7b1b      	ldrb	r3, [r3, #12]
 800a758:	4619      	mov	r1, r3
 800a75a:	68b8      	ldr	r0, [r7, #8]
 800a75c:	f001 fd40 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, self->byte2);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	7b5b      	ldrb	r3, [r3, #13]
 800a764:	4619      	mov	r1, r3
 800a766:	68b8      	ldr	r0, [r7, #8]
 800a768:	f001 fd3a 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800a76c:	2301      	movs	r3, #1
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <TestCommand_initialize>:
        (DestroyFunction) TestCommand_destroy
};

static void
TestCommand_initialize(TestCommand self)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(testCommandVFT);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a05      	ldr	r2, [pc, #20]	; (800a798 <TestCommand_initialize+0x20>)
 800a784:	609a      	str	r2, [r3, #8]
    self->type = C_TS_NA_1;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2268      	movs	r2, #104	; 0x68
 800a78a:	711a      	strb	r2, [r3, #4]
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	200002d0 	.word	0x200002d0

0800a79c <TestCommand_destroy>:
    return self;
}

void
TestCommand_destroy(TestCommand self)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7f9 fb80 	bl	8003eaa <Memory_free>
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <TestCommand_getFromBuffer>:
}

TestCommand
TestCommand_getFromBuffer(TestCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	607a      	str	r2, [r7, #4]
 800a7be:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 2;
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	3302      	adds	r3, #2
 800a7c4:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	dd01      	ble.n	800a7d2 <TestCommand_getFromBuffer+0x20>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e027      	b.n	800a822 <TestCommand_getFromBuffer+0x70>
    }

    if (self == NULL)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d103      	bne.n	800a7e0 <TestCommand_getFromBuffer+0x2e>
        self = (TestCommand) GLOBAL_MALLOC(sizeof(struct sTestCommand));
 800a7d8:	2010      	movs	r0, #16
 800a7da:	f7f9 fb53 	bl	8003e84 <Memory_malloc>
 800a7de:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01c      	beq.n	800a820 <TestCommand_getFromBuffer+0x6e>
        TestCommand_initialize(self);
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7ff ffc6 	bl	800a778 <TestCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	68b9      	ldr	r1, [r7, #8]
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7fb fdd9 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	6a3a      	ldr	r2, [r7, #32]
 800a7fe:	4413      	add	r3, r2
 800a800:	623b      	str	r3, [r7, #32]

        /* test bytes */
        self->byte1 = msg[startIndex++];
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	623a      	str	r2, [r7, #32]
 800a808:	461a      	mov	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4413      	add	r3, r2
 800a80e:	781a      	ldrb	r2, [r3, #0]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	731a      	strb	r2, [r3, #12]
        self->byte2 = msg[startIndex];
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	4413      	add	r3, r2
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	735a      	strb	r2, [r3, #13]
    }

    return self;
 800a820:	68fb      	ldr	r3, [r7, #12]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <TestCommandWithCP56Time2a_encode>:
 * TestCommandWithCP56Time2a : InformationObject
 ************************************************/

static bool
TestCommandWithCP56Time2a_encode(TestCommandWithCP56Time2a self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b086      	sub	sp, #24
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 2 : (parameters->sizeOfIOA + 9);
 800a838:	78fb      	ldrb	r3, [r7, #3]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <TestCommandWithCP56Time2a_encode+0x18>
 800a83e:	2302      	movs	r3, #2
 800a840:	e002      	b.n	800a848 <TestCommandWithCP56Time2a_encode+0x1e>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	3309      	adds	r3, #9
 800a848:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a84a:	68b8      	ldr	r0, [r7, #8]
 800a84c:	f001 fcea 	bl	800c224 <Frame_getSpaceLeft>
 800a850:	4602      	mov	r2, r0
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	4293      	cmp	r3, r2
 800a856:	dd01      	ble.n	800a85c <TestCommandWithCP56Time2a_encode+0x32>
        return false;
 800a858:	2300      	movs	r3, #0
 800a85a:	e01d      	b.n	800a898 <TestCommandWithCP56Time2a_encode+0x6e>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	68b9      	ldr	r1, [r7, #8]
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7fb fd3d 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->tsc % 0x100);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	899b      	ldrh	r3, [r3, #12]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	4619      	mov	r1, r3
 800a870:	68b8      	ldr	r0, [r7, #8]
 800a872:	f001 fcb5 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte(frame, self->tsc / 0x100);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	899b      	ldrh	r3, [r3, #12]
 800a87a:	0a1b      	lsrs	r3, r3, #8
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	4619      	mov	r1, r3
 800a882:	68b8      	ldr	r0, [r7, #8]
 800a884:	f001 fcac 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->timestamp.encodedValue, 7);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	330e      	adds	r3, #14
 800a88c:	2207      	movs	r2, #7
 800a88e:	4619      	mov	r1, r3
 800a890:	68b8      	ldr	r0, [r7, #8]
 800a892:	f001 fcb6 	bl	800c202 <Frame_appendBytes>

    return true;
 800a896:	2301      	movs	r3, #1
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <TestCommandWithCP56Time2a_initialize>:
        (DestroyFunction) TestCommandWithCP56Time2a_destroy
};

static void
TestCommandWithCP56Time2a_initialize(TestCommandWithCP56Time2a self)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(testCommandWithCP56Time2aVFT);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a05      	ldr	r2, [pc, #20]	; (800a8c0 <TestCommandWithCP56Time2a_initialize+0x20>)
 800a8ac:	609a      	str	r2, [r3, #8]
    self->type = C_TS_TA_1;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	226b      	movs	r2, #107	; 0x6b
 800a8b2:	711a      	strb	r2, [r3, #4]
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	200002d8 	.word	0x200002d8

0800a8c4 <TestCommandWithCP56Time2a_destroy>:
    return self;
}

void
TestCommandWithCP56Time2a_destroy(TestCommandWithCP56Time2a self)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7f9 faec 	bl	8003eaa <Memory_free>
}
 800a8d2:	bf00      	nop
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <TestCommandWithCP56Time2a_getFromBuffer>:
}

TestCommandWithCP56Time2a
TestCommandWithCP56Time2a_getFromBuffer(TestCommandWithCP56Time2a self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	607a      	str	r2, [r7, #4]
 800a8e6:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + 9;
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	3309      	adds	r3, #9
 800a8ec:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	dd01      	ble.n	800a8fa <TestCommandWithCP56Time2a_getFromBuffer+0x20>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e039      	b.n	800a96e <TestCommandWithCP56Time2a_getFromBuffer+0x94>
    }

    if (self == NULL)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <TestCommandWithCP56Time2a_getFromBuffer+0x2e>
        self = (TestCommandWithCP56Time2a) GLOBAL_MALLOC(sizeof(struct sTestCommandWithCP56Time2a));
 800a900:	2018      	movs	r0, #24
 800a902:	f7f9 fabf 	bl	8003e84 <Memory_malloc>
 800a906:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d02e      	beq.n	800a96c <TestCommandWithCP56Time2a_getFromBuffer+0x92>
        TestCommandWithCP56Time2a_initialize(self);
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f7ff ffc6 	bl	800a8a0 <TestCommandWithCP56Time2a_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f7fb fd45 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	6a3a      	ldr	r2, [r7, #32]
 800a926:	4413      	add	r3, r2
 800a928:	623b      	str	r3, [r7, #32]

        /* test counter */
        self->tsc = msg[startIndex++];
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	1c5a      	adds	r2, r3, #1
 800a92e:	623a      	str	r2, [r7, #32]
 800a930:	461a      	mov	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4413      	add	r3, r2
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	b29a      	uxth	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	819a      	strh	r2, [r3, #12]
        self->tsc += (msg[startIndex++] * 0x100);
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	623a      	str	r2, [r7, #32]
 800a944:	461a      	mov	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4413      	add	r3, r2
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	0219      	lsls	r1, r3, #8
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	899a      	ldrh	r2, [r3, #12]
 800a952:	b28b      	uxth	r3, r1
 800a954:	4413      	add	r3, r2
 800a956:	b29a      	uxth	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	819a      	strh	r2, [r3, #12]

        /* timestamp */
        CP56Time2a_getFromBuffer(&(self->timestamp), msg, msgSize, startIndex);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f103 000e 	add.w	r0, r3, #14
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	f7f9 fafe 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800a96c:	68fb      	ldr	r3, [r7, #12]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <ResetProcessCommand_encode>:
 * ResetProcessCommand : InformationObject
 ************************************************/

static bool
ResetProcessCommand_encode(ResetProcessCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b086      	sub	sp, #24
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	60f8      	str	r0, [r7, #12]
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	607a      	str	r2, [r7, #4]
 800a982:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 800a984:	78fb      	ldrb	r3, [r7, #3]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <ResetProcessCommand_encode+0x18>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e002      	b.n	800a994 <ResetProcessCommand_encode+0x1e>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	3301      	adds	r3, #1
 800a994:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800a996:	68b8      	ldr	r0, [r7, #8]
 800a998:	f001 fc44 	bl	800c224 <Frame_getSpaceLeft>
 800a99c:	4602      	mov	r2, r0
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	dd01      	ble.n	800a9a8 <ResetProcessCommand_encode+0x32>
        return false;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e00c      	b.n	800a9c2 <ResetProcessCommand_encode+0x4c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7fb fc97 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->qrp);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	7b1b      	ldrb	r3, [r3, #12]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	68b8      	ldr	r0, [r7, #8]
 800a9bc:	f001 fc10 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800a9c0:	2301      	movs	r3, #1
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <ResetProcessCommand_initialize>:
        (DestroyFunction) ResetProcessCommand_destroy
};

static void
ResetProcessCommand_initialize(ResetProcessCommand self)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(resetProcessCommandVFT);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a05      	ldr	r2, [pc, #20]	; (800a9ec <ResetProcessCommand_initialize+0x20>)
 800a9d8:	609a      	str	r2, [r3, #8]
    self->type = C_RP_NA_1;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2269      	movs	r2, #105	; 0x69
 800a9de:	711a      	strb	r2, [r3, #4]
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	200002e0 	.word	0x200002e0

0800a9f0 <ResetProcessCommand_destroy>:
    return self;
}

void
ResetProcessCommand_destroy(ResetProcessCommand self)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7f9 fa56 	bl	8003eaa <Memory_free>
}
 800a9fe:	bf00      	nop
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <ResetProcessCommand_getFromBuffer>:
}

ResetProcessCommand
ResetProcessCommand_getFromBuffer(ResetProcessCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
 800aa12:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 1;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	695a      	ldr	r2, [r3, #20]
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	dd01      	ble.n	800aa2c <ResetProcessCommand_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e01e      	b.n	800aa6a <ResetProcessCommand_getFromBuffer+0x64>
    }

    if (self == NULL)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d103      	bne.n	800aa3a <ResetProcessCommand_getFromBuffer+0x34>
        self = (ResetProcessCommand) GLOBAL_MALLOC(sizeof(struct sResetProcessCommand));
 800aa32:	2010      	movs	r0, #16
 800aa34:	f7f9 fa26 	bl	8003e84 <Memory_malloc>
 800aa38:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d013      	beq.n	800aa68 <ResetProcessCommand_getFromBuffer+0x62>
        ResetProcessCommand_initialize(self);
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f7ff ffc3 	bl	800a9cc <ResetProcessCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f7fb fcac 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	6a3a      	ldr	r2, [r7, #32]
 800aa58:	4413      	add	r3, r2
 800aa5a:	623b      	str	r3, [r7, #32]

        /* QUI */
        self->qrp = msg[startIndex];
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	4413      	add	r3, r2
 800aa62:	781a      	ldrb	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	731a      	strb	r2, [r3, #12]
    }

    return self;
 800aa68:	68fb      	ldr	r3, [r7, #12]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <DelayAcquisitionCommand_encode>:
 * DelayAcquisitionCommand : InformationObject
 ************************************************/

static bool
DelayAcquisitionCommand_encode(DelayAcquisitionCommand self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b086      	sub	sp, #24
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	60f8      	str	r0, [r7, #12]
 800aa7a:	60b9      	str	r1, [r7, #8]
 800aa7c:	607a      	str	r2, [r7, #4]
 800aa7e:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 2 : (parameters->sizeOfIOA + 2);
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <DelayAcquisitionCommand_encode+0x18>
 800aa86:	2302      	movs	r3, #2
 800aa88:	e002      	b.n	800aa90 <DelayAcquisitionCommand_encode+0x1e>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	3302      	adds	r3, #2
 800aa90:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800aa92:	68b8      	ldr	r0, [r7, #8]
 800aa94:	f001 fbc6 	bl	800c224 <Frame_getSpaceLeft>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	dd01      	ble.n	800aaa4 <DelayAcquisitionCommand_encode+0x32>
        return false;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	e00d      	b.n	800aac0 <DelayAcquisitionCommand_encode+0x4e>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	68b9      	ldr	r1, [r7, #8]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7fb fc19 	bl	80062e2 <InformationObject_encodeBase>

    Frame_appendBytes(frame, self->delay.encodedValue, 2);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	330c      	adds	r3, #12
 800aab4:	2202      	movs	r2, #2
 800aab6:	4619      	mov	r1, r3
 800aab8:	68b8      	ldr	r0, [r7, #8]
 800aaba:	f001 fba2 	bl	800c202 <Frame_appendBytes>

    return true;
 800aabe:	2301      	movs	r3, #1
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3718      	adds	r7, #24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <DelayAcquisitionCommand_initialize>:
        (DestroyFunction) DelayAcquisitionCommand_destroy
};

static void
DelayAcquisitionCommand_initialize(DelayAcquisitionCommand self)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(DelayAcquisitionCommandVFT);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a05      	ldr	r2, [pc, #20]	; (800aae8 <DelayAcquisitionCommand_initialize+0x20>)
 800aad4:	609a      	str	r2, [r3, #8]
    self->type = C_CD_NA_1;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	226a      	movs	r2, #106	; 0x6a
 800aada:	711a      	strb	r2, [r3, #4]
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	200002e8 	.word	0x200002e8

0800aaec <DelayAcquisitionCommand_destroy>:
    return self;
}

void
DelayAcquisitionCommand_destroy(DelayAcquisitionCommand self)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7f9 f9d8 	bl	8003eaa <Memory_free>
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <DelayAcquisitionCommand_getFromBuffer>:
}

DelayAcquisitionCommand
DelayAcquisitionCommand_getFromBuffer(DelayAcquisitionCommand self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b086      	sub	sp, #24
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	607a      	str	r2, [r7, #4]
 800ab0e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 2;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	695a      	ldr	r2, [r3, #20]
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	4413      	add	r3, r2
 800ab18:	3302      	adds	r3, #2
 800ab1a:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800ab1c:	697a      	ldr	r2, [r7, #20]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	dd01      	ble.n	800ab28 <DelayAcquisitionCommand_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	e020      	b.n	800ab6a <DelayAcquisitionCommand_getFromBuffer+0x68>
    }

    if (self == NULL)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d103      	bne.n	800ab36 <DelayAcquisitionCommand_getFromBuffer+0x34>
        self = (DelayAcquisitionCommand) GLOBAL_MALLOC(sizeof(struct sDelayAcquisitionCommand));
 800ab2e:	2010      	movs	r0, #16
 800ab30:	f7f9 f9a8 	bl	8003e84 <Memory_malloc>
 800ab34:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d015      	beq.n	800ab68 <DelayAcquisitionCommand_getFromBuffer+0x66>
        DelayAcquisitionCommand_initialize(self);
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f7ff ffc3 	bl	800aac8 <DelayAcquisitionCommand_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f7fb fc2e 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	6a3a      	ldr	r2, [r7, #32]
 800ab54:	4413      	add	r3, r2
 800ab56:	623b      	str	r3, [r7, #32]

        /* delay */
        CP16Time2a_getFromBuffer(&(self->delay), msg, msgSize, startIndex);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f103 000c 	add.w	r0, r3, #12
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	f7f9 f9ac 	bl	8003ec0 <CP16Time2a_getFromBuffer>
    }

    return self;
 800ab68:	68fb      	ldr	r3, [r7, #12]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <ParameterActivation_encode>:
 * ParameterActivation : InformationObject
 *******************************************/

static bool
ParameterActivation_encode(ParameterActivation self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b086      	sub	sp, #24
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <ParameterActivation_encode+0x18>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e002      	b.n	800ab90 <ParameterActivation_encode+0x1e>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800ab92:	68b8      	ldr	r0, [r7, #8]
 800ab94:	f001 fb46 	bl	800c224 <Frame_getSpaceLeft>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	dd01      	ble.n	800aba4 <ParameterActivation_encode+0x32>
        return false;
 800aba0:	2300      	movs	r3, #0
 800aba2:	e00c      	b.n	800abbe <ParameterActivation_encode+0x4c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f7fb fb99 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->qpa);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	7b1b      	ldrb	r3, [r3, #12]
 800abb4:	4619      	mov	r1, r3
 800abb6:	68b8      	ldr	r0, [r7, #8]
 800abb8:	f001 fb12 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800abbc:	2301      	movs	r3, #1
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3718      	adds	r7, #24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <ParameterActivation_initialize>:
        (DestroyFunction) ParameterActivation_destroy
};

static void
ParameterActivation_initialize(ParameterActivation self)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(parameterActivationVFT);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a05      	ldr	r2, [pc, #20]	; (800abe8 <ParameterActivation_initialize+0x20>)
 800abd4:	609a      	str	r2, [r3, #8]
    self->type = P_AC_NA_1;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2271      	movs	r2, #113	; 0x71
 800abda:	711a      	strb	r2, [r3, #4]
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	200002f0 	.word	0x200002f0

0800abec <ParameterActivation_destroy>:

void
ParameterActivation_destroy(ParameterActivation self)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7f9 f958 	bl	8003eaa <Memory_free>
}
 800abfa:	bf00      	nop
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <ParameterActivation_getFromBuffer>:
}

ParameterActivation
ParameterActivation_getFromBuffer(ParameterActivation self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b086      	sub	sp, #24
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
 800ac0e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 1;
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	695a      	ldr	r2, [r3, #20]
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	4413      	add	r3, r2
 800ac18:	3301      	adds	r3, #1
 800ac1a:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	dd01      	ble.n	800ac28 <ParameterActivation_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	e021      	b.n	800ac6c <ParameterActivation_getFromBuffer+0x6a>
    }

    if (self == NULL)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d103      	bne.n	800ac36 <ParameterActivation_getFromBuffer+0x34>
        self = (ParameterActivation) GLOBAL_MALLOC(sizeof(struct sParameterActivation));
 800ac2e:	2010      	movs	r0, #16
 800ac30:	f7f9 f928 	bl	8003e84 <Memory_malloc>
 800ac34:	60f8      	str	r0, [r7, #12]

    if (self) {
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d016      	beq.n	800ac6a <ParameterActivation_getFromBuffer+0x68>
        ParameterActivation_initialize(self);
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f7ff ffc3 	bl	800abc8 <ParameterActivation_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f7fb fbae 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	6a3a      	ldr	r2, [r7, #32]
 800ac54:	4413      	add	r3, r2
 800ac56:	623b      	str	r3, [r7, #32]

        /* QPA */
        self->qpa = (QualifierOfParameterActivation) msg [startIndex++];
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	623a      	str	r2, [r7, #32]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4413      	add	r3, r2
 800ac64:	781a      	ldrb	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	731a      	strb	r2, [r3, #12]
    }

    return self;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3718      	adds	r7, #24
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <EndOfInitialization_encode>:
 * EndOfInitialization : InformationObject
 *******************************************/

static bool
EndOfInitialization_encode(EndOfInitialization self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
 800ac80:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <EndOfInitialization_encode+0x18>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e002      	b.n	800ac92 <EndOfInitialization_encode+0x1e>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	3301      	adds	r3, #1
 800ac92:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800ac94:	68b8      	ldr	r0, [r7, #8]
 800ac96:	f001 fac5 	bl	800c224 <Frame_getSpaceLeft>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	dd01      	ble.n	800aca6 <EndOfInitialization_encode+0x32>
        return false;
 800aca2:	2300      	movs	r3, #0
 800aca4:	e00c      	b.n	800acc0 <EndOfInitialization_encode+0x4c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800aca6:	78fb      	ldrb	r3, [r7, #3]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f7fb fb18 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte(frame, self->coi);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	7b1b      	ldrb	r3, [r3, #12]
 800acb6:	4619      	mov	r1, r3
 800acb8:	68b8      	ldr	r0, [r7, #8]
 800acba:	f001 fa91 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800acbe:	2301      	movs	r3, #1
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <EndOfInitialization_initialize>:
        (DestroyFunction) EndOfInitialization_destroy
};

static void
EndOfInitialization_initialize(EndOfInitialization self)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(EndOfInitializationVFT);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a05      	ldr	r2, [pc, #20]	; (800ace8 <EndOfInitialization_initialize+0x20>)
 800acd4:	609a      	str	r2, [r3, #8]
    self->type = M_EI_NA_1;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2246      	movs	r2, #70	; 0x46
 800acda:	711a      	strb	r2, [r3, #4]
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	200002f8 	.word	0x200002f8

0800acec <EndOfInitialization_destroy>:
    return self;
};

void
EndOfInitialization_destroy(EndOfInitialization self)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7f9 f8d8 	bl	8003eaa <Memory_free>
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <EndOfInitialization_getFromBuffer>:
}

EndOfInitialization
EndOfInitialization_getFromBuffer(EndOfInitialization self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b086      	sub	sp, #24
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	607a      	str	r2, [r7, #4]
 800ad0e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 1;
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	695a      	ldr	r2, [r3, #20]
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	4413      	add	r3, r2
 800ad18:	3301      	adds	r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	dd01      	ble.n	800ad28 <EndOfInitialization_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	e01e      	b.n	800ad66 <EndOfInitialization_getFromBuffer+0x64>
    }

    if (self == NULL)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d103      	bne.n	800ad36 <EndOfInitialization_getFromBuffer+0x34>
       self = (EndOfInitialization) GLOBAL_MALLOC(sizeof(struct sEndOfInitialization));
 800ad2e:	2010      	movs	r0, #16
 800ad30:	f7f9 f8a8 	bl	8003e84 <Memory_malloc>
 800ad34:	60f8      	str	r0, [r7, #12]

    if (self) {
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d013      	beq.n	800ad64 <EndOfInitialization_getFromBuffer+0x62>
        EndOfInitialization_initialize(self);
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff ffc3 	bl	800acc8 <EndOfInitialization_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	68b9      	ldr	r1, [r7, #8]
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7fb fb2e 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	6a3a      	ldr	r2, [r7, #32]
 800ad54:	4413      	add	r3, r2
 800ad56:	623b      	str	r3, [r7, #32]

        /* COI */
        self->coi = msg[startIndex];
 800ad58:	6a3b      	ldr	r3, [r7, #32]
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	781a      	ldrb	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	731a      	strb	r2, [r3, #12]
    }

    return self;
 800ad64:	68fb      	ldr	r3, [r7, #12]
};
 800ad66:	4618      	mov	r0, r3
 800ad68:	3718      	adds	r7, #24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <FileReady_encode>:
 * FileReady : InformationObject
 *******************************************/

static bool
FileReady_encode(FileReady self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b086      	sub	sp, #24
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
 800ad7a:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <FileReady_encode+0x18>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e002      	b.n	800ad8c <FileReady_encode+0x1e>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800ad8e:	68b8      	ldr	r0, [r7, #8]
 800ad90:	f001 fa48 	bl	800c224 <Frame_getSpaceLeft>
 800ad94:	4602      	mov	r2, r0
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	dd01      	ble.n	800ada0 <FileReady_encode+0x32>
        return false;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	e033      	b.n	800ae08 <FileReady_encode+0x9a>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800ada0:	78fb      	ldrb	r3, [r7, #3]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	68b9      	ldr	r1, [r7, #8]
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7fb fa9b 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte (frame, (uint8_t)((int) self->nof % 256));
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	899b      	ldrh	r3, [r3, #12]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	4619      	mov	r1, r3
 800adb4:	68b8      	ldr	r0, [r7, #8]
 800adb6:	f001 fa13 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((int) self->nof / 256));
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	899b      	ldrh	r3, [r3, #12]
 800adbe:	0a1b      	lsrs	r3, r3, #8
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	4619      	mov	r1, r3
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f001 fa0a 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, (uint8_t)(self->lengthOfFile % 0x100));
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	4619      	mov	r1, r3
 800add4:	68b8      	ldr	r0, [r7, #8]
 800add6:	f001 fa03 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((self->lengthOfFile / 0x100) % 0x100));
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	0a1b      	lsrs	r3, r3, #8
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	4619      	mov	r1, r3
 800ade4:	68b8      	ldr	r0, [r7, #8]
 800ade6:	f001 f9fb 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((self->lengthOfFile / 0x10000) % 0x100));
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	0c1b      	lsrs	r3, r3, #16
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	4619      	mov	r1, r3
 800adf4:	68b8      	ldr	r0, [r7, #8]
 800adf6:	f001 f9f3 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->frq);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	7d1b      	ldrb	r3, [r3, #20]
 800adfe:	4619      	mov	r1, r3
 800ae00:	68b8      	ldr	r0, [r7, #8]
 800ae02:	f001 f9ed 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800ae06:	2301      	movs	r3, #1
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <FileReady_initialize>:
        (DestroyFunction) FileReady_destroy
};

static void
FileReady_initialize(FileReady self)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(FileReadyVFT);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a05      	ldr	r2, [pc, #20]	; (800ae30 <FileReady_initialize+0x20>)
 800ae1c:	609a      	str	r2, [r3, #8]
    self->type = F_FR_NA_1;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2278      	movs	r2, #120	; 0x78
 800ae22:	711a      	strb	r2, [r3, #4]
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	20000300 	.word	0x20000300

0800ae34 <FileReady_destroy>:
    return self->lengthOfFile;
}

void
FileReady_destroy(FileReady self)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7f9 f834 	bl	8003eaa <Memory_free>
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <FileReady_getFromBuffer>:

FileReady
FileReady_getFromBuffer(FileReady self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b086      	sub	sp, #24
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
 800ae56:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 6;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	695a      	ldr	r2, [r3, #20]
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	4413      	add	r3, r2
 800ae60:	3306      	adds	r3, #6
 800ae62:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	dd01      	ble.n	800ae70 <FileReady_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	e05b      	b.n	800af28 <FileReady_getFromBuffer+0xde>
    }

    if (self == NULL)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d103      	bne.n	800ae7e <FileReady_getFromBuffer+0x34>
       self = (FileReady) GLOBAL_MALLOC(sizeof(struct sFileReady));
 800ae76:	2018      	movs	r0, #24
 800ae78:	f7f9 f804 	bl	8003e84 <Memory_malloc>
 800ae7c:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d050      	beq.n	800af26 <FileReady_getFromBuffer+0xdc>
        FileReady_initialize(self);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7ff ffc3 	bl	800ae10 <FileReady_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	68b9      	ldr	r1, [r7, #8]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7fb fa8a 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	6a3a      	ldr	r2, [r7, #32]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	623b      	str	r3, [r7, #32]

        self->nof = msg[startIndex++];
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	1c5a      	adds	r2, r3, #1
 800aea4:	623a      	str	r2, [r7, #32]
 800aea6:	461a      	mov	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4413      	add	r3, r2
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	819a      	strh	r2, [r3, #12]
        self->nof += (msg[startIndex++] * 0x100);
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	623a      	str	r2, [r7, #32]
 800aeba:	461a      	mov	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4413      	add	r3, r2
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	0219      	lsls	r1, r3, #8
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	899a      	ldrh	r2, [r3, #12]
 800aec8:	b28b      	uxth	r3, r1
 800aeca:	4413      	add	r3, r2
 800aecc:	b29a      	uxth	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	819a      	strh	r2, [r3, #12]

        self->lengthOfFile = msg [startIndex++];
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	623a      	str	r2, [r7, #32]
 800aed8:	461a      	mov	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4413      	add	r3, r2
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	461a      	mov	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	611a      	str	r2, [r3, #16]
        self->lengthOfFile += (msg [startIndex++] * 0x100);
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	1c5a      	adds	r2, r3, #1
 800aeea:	623a      	str	r2, [r7, #32]
 800aeec:	461a      	mov	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4413      	add	r3, r2
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	021a      	lsls	r2, r3, #8
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	441a      	add	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	611a      	str	r2, [r3, #16]
        self->lengthOfFile += (msg [startIndex++] * 0x10000);
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	623a      	str	r2, [r7, #32]
 800af06:	461a      	mov	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4413      	add	r3, r2
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	041a      	lsls	r2, r3, #16
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	441a      	add	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	611a      	str	r2, [r3, #16]

        /* FRQ */
        self->frq = msg[startIndex];
 800af1a:	6a3b      	ldr	r3, [r7, #32]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	4413      	add	r3, r2
 800af20:	781a      	ldrb	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	751a      	strb	r2, [r3, #20]
    }

    return self;
 800af26:	68fb      	ldr	r3, [r7, #12]
};
 800af28:	4618      	mov	r0, r3
 800af2a:	3718      	adds	r7, #24
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <SectionReady_encode>:
 * SectionReady : InformationObject
 *******************************************/

static bool
SectionReady_encode(SectionReady self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <SectionReady_encode+0x18>
 800af44:	2301      	movs	r3, #1
 800af46:	e002      	b.n	800af4e <SectionReady_encode+0x1e>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	3301      	adds	r3, #1
 800af4e:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800af50:	68b8      	ldr	r0, [r7, #8]
 800af52:	f001 f967 	bl	800c224 <Frame_getSpaceLeft>
 800af56:	4602      	mov	r2, r0
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	4293      	cmp	r3, r2
 800af5c:	dd01      	ble.n	800af62 <SectionReady_encode+0x32>
        return false;
 800af5e:	2300      	movs	r3, #0
 800af60:	e039      	b.n	800afd6 <SectionReady_encode+0xa6>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f7fb f9ba 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte (frame, (uint8_t)((int) self->nof % 256));
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	899b      	ldrh	r3, [r3, #12]
 800af72:	b2db      	uxtb	r3, r3
 800af74:	4619      	mov	r1, r3
 800af76:	68b8      	ldr	r0, [r7, #8]
 800af78:	f001 f932 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((int) self->nof / 256));
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	899b      	ldrh	r3, [r3, #12]
 800af80:	0a1b      	lsrs	r3, r3, #8
 800af82:	b29b      	uxth	r3, r3
 800af84:	b2db      	uxtb	r3, r3
 800af86:	4619      	mov	r1, r3
 800af88:	68b8      	ldr	r0, [r7, #8]
 800af8a:	f001 f929 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->nameOfSection);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	7b9b      	ldrb	r3, [r3, #14]
 800af92:	4619      	mov	r1, r3
 800af94:	68b8      	ldr	r0, [r7, #8]
 800af96:	f001 f923 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, (uint8_t)(self->lengthOfSection % 0x100));
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	4619      	mov	r1, r3
 800afa2:	68b8      	ldr	r0, [r7, #8]
 800afa4:	f001 f91c 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((self->lengthOfSection / 0x100) % 0x100));
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	0a1b      	lsrs	r3, r3, #8
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	4619      	mov	r1, r3
 800afb2:	68b8      	ldr	r0, [r7, #8]
 800afb4:	f001 f914 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((self->lengthOfSection / 0x10000) % 0x100));
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	0c1b      	lsrs	r3, r3, #16
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	4619      	mov	r1, r3
 800afc2:	68b8      	ldr	r0, [r7, #8]
 800afc4:	f001 f90c 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->srq);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	7d1b      	ldrb	r3, [r3, #20]
 800afcc:	4619      	mov	r1, r3
 800afce:	68b8      	ldr	r0, [r7, #8]
 800afd0:	f001 f906 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800afd4:	2301      	movs	r3, #1
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <SectionReady_initialize>:
        (DestroyFunction) SectionReady_destroy
};

static void
SectionReady_initialize(SectionReady self)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(SectionReadyVFT);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a05      	ldr	r2, [pc, #20]	; (800b000 <SectionReady_initialize+0x20>)
 800afec:	609a      	str	r2, [r3, #8]
    self->type = F_SR_NA_1;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2279      	movs	r2, #121	; 0x79
 800aff2:	711a      	strb	r2, [r3, #4]
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	20000308 	.word	0x20000308

0800b004 <SectionReady_destroy>:
    return self->lengthOfSection;
}

void
SectionReady_destroy(SectionReady self)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7f8 ff4c 	bl	8003eaa <Memory_free>
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <SectionReady_getFromBuffer>:


SectionReady
SectionReady_getFromBuffer(SectionReady self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b086      	sub	sp, #24
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
 800b026:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 7;
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	695a      	ldr	r2, [r3, #20]
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	4413      	add	r3, r2
 800b030:	3307      	adds	r3, #7
 800b032:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	429a      	cmp	r2, r3
 800b03a:	dd01      	ble.n	800b040 <SectionReady_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800b03c:	2300      	movs	r3, #0
 800b03e:	e064      	b.n	800b10a <SectionReady_getFromBuffer+0xf0>
    };

    if (self == NULL)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d103      	bne.n	800b04e <SectionReady_getFromBuffer+0x34>
       self = (SectionReady) GLOBAL_MALLOC(sizeof(struct sSectionReady));
 800b046:	2018      	movs	r0, #24
 800b048:	f7f8 ff1c 	bl	8003e84 <Memory_malloc>
 800b04c:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d059      	beq.n	800b108 <SectionReady_getFromBuffer+0xee>
        SectionReady_initialize(self);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7ff ffc3 	bl	800afe0 <SectionReady_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	68b9      	ldr	r1, [r7, #8]
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7fb f9a2 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	6a3a      	ldr	r2, [r7, #32]
 800b06c:	4413      	add	r3, r2
 800b06e:	623b      	str	r3, [r7, #32]

        self->nof = msg[startIndex++];
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	623a      	str	r2, [r7, #32]
 800b076:	461a      	mov	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4413      	add	r3, r2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	b29a      	uxth	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	819a      	strh	r2, [r3, #12]
        self->nof += (msg[startIndex++] * 0x100);
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	623a      	str	r2, [r7, #32]
 800b08a:	461a      	mov	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4413      	add	r3, r2
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	0219      	lsls	r1, r3, #8
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	899a      	ldrh	r2, [r3, #12]
 800b098:	b28b      	uxth	r3, r1
 800b09a:	4413      	add	r3, r2
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	819a      	strh	r2, [r3, #12]

        self->nameOfSection = msg[startIndex++];
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	1c5a      	adds	r2, r3, #1
 800b0a6:	623a      	str	r2, [r7, #32]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	781a      	ldrb	r2, [r3, #0]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	739a      	strb	r2, [r3, #14]

        self->lengthOfSection = msg [startIndex++];
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	623a      	str	r2, [r7, #32]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4413      	add	r3, r2
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	611a      	str	r2, [r3, #16]
        self->lengthOfSection += (msg [startIndex++] * 0x100);
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	623a      	str	r2, [r7, #32]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	021a      	lsls	r2, r3, #8
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	441a      	add	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	611a      	str	r2, [r3, #16]
        self->lengthOfSection += (msg [startIndex++] * 0x10000);
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	1c5a      	adds	r2, r3, #1
 800b0e6:	623a      	str	r2, [r7, #32]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	041a      	lsls	r2, r3, #16
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	441a      	add	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	611a      	str	r2, [r3, #16]

        self->srq = msg[startIndex];
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	4413      	add	r3, r2
 800b102:	781a      	ldrb	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	751a      	strb	r2, [r3, #20]
    }

    return self;
 800b108:	68fb      	ldr	r3, [r7, #12]
};
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <FileCallOrSelect_encode>:
 * FileCallOrSelect : InformationObject
 *******************************************/

static bool
FileCallOrSelect_encode(FileCallOrSelect self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b086      	sub	sp, #24
 800b116:	af00      	add	r7, sp, #0
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
 800b11e:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 1 : (parameters->sizeOfIOA + 1);
 800b120:	78fb      	ldrb	r3, [r7, #3]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <FileCallOrSelect_encode+0x18>
 800b126:	2301      	movs	r3, #1
 800b128:	e002      	b.n	800b130 <FileCallOrSelect_encode+0x1e>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	3301      	adds	r3, #1
 800b130:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800b132:	68b8      	ldr	r0, [r7, #8]
 800b134:	f001 f876 	bl	800c224 <Frame_getSpaceLeft>
 800b138:	4602      	mov	r2, r0
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	4293      	cmp	r3, r2
 800b13e:	dd01      	ble.n	800b144 <FileCallOrSelect_encode+0x32>
        return false;
 800b140:	2300      	movs	r3, #0
 800b142:	e022      	b.n	800b18a <FileCallOrSelect_encode+0x78>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800b144:	78fb      	ldrb	r3, [r7, #3]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f7fb f8c9 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte (frame, (uint8_t)((int) self->nof % 256));
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	899b      	ldrh	r3, [r3, #12]
 800b154:	b2db      	uxtb	r3, r3
 800b156:	4619      	mov	r1, r3
 800b158:	68b8      	ldr	r0, [r7, #8]
 800b15a:	f001 f841 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((int) self->nof / 256));
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	899b      	ldrh	r3, [r3, #12]
 800b162:	0a1b      	lsrs	r3, r3, #8
 800b164:	b29b      	uxth	r3, r3
 800b166:	b2db      	uxtb	r3, r3
 800b168:	4619      	mov	r1, r3
 800b16a:	68b8      	ldr	r0, [r7, #8]
 800b16c:	f001 f838 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->nameOfSection);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	7b9b      	ldrb	r3, [r3, #14]
 800b174:	4619      	mov	r1, r3
 800b176:	68b8      	ldr	r0, [r7, #8]
 800b178:	f001 f832 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->scq);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	7bdb      	ldrb	r3, [r3, #15]
 800b180:	4619      	mov	r1, r3
 800b182:	68b8      	ldr	r0, [r7, #8]
 800b184:	f001 f82c 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800b188:	2301      	movs	r3, #1
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <FileCallOrSelect_initialize>:
        (DestroyFunction) FileCallOrSelect_destroy
};

static void
FileCallOrSelect_initialize(FileCallOrSelect self)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(FileCallOrSelectVFT);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a05      	ldr	r2, [pc, #20]	; (800b1b4 <FileCallOrSelect_initialize+0x20>)
 800b1a0:	609a      	str	r2, [r3, #8]
    self->type = F_SC_NA_1;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	227a      	movs	r2, #122	; 0x7a
 800b1a6:	711a      	strb	r2, [r3, #4]
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	20000310 	.word	0x20000310

0800b1b8 <FileCallOrSelect_destroy>:
}


void
FileCallOrSelect_destroy(FileCallOrSelect self)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7f8 fe72 	bl	8003eaa <Memory_free>
}
 800b1c6:	bf00      	nop
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <FileCallOrSelect_getFromBuffer>:


FileCallOrSelect
FileCallOrSelect_getFromBuffer(FileCallOrSelect self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b086      	sub	sp, #24
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	60f8      	str	r0, [r7, #12]
 800b1d6:	60b9      	str	r1, [r7, #8]
 800b1d8:	607a      	str	r2, [r7, #4]
 800b1da:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 4;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	695a      	ldr	r2, [r3, #20]
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	dd01      	ble.n	800b1f4 <FileCallOrSelect_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e040      	b.n	800b276 <FileCallOrSelect_getFromBuffer+0xa8>
    }

    if (self == NULL)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d103      	bne.n	800b202 <FileCallOrSelect_getFromBuffer+0x34>
       self = (FileCallOrSelect) GLOBAL_MALLOC(sizeof(struct sFileCallOrSelect));
 800b1fa:	2010      	movs	r0, #16
 800b1fc:	f7f8 fe42 	bl	8003e84 <Memory_malloc>
 800b200:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d035      	beq.n	800b274 <FileCallOrSelect_getFromBuffer+0xa6>
        FileCallOrSelect_initialize(self);
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7ff ffc3 	bl	800b194 <FileCallOrSelect_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7fb f8c8 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	6a3a      	ldr	r2, [r7, #32]
 800b220:	4413      	add	r3, r2
 800b222:	623b      	str	r3, [r7, #32]

        self->nof = msg[startIndex++];
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	623a      	str	r2, [r7, #32]
 800b22a:	461a      	mov	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4413      	add	r3, r2
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b29a      	uxth	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	819a      	strh	r2, [r3, #12]
        self->nof += (msg[startIndex++] * 0x100);
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	623a      	str	r2, [r7, #32]
 800b23e:	461a      	mov	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4413      	add	r3, r2
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	0219      	lsls	r1, r3, #8
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	899a      	ldrh	r2, [r3, #12]
 800b24c:	b28b      	uxth	r3, r1
 800b24e:	4413      	add	r3, r2
 800b250:	b29a      	uxth	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	819a      	strh	r2, [r3, #12]

        self->nameOfSection = msg[startIndex++];
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	623a      	str	r2, [r7, #32]
 800b25c:	461a      	mov	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4413      	add	r3, r2
 800b262:	781a      	ldrb	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	739a      	strb	r2, [r3, #14]

        self->scq = msg[startIndex];
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	4413      	add	r3, r2
 800b26e:	781a      	ldrb	r2, [r3, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	73da      	strb	r2, [r3, #15]
    }

    return self;
 800b274:	68fb      	ldr	r3, [r7, #12]
};
 800b276:	4618      	mov	r0, r3
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <FileLastSegmentOrSection_encode>:
 * FileLastSegmentOrSection : InformationObject
 *************************************************/

static bool
FileLastSegmentOrSection_encode(FileLastSegmentOrSection self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	60b9      	str	r1, [r7, #8]
 800b288:	607a      	str	r2, [r7, #4]
 800b28a:	70fb      	strb	r3, [r7, #3]
    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800b28c:	78fb      	ldrb	r3, [r7, #3]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7fb f825 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte (frame, (uint8_t)((int) self->nof % 256));
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	899b      	ldrh	r3, [r3, #12]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	4619      	mov	r1, r3
 800b2a0:	68b8      	ldr	r0, [r7, #8]
 800b2a2:	f000 ff9d 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((int) self->nof / 256));
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	899b      	ldrh	r3, [r3, #12]
 800b2aa:	0a1b      	lsrs	r3, r3, #8
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	68b8      	ldr	r0, [r7, #8]
 800b2b4:	f000 ff94 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->nameOfSection);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	7b9b      	ldrb	r3, [r3, #14]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	68b8      	ldr	r0, [r7, #8]
 800b2c0:	f000 ff8e 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->lsq);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	7bdb      	ldrb	r3, [r3, #15]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	68b8      	ldr	r0, [r7, #8]
 800b2cc:	f000 ff88 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->chs);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	7c1b      	ldrb	r3, [r3, #16]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	68b8      	ldr	r0, [r7, #8]
 800b2d8:	f000 ff82 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800b2dc:	2301      	movs	r3, #1
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <FileLastSegmentOrSection_initialize>:
        (DestroyFunction) FileLastSegmentOrSection_destroy
};

static void
FileLastSegmentOrSection_initialize(FileLastSegmentOrSection self)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(FileLastSegmentOrSectionVFT);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a05      	ldr	r2, [pc, #20]	; (800b308 <FileLastSegmentOrSection_initialize+0x20>)
 800b2f4:	609a      	str	r2, [r3, #8]
    self->type = F_LS_NA_1;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	227b      	movs	r2, #123	; 0x7b
 800b2fa:	711a      	strb	r2, [r3, #4]
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	20000318 	.word	0x20000318

0800b30c <FileLastSegmentOrSection_destroy>:
    return self->chs;
}

void
FileLastSegmentOrSection_destroy(FileLastSegmentOrSection self)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7f8 fdc8 	bl	8003eaa <Memory_free>
}
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <FileLastSegmentOrSection_getFromBuffer>:

FileLastSegmentOrSection
FileLastSegmentOrSection_getFromBuffer(FileLastSegmentOrSection self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b086      	sub	sp, #24
 800b326:	af00      	add	r7, sp, #0
 800b328:	60f8      	str	r0, [r7, #12]
 800b32a:	60b9      	str	r1, [r7, #8]
 800b32c:	607a      	str	r2, [r7, #4]
 800b32e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 5;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	695a      	ldr	r2, [r3, #20]
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	4413      	add	r3, r2
 800b338:	3305      	adds	r3, #5
 800b33a:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	dd01      	ble.n	800b348 <FileLastSegmentOrSection_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	e049      	b.n	800b3dc <FileLastSegmentOrSection_getFromBuffer+0xba>
    }

    if (self == NULL)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d103      	bne.n	800b356 <FileLastSegmentOrSection_getFromBuffer+0x34>
       self = (FileLastSegmentOrSection) GLOBAL_MALLOC(sizeof(struct sFileLastSegmentOrSection));
 800b34e:	2014      	movs	r0, #20
 800b350:	f7f8 fd98 	bl	8003e84 <Memory_malloc>
 800b354:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d03e      	beq.n	800b3da <FileLastSegmentOrSection_getFromBuffer+0xb8>
        FileLastSegmentOrSection_initialize(self);
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7ff ffc3 	bl	800b2e8 <FileLastSegmentOrSection_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	68b9      	ldr	r1, [r7, #8]
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7fb f81e 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	6a3a      	ldr	r2, [r7, #32]
 800b374:	4413      	add	r3, r2
 800b376:	623b      	str	r3, [r7, #32]

        self->nof = msg[startIndex++];
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	623a      	str	r2, [r7, #32]
 800b37e:	461a      	mov	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4413      	add	r3, r2
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	b29a      	uxth	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	819a      	strh	r2, [r3, #12]
        self->nof += (msg[startIndex++] * 0x100);
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	623a      	str	r2, [r7, #32]
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4413      	add	r3, r2
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	0219      	lsls	r1, r3, #8
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	899a      	ldrh	r2, [r3, #12]
 800b3a0:	b28b      	uxth	r3, r1
 800b3a2:	4413      	add	r3, r2
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	819a      	strh	r2, [r3, #12]

        self->nameOfSection = msg[startIndex++];
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	623a      	str	r2, [r7, #32]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	781a      	ldrb	r2, [r3, #0]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	739a      	strb	r2, [r3, #14]

        self->lsq = msg[startIndex++];
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	623a      	str	r2, [r7, #32]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	781a      	ldrb	r2, [r3, #0]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	73da      	strb	r2, [r3, #15]

        self->chs = msg[startIndex];
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	781a      	ldrb	r2, [r3, #0]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	741a      	strb	r2, [r3, #16]
    }

    return self;
 800b3da:	68fb      	ldr	r3, [r7, #12]
};
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <FileACK_encode>:
 * FileACK : InformationObject
 *************************************************/

static bool
FileACK_encode(FileACK self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
 800b3f0:	70fb      	strb	r3, [r7, #3]
    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800b3f2:	78fb      	ldrb	r3, [r7, #3]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	68b9      	ldr	r1, [r7, #8]
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7fa ff72 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte (frame, (uint8_t)((int) self->nof % 256));
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	899b      	ldrh	r3, [r3, #12]
 800b402:	b2db      	uxtb	r3, r3
 800b404:	4619      	mov	r1, r3
 800b406:	68b8      	ldr	r0, [r7, #8]
 800b408:	f000 feea 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((int) self->nof / 256));
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	899b      	ldrh	r3, [r3, #12]
 800b410:	0a1b      	lsrs	r3, r3, #8
 800b412:	b29b      	uxth	r3, r3
 800b414:	b2db      	uxtb	r3, r3
 800b416:	4619      	mov	r1, r3
 800b418:	68b8      	ldr	r0, [r7, #8]
 800b41a:	f000 fee1 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->nameOfSection);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	7b9b      	ldrb	r3, [r3, #14]
 800b422:	4619      	mov	r1, r3
 800b424:	68b8      	ldr	r0, [r7, #8]
 800b426:	f000 fedb 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->afq);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	7bdb      	ldrb	r3, [r3, #15]
 800b42e:	4619      	mov	r1, r3
 800b430:	68b8      	ldr	r0, [r7, #8]
 800b432:	f000 fed5 	bl	800c1e0 <Frame_setNextByte>

    return true;
 800b436:	2301      	movs	r3, #1
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <FileACK_initialize>:
        (DestroyFunction) FileACK_destroy
};

static void
FileACK_initialize(FileACK self)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(FileACKVFT);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a05      	ldr	r2, [pc, #20]	; (800b460 <FileACK_initialize+0x20>)
 800b44c:	609a      	str	r2, [r3, #8]
    self->type = F_AF_NA_1;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	227c      	movs	r2, #124	; 0x7c
 800b452:	711a      	strb	r2, [r3, #4]
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	20000320 	.word	0x20000320

0800b464 <FileACK_destroy>:
    return self->afq;
}

void
FileACK_destroy(FileACK self)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7f8 fd1c 	bl	8003eaa <Memory_free>
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <FileACK_getFromBuffer>:

FileACK
FileACK_getFromBuffer(FileACK self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b086      	sub	sp, #24
 800b47e:	af00      	add	r7, sp, #0
 800b480:	60f8      	str	r0, [r7, #12]
 800b482:	60b9      	str	r1, [r7, #8]
 800b484:	607a      	str	r2, [r7, #4]
 800b486:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 4;
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	695a      	ldr	r2, [r3, #20]
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	4413      	add	r3, r2
 800b490:	3304      	adds	r3, #4
 800b492:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	429a      	cmp	r2, r3
 800b49a:	dd01      	ble.n	800b4a0 <FileACK_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	e040      	b.n	800b522 <FileACK_getFromBuffer+0xa8>
    }

    if (self == NULL)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d103      	bne.n	800b4ae <FileACK_getFromBuffer+0x34>
       self = (FileACK) GLOBAL_MALLOC(sizeof(struct sFileACK));
 800b4a6:	2010      	movs	r0, #16
 800b4a8:	f7f8 fcec 	bl	8003e84 <Memory_malloc>
 800b4ac:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d035      	beq.n	800b520 <FileACK_getFromBuffer+0xa6>
        FileACK_initialize(self);
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f7ff ffc3 	bl	800b440 <FileACK_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	68b9      	ldr	r1, [r7, #8]
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7fa ff72 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	6a3a      	ldr	r2, [r7, #32]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	623b      	str	r3, [r7, #32]

        self->nof = msg[startIndex++];
 800b4d0:	6a3b      	ldr	r3, [r7, #32]
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	623a      	str	r2, [r7, #32]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4413      	add	r3, r2
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	819a      	strh	r2, [r3, #12]
        self->nof += (msg[startIndex++] * 0x100);
 800b4e4:	6a3b      	ldr	r3, [r7, #32]
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	623a      	str	r2, [r7, #32]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	0219      	lsls	r1, r3, #8
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	899a      	ldrh	r2, [r3, #12]
 800b4f8:	b28b      	uxth	r3, r1
 800b4fa:	4413      	add	r3, r2
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	819a      	strh	r2, [r3, #12]

        self->nameOfSection = msg[startIndex++];
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	623a      	str	r2, [r7, #32]
 800b508:	461a      	mov	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4413      	add	r3, r2
 800b50e:	781a      	ldrb	r2, [r3, #0]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	739a      	strb	r2, [r3, #14]

        self->afq = msg[startIndex];
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	4413      	add	r3, r2
 800b51a:	781a      	ldrb	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	73da      	strb	r2, [r3, #15]
    }

    return self;
 800b520:	68fb      	ldr	r3, [r7, #12]
};
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <FileSegment_encode>:
 * FileSegment : InformationObject
 *************************************************/

static bool
FileSegment_encode(FileSegment self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800b52a:	b590      	push	{r4, r7, lr}
 800b52c:	b085      	sub	sp, #20
 800b52e:	af00      	add	r7, sp, #0
 800b530:	60f8      	str	r0, [r7, #12]
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	607a      	str	r2, [r7, #4]
 800b536:	70fb      	strb	r3, [r7, #3]
    if (self->los > FileSegment_GetMaxDataSize(parameters))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	7bdb      	ldrb	r3, [r3, #15]
 800b53c:	461c      	mov	r4, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f846 	bl	800b5d0 <FileSegment_GetMaxDataSize>
 800b544:	4603      	mov	r3, r0
 800b546:	429c      	cmp	r4, r3
 800b548:	dd01      	ble.n	800b54e <FileSegment_encode+0x24>
        return false;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e02a      	b.n	800b5a4 <FileSegment_encode+0x7a>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800b54e:	78fb      	ldrb	r3, [r7, #3]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	68b9      	ldr	r1, [r7, #8]
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f7fa fec4 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte (frame, (uint8_t)((int) self->nof % 256));
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	899b      	ldrh	r3, [r3, #12]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	4619      	mov	r1, r3
 800b562:	68b8      	ldr	r0, [r7, #8]
 800b564:	f000 fe3c 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((int) self->nof / 256));
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	899b      	ldrh	r3, [r3, #12]
 800b56c:	0a1b      	lsrs	r3, r3, #8
 800b56e:	b29b      	uxth	r3, r3
 800b570:	b2db      	uxtb	r3, r3
 800b572:	4619      	mov	r1, r3
 800b574:	68b8      	ldr	r0, [r7, #8]
 800b576:	f000 fe33 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->nameOfSection);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	7b9b      	ldrb	r3, [r3, #14]
 800b57e:	4619      	mov	r1, r3
 800b580:	68b8      	ldr	r0, [r7, #8]
 800b582:	f000 fe2d 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->los);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	7bdb      	ldrb	r3, [r3, #15]
 800b58a:	4619      	mov	r1, r3
 800b58c:	68b8      	ldr	r0, [r7, #8]
 800b58e:	f000 fe27 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes (frame, self->data, self->los);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6919      	ldr	r1, [r3, #16]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	7bdb      	ldrb	r3, [r3, #15]
 800b59a:	461a      	mov	r2, r3
 800b59c:	68b8      	ldr	r0, [r7, #8]
 800b59e:	f000 fe30 	bl	800c202 <Frame_appendBytes>

    return true;
 800b5a2:	2301      	movs	r3, #1
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd90      	pop	{r4, r7, pc}

0800b5ac <FileSegment_initialize>:
        (DestroyFunction) FileSegment_destroy
};

static void
FileSegment_initialize(FileSegment self)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(FileSegmentVFT);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a05      	ldr	r2, [pc, #20]	; (800b5cc <FileSegment_initialize+0x20>)
 800b5b8:	609a      	str	r2, [r3, #8]
    self->type = F_SG_NA_1;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	227d      	movs	r2, #125	; 0x7d
 800b5be:	711a      	strb	r2, [r3, #4]
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	20000328 	.word	0x20000328

0800b5d0 <FileSegment_GetMaxDataSize>:
}


int
FileSegment_GetMaxDataSize(CS101_AppLayerParameters parameters)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
    int maxSize = parameters->maxSizeOfASDU -
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	699a      	ldr	r2, [r3, #24]
        parameters->sizeOfTypeId - parameters->sizeOfVSQ - parameters->sizeOfCA - parameters->sizeOfCOT
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
    int maxSize = parameters->maxSizeOfASDU -
 800b5e0:	1ad2      	subs	r2, r2, r3
        parameters->sizeOfTypeId - parameters->sizeOfVSQ - parameters->sizeOfCA - parameters->sizeOfCOT
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	1ad2      	subs	r2, r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	1ad2      	subs	r2, r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	1ad2      	subs	r2, r2, r3
        - parameters->sizeOfIOA - 4;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	1ad3      	subs	r3, r2, r3
    int maxSize = parameters->maxSizeOfASDU -
 800b5fa:	3b04      	subs	r3, #4
 800b5fc:	60fb      	str	r3, [r7, #12]

    return maxSize;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <FileSegment_destroy>:

void
FileSegment_destroy(FileSegment self)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7f8 fc48 	bl	8003eaa <Memory_free>
}
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <FileSegment_getFromBuffer>:

FileSegment
FileSegment_getFromBuffer(FileSegment self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b086      	sub	sp, #24
 800b626:	af00      	add	r7, sp, #0
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	607a      	str	r2, [r7, #4]
 800b62e:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 4;
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	695a      	ldr	r2, [r3, #20]
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	4413      	add	r3, r2
 800b638:	3304      	adds	r3, #4
 800b63a:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	dd01      	ble.n	800b648 <FileSegment_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800b644:	2300      	movs	r3, #0
 800b646:	e05e      	b.n	800b706 <FileSegment_getFromBuffer+0xe4>
    }

    uint8_t los = msg[startIndex + 3 + parameters->sizeOfIOA];
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	1cda      	adds	r2, r3, #3
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	4413      	add	r3, r2
 800b652:	461a      	mov	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4413      	add	r3, r2
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	74fb      	strb	r3, [r7, #19]

    if ((msgSize - startIndex) < (parameters->sizeOfIOA) + 4 + los)
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	1ad2      	subs	r2, r2, r3
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	1d19      	adds	r1, r3, #4
 800b668:	7cfb      	ldrb	r3, [r7, #19]
 800b66a:	440b      	add	r3, r1
 800b66c:	429a      	cmp	r2, r3
 800b66e:	da01      	bge.n	800b674 <FileSegment_getFromBuffer+0x52>
        return NULL;
 800b670:	2300      	movs	r3, #0
 800b672:	e048      	b.n	800b706 <FileSegment_getFromBuffer+0xe4>

    if (self == NULL)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <FileSegment_getFromBuffer+0x60>
       self = (FileSegment) GLOBAL_MALLOC(sizeof(struct sFileSegment));
 800b67a:	2014      	movs	r0, #20
 800b67c:	f7f8 fc02 	bl	8003e84 <Memory_malloc>
 800b680:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d03d      	beq.n	800b704 <FileSegment_getFromBuffer+0xe2>
        FileSegment_initialize(self);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7ff ff8f 	bl	800b5ac <FileSegment_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	68b9      	ldr	r1, [r7, #8]
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7fa fe88 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	6a3a      	ldr	r2, [r7, #32]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	623b      	str	r3, [r7, #32]

        self->nof = msg[startIndex++];
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	623a      	str	r2, [r7, #32]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	819a      	strh	r2, [r3, #12]
        self->nof += (msg[startIndex++] * 0x100);
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	623a      	str	r2, [r7, #32]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	0219      	lsls	r1, r3, #8
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	899a      	ldrh	r2, [r3, #12]
 800b6cc:	b28b      	uxth	r3, r1
 800b6ce:	4413      	add	r3, r2
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	819a      	strh	r2, [r3, #12]

        self->nameOfSection = msg[startIndex++];
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	1c5a      	adds	r2, r3, #1
 800b6da:	623a      	str	r2, [r7, #32]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	781a      	ldrb	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	739a      	strb	r2, [r3, #14]

        self->los = msg[startIndex++];
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	623a      	str	r2, [r7, #32]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	781a      	ldrb	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	73da      	strb	r2, [r3, #15]

        self->data = msg + startIndex;
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	441a      	add	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	611a      	str	r2, [r3, #16]
    }

    return self;
 800b704:	68fb      	ldr	r3, [r7, #12]
};
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <FileDirectory_encode>:
 * FileDirectory: InformationObject
 *************************************************/

static bool
FileDirectory_encode(FileDirectory self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b086      	sub	sp, #24
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
 800b71a:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 13 : (parameters->sizeOfIOA + 13);
 800b71c:	78fb      	ldrb	r3, [r7, #3]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <FileDirectory_encode+0x18>
 800b722:	230d      	movs	r3, #13
 800b724:	e002      	b.n	800b72c <FileDirectory_encode+0x1e>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	330d      	adds	r3, #13
 800b72c:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800b72e:	68b8      	ldr	r0, [r7, #8]
 800b730:	f000 fd78 	bl	800c224 <Frame_getSpaceLeft>
 800b734:	4602      	mov	r2, r0
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	4293      	cmp	r3, r2
 800b73a:	dd01      	ble.n	800b740 <FileDirectory_encode+0x32>
        return false;
 800b73c:	2300      	movs	r3, #0
 800b73e:	e051      	b.n	800b7e4 <FileDirectory_encode+0xd6>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	68b9      	ldr	r1, [r7, #8]
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7fa fdcb 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte (frame, (uint8_t)((int) self->nof % 256));
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	899b      	ldrh	r3, [r3, #12]
 800b750:	b2db      	uxtb	r3, r3
 800b752:	4619      	mov	r1, r3
 800b754:	68b8      	ldr	r0, [r7, #8]
 800b756:	f000 fd43 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((int) self->nof / 256));
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	899b      	ldrh	r3, [r3, #12]
 800b75e:	0a1b      	lsrs	r3, r3, #8
 800b760:	b29b      	uxth	r3, r3
 800b762:	b2db      	uxtb	r3, r3
 800b764:	4619      	mov	r1, r3
 800b766:	68b8      	ldr	r0, [r7, #8]
 800b768:	f000 fd3a 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, (uint8_t)(self->lengthOfFile % 0x100));
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	425a      	negs	r2, r3
 800b772:	b2db      	uxtb	r3, r3
 800b774:	b2d2      	uxtb	r2, r2
 800b776:	bf58      	it	pl
 800b778:	4253      	negpl	r3, r2
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	4619      	mov	r1, r3
 800b77e:	68b8      	ldr	r0, [r7, #8]
 800b780:	f000 fd2e 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((self->lengthOfFile / 0x100) % 0x100));
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	da00      	bge.n	800b78e <FileDirectory_encode+0x80>
 800b78c:	33ff      	adds	r3, #255	; 0xff
 800b78e:	121b      	asrs	r3, r3, #8
 800b790:	425a      	negs	r2, r3
 800b792:	b2db      	uxtb	r3, r3
 800b794:	b2d2      	uxtb	r2, r2
 800b796:	bf58      	it	pl
 800b798:	4253      	negpl	r3, r2
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	4619      	mov	r1, r3
 800b79e:	68b8      	ldr	r0, [r7, #8]
 800b7a0:	f000 fd1e 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((self->lengthOfFile / 0x10000) % 0x100));
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	da02      	bge.n	800b7b2 <FileDirectory_encode+0xa4>
 800b7ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b7b0:	33ff      	adds	r3, #255	; 0xff
 800b7b2:	141b      	asrs	r3, r3, #16
 800b7b4:	425a      	negs	r2, r3
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	b2d2      	uxtb	r2, r2
 800b7ba:	bf58      	it	pl
 800b7bc:	4253      	negpl	r3, r2
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	68b8      	ldr	r0, [r7, #8]
 800b7c4:	f000 fd0c 	bl	800c1e0 <Frame_setNextByte>

    Frame_setNextByte (frame, self->sof);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	7d1b      	ldrb	r3, [r3, #20]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	68b8      	ldr	r0, [r7, #8]
 800b7d0:	f000 fd06 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->creationTime.encodedValue, 7);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3315      	adds	r3, #21
 800b7d8:	2207      	movs	r2, #7
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68b8      	ldr	r0, [r7, #8]
 800b7de:	f000 fd10 	bl	800c202 <Frame_appendBytes>

    return true;
 800b7e2:	2301      	movs	r3, #1
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3718      	adds	r7, #24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <FileDirectory_initialize>:
        (DestroyFunction) FileDirectory_destroy
};

static void
FileDirectory_initialize(FileDirectory self)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(FileDirectoryVFT);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a05      	ldr	r2, [pc, #20]	; (800b80c <FileDirectory_initialize+0x20>)
 800b7f8:	609a      	str	r2, [r3, #8]
    self->type = F_DR_TA_1;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	227e      	movs	r2, #126	; 0x7e
 800b7fe:	711a      	strb	r2, [r3, #4]
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	20000330 	.word	0x20000330

0800b810 <FileDirectory_destroy>:
    return &(self->creationTime);
}

void
FileDirectory_destroy(FileDirectory self)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7f8 fb46 	bl	8003eaa <Memory_free>
}
 800b81e:	bf00      	nop
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <FileDirectory_getFromBuffer>:

FileDirectory
FileDirectory_getFromBuffer(FileDirectory self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex, bool isSequence)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b086      	sub	sp, #24
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	60b9      	str	r1, [r7, #8]
 800b830:	607a      	str	r2, [r7, #4]
 800b832:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 13;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	695a      	ldr	r2, [r3, #20]
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	4413      	add	r3, r2
 800b83c:	330d      	adds	r3, #13
 800b83e:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	429a      	cmp	r2, r3
 800b846:	dd01      	ble.n	800b84c <FileDirectory_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	e06d      	b.n	800b928 <FileDirectory_getFromBuffer+0x102>
    }

    if (self == NULL)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d103      	bne.n	800b85a <FileDirectory_getFromBuffer+0x34>
       self = (FileDirectory) GLOBAL_MALLOC(sizeof(struct sFileDirectory));
 800b852:	201c      	movs	r0, #28
 800b854:	f7f8 fb16 	bl	8003e84 <Memory_malloc>
 800b858:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d062      	beq.n	800b926 <FileDirectory_getFromBuffer+0x100>

        FileDirectory_initialize(self);
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f7ff ffc3 	bl	800b7ec <FileDirectory_initialize>

        if (!isSequence) {
 800b866:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b86a:	f083 0301 	eor.w	r3, r3, #1
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00a      	beq.n	800b88a <FileDirectory_getFromBuffer+0x64>
            InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7fa fd95 	bl	80063aa <InformationObject_getFromBuffer>

            startIndex += parameters->sizeOfIOA; /* skip IOA */
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	6a3a      	ldr	r2, [r7, #32]
 800b886:	4413      	add	r3, r2
 800b888:	623b      	str	r3, [r7, #32]
        }

        self->nof = msg[startIndex++];
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	1c5a      	adds	r2, r3, #1
 800b88e:	623a      	str	r2, [r7, #32]
 800b890:	461a      	mov	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4413      	add	r3, r2
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	b29a      	uxth	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	819a      	strh	r2, [r3, #12]
        self->nof += (msg[startIndex++] * 0x100);
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	1c5a      	adds	r2, r3, #1
 800b8a2:	623a      	str	r2, [r7, #32]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	0219      	lsls	r1, r3, #8
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	899a      	ldrh	r2, [r3, #12]
 800b8b2:	b28b      	uxth	r3, r1
 800b8b4:	4413      	add	r3, r2
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	819a      	strh	r2, [r3, #12]

        self->lengthOfFile = msg [startIndex++];
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	623a      	str	r2, [r7, #32]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	611a      	str	r2, [r3, #16]
        self->lengthOfFile += (msg [startIndex++] * 0x100);
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	623a      	str	r2, [r7, #32]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4413      	add	r3, r2
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	021a      	lsls	r2, r3, #8
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	611a      	str	r2, [r3, #16]
        self->lengthOfFile += (msg [startIndex++] * 0x10000);
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	1c5a      	adds	r2, r3, #1
 800b8ee:	623a      	str	r2, [r7, #32]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	041a      	lsls	r2, r3, #16
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	441a      	add	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	611a      	str	r2, [r3, #16]


        self->sof = msg[startIndex++];
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	623a      	str	r2, [r7, #32]
 800b90a:	461a      	mov	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4413      	add	r3, r2
 800b910:	781a      	ldrb	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	751a      	strb	r2, [r3, #20]

        CP56Time2a_getFromBuffer(&(self->creationTime), msg, msgSize, startIndex);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f103 0015 	add.w	r0, r3, #21
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	f7f8 fb21 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800b926:	68fb      	ldr	r3, [r7, #12]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <QueryLog_encode>:
 * QueryLog: InformationObject
 *************************************************/

static bool
QueryLog_encode(QueryLog self, Frame frame, CS101_AppLayerParameters parameters, bool isSequence)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	70fb      	strb	r3, [r7, #3]
    int size = isSequence ? 16 : (parameters->sizeOfIOA + 16);
 800b93e:	78fb      	ldrb	r3, [r7, #3]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <QueryLog_encode+0x18>
 800b944:	2310      	movs	r3, #16
 800b946:	e002      	b.n	800b94e <QueryLog_encode+0x1e>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	3310      	adds	r3, #16
 800b94e:	617b      	str	r3, [r7, #20]

    if (Frame_getSpaceLeft(frame) < size)
 800b950:	68b8      	ldr	r0, [r7, #8]
 800b952:	f000 fc67 	bl	800c224 <Frame_getSpaceLeft>
 800b956:	4602      	mov	r2, r0
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	4293      	cmp	r3, r2
 800b95c:	dd01      	ble.n	800b962 <QueryLog_encode+0x32>
        return false;
 800b95e:	2300      	movs	r3, #0
 800b960:	e024      	b.n	800b9ac <QueryLog_encode+0x7c>

    InformationObject_encodeBase((InformationObject) self, frame, parameters, isSequence);
 800b962:	78fb      	ldrb	r3, [r7, #3]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	68b9      	ldr	r1, [r7, #8]
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7fa fcba 	bl	80062e2 <InformationObject_encodeBase>

    Frame_setNextByte (frame, (uint8_t)((int) self->nof % 256));
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	899b      	ldrh	r3, [r3, #12]
 800b972:	b2db      	uxtb	r3, r3
 800b974:	4619      	mov	r1, r3
 800b976:	68b8      	ldr	r0, [r7, #8]
 800b978:	f000 fc32 	bl	800c1e0 <Frame_setNextByte>
    Frame_setNextByte (frame, (uint8_t)((int) self->nof / 256));
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	899b      	ldrh	r3, [r3, #12]
 800b980:	0a1b      	lsrs	r3, r3, #8
 800b982:	b29b      	uxth	r3, r3
 800b984:	b2db      	uxtb	r3, r3
 800b986:	4619      	mov	r1, r3
 800b988:	68b8      	ldr	r0, [r7, #8]
 800b98a:	f000 fc29 	bl	800c1e0 <Frame_setNextByte>

    Frame_appendBytes(frame, self->rangeStartTime.encodedValue, 7);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	330e      	adds	r3, #14
 800b992:	2207      	movs	r2, #7
 800b994:	4619      	mov	r1, r3
 800b996:	68b8      	ldr	r0, [r7, #8]
 800b998:	f000 fc33 	bl	800c202 <Frame_appendBytes>
    Frame_appendBytes(frame, self->rangeStopTime.encodedValue, 7);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3315      	adds	r3, #21
 800b9a0:	2207      	movs	r2, #7
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	68b8      	ldr	r0, [r7, #8]
 800b9a6:	f000 fc2c 	bl	800c202 <Frame_appendBytes>

    return true;
 800b9aa:	2301      	movs	r3, #1
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <QueryLog_initialize>:
        (DestroyFunction) QueryLog_destroy
};

static void
QueryLog_initialize(QueryLog self)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
    self->virtualFunctionTable = &(QueryLogVFT);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4a05      	ldr	r2, [pc, #20]	; (800b9d4 <QueryLog_initialize+0x20>)
 800b9c0:	609a      	str	r2, [r3, #8]
    self->type = F_SC_NB_1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	227f      	movs	r2, #127	; 0x7f
 800b9c6:	711a      	strb	r2, [r3, #4]
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	20000338 	.word	0x20000338

0800b9d8 <QueryLog_destroy>:
    return &(self->rangeStopTime);
}

void
QueryLog_destroy(QueryLog self)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
    GLOBAL_FREEMEM(self);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7f8 fa62 	bl	8003eaa <Memory_free>
}
 800b9e6:	bf00      	nop
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <QueryLog_getFromBuffer>:

QueryLog
QueryLog_getFromBuffer(QueryLog self, CS101_AppLayerParameters parameters,
        uint8_t* msg, int msgSize, int startIndex)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b086      	sub	sp, #24
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	603b      	str	r3, [r7, #0]
    /* check message size */
    int minSize = startIndex + parameters->sizeOfIOA + 16;
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	695a      	ldr	r2, [r3, #20]
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	4413      	add	r3, r2
 800ba04:	3310      	adds	r3, #16
 800ba06:	617b      	str	r3, [r7, #20]

    if (minSize > msgSize) {
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	dd01      	ble.n	800ba14 <QueryLog_getFromBuffer+0x26>
        DEBUG_PRINT("invalid ASDU - size too small\n");
        return NULL;
 800ba10:	2300      	movs	r3, #0
 800ba12:	e044      	b.n	800ba9e <QueryLog_getFromBuffer+0xb0>
    }

    if (self == NULL)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d103      	bne.n	800ba22 <QueryLog_getFromBuffer+0x34>
       self = (QueryLog) GLOBAL_MALLOC(sizeof(struct sQueryLog));
 800ba1a:	201c      	movs	r0, #28
 800ba1c:	f7f8 fa32 	bl	8003e84 <Memory_malloc>
 800ba20:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d039      	beq.n	800ba9c <QueryLog_getFromBuffer+0xae>

        QueryLog_initialize(self);
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f7ff ffc3 	bl	800b9b4 <QueryLog_initialize>

        InformationObject_getFromBuffer((InformationObject) self, parameters, msg, startIndex);
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	68b9      	ldr	r1, [r7, #8]
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f7fa fcb8 	bl	80063aa <InformationObject_getFromBuffer>

        startIndex += parameters->sizeOfIOA; /* skip IOA */
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	6a3a      	ldr	r2, [r7, #32]
 800ba40:	4413      	add	r3, r2
 800ba42:	623b      	str	r3, [r7, #32]

        self->nof = msg[startIndex++];
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	623a      	str	r2, [r7, #32]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4413      	add	r3, r2
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	819a      	strh	r2, [r3, #12]
        self->nof += (msg[startIndex++] * 0x100);
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	623a      	str	r2, [r7, #32]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4413      	add	r3, r2
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	0219      	lsls	r1, r3, #8
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	899a      	ldrh	r2, [r3, #12]
 800ba6c:	b28b      	uxth	r3, r1
 800ba6e:	4413      	add	r3, r2
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	819a      	strh	r2, [r3, #12]

        CP56Time2a_getFromBuffer(&(self->rangeStartTime), msg, msgSize, startIndex);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f103 000e 	add.w	r0, r3, #14
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	f7f8 fa71 	bl	8003f68 <CP56Time2a_getFromBuffer>
        startIndex += 7;
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	3307      	adds	r3, #7
 800ba8a:	623b      	str	r3, [r7, #32]

        CP56Time2a_getFromBuffer(&(self->rangeStopTime), msg, msgSize, startIndex);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f103 0015 	add.w	r0, r3, #21
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	683a      	ldr	r2, [r7, #0]
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	f7f8 fa66 	bl	8003f68 <CP56Time2a_getFromBuffer>
    }

    return self;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <IBalancedApplicationLayer_GetUserData>:
/********************************************
 * IBalancedApplicationLayer
 ********************************************/
static Frame
IBalancedApplicationLayer_GetUserData (void* parameter, Frame frame)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b084      	sub	sp, #16
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	6039      	str	r1, [r7, #0]
    CS101_Master self = (CS101_Master) parameter;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	60fb      	str	r3, [r7, #12]

    Frame ret = NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60bb      	str	r3, [r7, #8]

    CS101_Queue_lock(&(self->userDataQueue));
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	334c      	adds	r3, #76	; 0x4c
 800babc:	4618      	mov	r0, r3
 800babe:	f000 facd 	bl	800c05c <CS101_Queue_lock>

    ret = CS101_Queue_dequeue(&(self->userDataQueue), frame);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	334c      	adds	r3, #76	; 0x4c
 800bac6:	6839      	ldr	r1, [r7, #0]
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 fb4c 	bl	800c166 <CS101_Queue_dequeue>
 800bace:	60b8      	str	r0, [r7, #8]

    CS101_Queue_unlock(&(self->userDataQueue));
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	334c      	adds	r3, #76	; 0x4c
 800bad4:	4618      	mov	r0, r3
 800bad6:	f000 facb 	bl	800c070 <CS101_Queue_unlock>

    return ret;
 800bada:	68bb      	ldr	r3, [r7, #8]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <IBalancedApplicationLayer_HandleReceivedData>:

static bool
IBalancedApplicationLayer_HandleReceivedData (void* parameter, uint8_t* msg, bool isBroadcast, int userDataStart, int userDataLength)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	603b      	str	r3, [r7, #0]
 800baf0:	4613      	mov	r3, r2
 800baf2:	71fb      	strb	r3, [r7, #7]
    UNUSED_PARAMETER(isBroadcast);

    CS101_Master self = (CS101_Master) parameter;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	617b      	str	r3, [r7, #20]

    CS101_ASDU asdu = CS101_ASDU_createFromBuffer(&(self->alParameters), msg + userDataStart, userDataLength);
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f103 0014 	add.w	r0, r3, #20
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	4413      	add	r3, r2
 800bb04:	6a3a      	ldr	r2, [r7, #32]
 800bb06:	4619      	mov	r1, r3
 800bb08:	f7f8 fb65 	bl	80041d6 <CS101_ASDU_createFromBuffer>
 800bb0c:	6138      	str	r0, [r7, #16]

    if (self->asduReceivedHandler)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d006      	beq.n	800bb24 <IBalancedApplicationLayer_HandleReceivedData+0x40>
        self->asduReceivedHandler(self->asduReceivedHandlerParameter, 0, asdu);
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	2100      	movs	r1, #0
 800bb22:	4798      	blx	r3

    CS101_ASDU_destroy(asdu);
 800bb24:	6938      	ldr	r0, [r7, #16]
 800bb26:	f7f8 fb37 	bl	8004198 <CS101_ASDU_destroy>

    return true;
 800bb2a:	2301      	movs	r3, #1
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <IPrimaryApplicationLayer_AccessDemand>:
 * IPrimaryApplicationLayer
 ********************************************/

static void
IPrimaryApplicationLayer_AccessDemand(void* parameter, int slaveAddress)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
    CS101_Master self = (CS101_Master) parameter;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	60fb      	str	r3, [r7, #12]

    DEBUG_PRINT ("MASTER: Access demand for slave %i\n", slaveAddress);

    LinkLayerPrimaryUnbalanced_requestClass1Data(self->unbalancedLinkLayer, slaveAddress);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fddc 	bl	800c706 <LinkLayerPrimaryUnbalanced_requestClass1Data>
}
 800bb4e:	bf00      	nop
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <IPrimaryApplicationLayer_UserData>:

static void
IPrimaryApplicationLayer_UserData(void* parameter, int slaveAddress, uint8_t* msg, int start, int length)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b086      	sub	sp, #24
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	607a      	str	r2, [r7, #4]
 800bb62:	603b      	str	r3, [r7, #0]
    CS101_Master self = (CS101_Master) parameter;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	617b      	str	r3, [r7, #20]

    CS101_ASDU asdu = CS101_ASDU_createFromBuffer(&(self->alParameters), msg + start, length);
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	f103 0014 	add.w	r0, r3, #20
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	4413      	add	r3, r2
 800bb74:	6a3a      	ldr	r2, [r7, #32]
 800bb76:	4619      	mov	r1, r3
 800bb78:	f7f8 fb2d 	bl	80041d6 <CS101_ASDU_createFromBuffer>
 800bb7c:	6138      	str	r0, [r7, #16]

    if (self->asduReceivedHandler)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d006      	beq.n	800bb94 <IPrimaryApplicationLayer_UserData+0x3e>
        self->asduReceivedHandler(self->asduReceivedHandlerParameter, slaveAddress, asdu);
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	4798      	blx	r3

    CS101_ASDU_destroy(asdu);
 800bb94:	6938      	ldr	r0, [r7, #16]
 800bb96:	f7f8 faff 	bl	8004198 <CS101_ASDU_destroy>

}
 800bb9a:	bf00      	nop
 800bb9c:	3718      	adds	r7, #24
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <IPrimaryApplicationLayer_Timeout>:

static void
IPrimaryApplicationLayer_Timeout (void* parameter, int slaveAddress)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b083      	sub	sp, #12
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
    UNUSED_PARAMETER(parameter);
    UNUSED_PARAMETER(slaveAddress);
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <CS101_Master_createEx>:
 ********************************************/

CS101_Master
CS101_Master_createEx(SerialPort serialPort, LinkLayerParameters llParameters, CS101_AppLayerParameters alParameters, IEC60870_LinkLayerMode linkLayerMode,
        int queueSize)
{
 800bbb8:	b5b0      	push	{r4, r5, r7, lr}
 800bbba:	b088      	sub	sp, #32
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
 800bbc4:	70fb      	strb	r3, [r7, #3]
    CS101_Master self = (CS101_Master) GLOBAL_MALLOC(sizeof(struct sCS101_Master));
 800bbc6:	f640 207c 	movw	r0, #2684	; 0xa7c
 800bbca:	f7f8 f95b 	bl	8003e84 <Memory_malloc>
 800bbce:	6178      	str	r0, [r7, #20]

    if (self != NULL) {
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d06f      	beq.n	800bcb6 <CS101_Master_createEx+0xfe>

        if (llParameters)
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <CS101_Master_createEx+0x34>
            self->linkLayerParameters = *llParameters;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	1d1c      	adds	r4, r3, #4
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bbe6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bbea:	e00c      	b.n	800bc06 <CS101_Master_createEx+0x4e>
        else {
            self->linkLayerParameters.addressLength = 1;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	605a      	str	r2, [r3, #4]
            self->linkLayerParameters.timeoutForAck = 200;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	22c8      	movs	r2, #200	; 0xc8
 800bbf6:	609a      	str	r2, [r3, #8]
            self->linkLayerParameters.timeoutRepeat = 1000;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbfe:	60da      	str	r2, [r3, #12]
            self->linkLayerParameters.useSingleCharACK = true;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	2201      	movs	r2, #1
 800bc04:	741a      	strb	r2, [r3, #16]
        }

        if (alParameters)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00b      	beq.n	800bc24 <CS101_Master_createEx+0x6c>
            self->alParameters = *alParameters;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	f103 0414 	add.w	r4, r3, #20
 800bc14:	4615      	mov	r5, r2
 800bc16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bc22:	e00a      	b.n	800bc3a <CS101_Master_createEx+0x82>
        else
            self->alParameters = defaultAppLayerParameters;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	4a26      	ldr	r2, [pc, #152]	; (800bcc0 <CS101_Master_createEx+0x108>)
 800bc28:	f103 0414 	add.w	r4, r3, #20
 800bc2c:	4615      	mov	r5, r2
 800bc2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc36:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        self->transceiver = SerialTransceiverFT12_create(serialPort,  &(self->linkLayerParameters));
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	4619      	mov	r1, r3
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f000 fdfe 	bl	800c842 <SerialTransceiverFT12_create>
 800bc46:	4602      	mov	r2, r0
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	631a      	str	r2, [r3, #48]	; 0x30

        self->linkLayerMode = linkLayerMode;
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	78fa      	ldrb	r2, [r7, #3]
 800bc50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if (linkLayerMode == IEC60870_LINK_LAYER_UNBALANCED) {
 800bc54:	78fb      	ldrb	r3, [r7, #3]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d10e      	bne.n	800bc78 <CS101_Master_createEx+0xc0>

            self->balancedLinkLayer = NULL;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	639a      	str	r2, [r3, #56]	; 0x38

            self->unbalancedLinkLayer = LinkLayerPrimaryUnbalanced_create(self->transceiver,
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	1d19      	adds	r1, r3, #4
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	4a16      	ldr	r2, [pc, #88]	; (800bcc4 <CS101_Master_createEx+0x10c>)
 800bc6c:	f000 fcba 	bl	800c5e4 <LinkLayerPrimaryUnbalanced_create>
 800bc70:	4602      	mov	r2, r0
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	63da      	str	r2, [r3, #60]	; 0x3c
 800bc76:	e01b      	b.n	800bcb0 <CS101_Master_createEx+0xf8>
                    &(self->linkLayerParameters), &cs101UnbalancedAppLayerInterface, self);
        }
        else {
            CS101_Queue_initialize(&(self->userDataQueue), queueSize);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	334c      	adds	r3, #76	; 0x4c
 800bc7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 f9cd 	bl	800c01e <CS101_Queue_initialize>

            self->unbalancedLinkLayer = NULL;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2200      	movs	r2, #0
 800bc88:	63da      	str	r2, [r3, #60]	; 0x3c

            self->balancedLinkLayer = LinkLayerBalanced_create(0, self->transceiver,
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	1d1a      	adds	r2, r3, #4
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <CS101_Master_createEx+0x110>)
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f000 fc1a 	bl	800c4d2 <LinkLayerBalanced_create>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	639a      	str	r2, [r3, #56]	; 0x38
                    &(self->linkLayerParameters),
                    &cs101BalancedAppLayerInterface, self);

            LinkLayerBalanced_setDIR(self->balancedLinkLayer, true);
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca8:	2101      	movs	r1, #1
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 fc6a 	bl	800c584 <LinkLayerBalanced_setDIR>
        }

        self->asduReceivedHandler = NULL;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	645a      	str	r2, [r3, #68]	; 0x44
        self->workerThread = NULL;
#endif

    }

    return self;
 800bcb6:	697b      	ldr	r3, [r7, #20]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bdb0      	pop	{r4, r5, r7, pc}
 800bcc0:	20000340 	.word	0x20000340
 800bcc4:	20000364 	.word	0x20000364
 800bcc8:	2000035c 	.word	0x2000035c

0800bccc <CS101_Master_create>:

CS101_Master
CS101_Master_create(SerialPort serialPort, LinkLayerParameters llParameters, CS101_AppLayerParameters alParameters, IEC60870_LinkLayerMode linkLayerMode)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	70fb      	strb	r3, [r7, #3]
    return CS101_Master_createEx(serialPort, llParameters, alParameters, linkLayerMode, CS101_MAX_QUEUE_SIZE);
 800bcda:	78fb      	ldrb	r3, [r7, #3]
 800bcdc:	220a      	movs	r2, #10
 800bcde:	9200      	str	r2, [sp, #0]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f7ff ff67 	bl	800bbb8 <CS101_Master_createEx>
 800bcea:	4603      	mov	r3, r0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <CS101_Master_setOwnAddress>:
        LinkLayerBalanced_setDIR(self->balancedLinkLayer, dir);
}

void
CS101_Master_setOwnAddress(CS101_Master self, int address)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
    if (self->balancedLinkLayer)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d005      	beq.n	800bd12 <CS101_Master_setOwnAddress+0x1e>
        LinkLayerBalanced_setAddress(self->balancedLinkLayer, address);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 fc4a 	bl	800c5a6 <LinkLayerBalanced_setAddress>
}
 800bd12:	bf00      	nop
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <CS101_Master_useSlaveAddress>:

void
CS101_Master_useSlaveAddress(CS101_Master self, int address)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	6039      	str	r1, [r7, #0]
    self->slaveAddress = address;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	641a      	str	r2, [r3, #64]	; 0x40

    if (self->balancedLinkLayer) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d005      	beq.n	800bd3e <CS101_Master_useSlaveAddress+0x24>
        LinkLayerBalanced_setOtherStationAddress(self->balancedLinkLayer, address);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fc44 	bl	800c5c6 <LinkLayerBalanced_setOtherStationAddress>
    }
}
 800bd3e:	bf00      	nop
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <CS101_Master_getLinkLayerParameters>:

LinkLayerParameters
CS101_Master_getLinkLayerParameters(CS101_Master self)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
    return &(self->linkLayerParameters);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3304      	adds	r3, #4
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
	...

0800bd60 <CS101_Master_sendInterrogationCommand>:
}
extern uint8_t *data_interrogation;
extern uint8_t size_data_interrogation;
void
CS101_Master_sendInterrogationCommand(CS101_Master self, CS101_CauseOfTransmission cot, int ca, QualifierOfInterrogation qoi)
{
 800bd60:	b590      	push	{r4, r7, lr}
 800bd62:	b0d5      	sub	sp, #340	; 0x154
 800bd64:	af04      	add	r7, sp, #16
 800bd66:	f107 040c 	add.w	r4, r7, #12
 800bd6a:	6020      	str	r0, [r4, #0]
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	1d39      	adds	r1, r7, #4
 800bd70:	600a      	str	r2, [r1, #0]
 800bd72:	4619      	mov	r1, r3
 800bd74:	f107 030b 	add.w	r3, r7, #11
 800bd78:	4602      	mov	r2, r0
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	f107 030a 	add.w	r3, r7, #10
 800bd80:	460a      	mov	r2, r1
 800bd82:	701a      	strb	r2, [r3, #0]
    sCS101_StaticASDU _asdu;

    CS101_ASDU asdu = CS101_ASDU_initializeStatic(&_asdu, &(self->alParameters), false, cot, self->alParameters.originatorAddress, ca, false, false);
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f103 0114 	add.w	r1, r3, #20
 800bd8e:	f107 030c 	add.w	r3, r7, #12
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	f107 020b 	add.w	r2, r7, #11
 800bd9a:	7814      	ldrb	r4, [r2, #0]
 800bd9c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bda0:	2200      	movs	r2, #0
 800bda2:	9203      	str	r2, [sp, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	9202      	str	r2, [sp, #8]
 800bda8:	1d3a      	adds	r2, r7, #4
 800bdaa:	6812      	ldr	r2, [r2, #0]
 800bdac:	9201      	str	r2, [sp, #4]
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	4623      	mov	r3, r4
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f7f8 f96e 	bl	8004094 <CS101_ASDU_initializeStatic>
 800bdb8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

    struct sInterrogationCommand _io;

    InformationObject io = (InformationObject) InterrogationCommand_create(&_io, 0, qoi);
 800bdbc:	f107 030a 	add.w	r3, r7, #10
 800bdc0:	781a      	ldrb	r2, [r3, #0]
 800bdc2:	f107 0314 	add.w	r3, r7, #20
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe fbc7 	bl	800a55c <InterrogationCommand_create>
 800bdce:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138

    CS101_ASDU_addInformationObject(asdu, io);
 800bdd2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800bdd6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800bdda:	f7f8 fa61 	bl	80042a0 <CS101_ASDU_addInformationObject>

    CS101_Master_sendASDU(self, asdu);
 800bdde:	f107 030c 	add.w	r3, r7, #12
 800bde2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800bde6:	6818      	ldr	r0, [r3, #0]
 800bde8:	f000 f88c 	bl	800bf04 <CS101_Master_sendASDU>

    		  data_interrogation =self->userDataQueue.elements[0].buffer;
 800bdec:	f107 030c 	add.w	r3, r7, #12
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3371      	adds	r3, #113	; 0x71
 800bdf4:	4a06      	ldr	r2, [pc, #24]	; (800be10 <CS101_Master_sendInterrogationCommand+0xb0>)
 800bdf6:	6013      	str	r3, [r2, #0]
    		  size_data_interrogation=self->userDataQueue.size;
 800bdf8:	f107 030c 	add.w	r3, r7, #12
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be00:	b2da      	uxtb	r2, r3
 800be02:	4b04      	ldr	r3, [pc, #16]	; (800be14 <CS101_Master_sendInterrogationCommand+0xb4>)
 800be04:	701a      	strb	r2, [r3, #0]


}
 800be06:	bf00      	nop
 800be08:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd90      	pop	{r4, r7, pc}
 800be10:	20000594 	.word	0x20000594
 800be14:	2000057e 	.word	0x2000057e

0800be18 <CS101_Master_sendProcessCommand>:
}
extern uint8_t *data_single_command;
extern uint8_t size_data_single_command ;
void
CS101_Master_sendProcessCommand(CS101_Master self, CS101_CauseOfTransmission cot, int ca, InformationObject command)
{
 800be18:	b590      	push	{r4, r7, lr}
 800be1a:	b0cf      	sub	sp, #316	; 0x13c
 800be1c:	af04      	add	r7, sp, #16
 800be1e:	f107 040c 	add.w	r4, r7, #12
 800be22:	6020      	str	r0, [r4, #0]
 800be24:	4608      	mov	r0, r1
 800be26:	1d39      	adds	r1, r7, #4
 800be28:	600a      	str	r2, [r1, #0]
 800be2a:	463a      	mov	r2, r7
 800be2c:	6013      	str	r3, [r2, #0]
 800be2e:	f107 030b 	add.w	r3, r7, #11
 800be32:	4602      	mov	r2, r0
 800be34:	701a      	strb	r2, [r3, #0]
    sCS101_StaticASDU _asdu;

    CS101_ASDU asdu = CS101_ASDU_initializeStatic(&_asdu, &(self->alParameters), false, cot, self->alParameters.originatorAddress, ca, false, false);
 800be36:	f107 030c 	add.w	r3, r7, #12
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f103 0114 	add.w	r1, r3, #20
 800be40:	f107 030c 	add.w	r3, r7, #12
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6a1b      	ldr	r3, [r3, #32]
 800be48:	f107 020b 	add.w	r2, r7, #11
 800be4c:	7814      	ldrb	r4, [r2, #0]
 800be4e:	f107 0010 	add.w	r0, r7, #16
 800be52:	2200      	movs	r2, #0
 800be54:	9203      	str	r2, [sp, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	9202      	str	r2, [sp, #8]
 800be5a:	1d3a      	adds	r2, r7, #4
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	9201      	str	r2, [sp, #4]
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	4623      	mov	r3, r4
 800be64:	2200      	movs	r2, #0
 800be66:	f7f8 f915 	bl	8004094 <CS101_ASDU_initializeStatic>
 800be6a:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

    CS101_ASDU_addInformationObject(asdu, command);
 800be6e:	463b      	mov	r3, r7
 800be70:	6819      	ldr	r1, [r3, #0]
 800be72:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800be76:	f7f8 fa13 	bl	80042a0 <CS101_ASDU_addInformationObject>

    CS101_Master_sendASDU(self, asdu);
 800be7a:	f107 030c 	add.w	r3, r7, #12
 800be7e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800be82:	6818      	ldr	r0, [r3, #0]
 800be84:	f000 f83e 	bl	800bf04 <CS101_Master_sendASDU>
    data_single_command=asdu->asdu;
 800be88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	4a09      	ldr	r2, [pc, #36]	; (800beb4 <CS101_Master_sendProcessCommand+0x9c>)
 800be90:	6013      	str	r3, [r2, #0]
    size_data_single_command =asdu->asduHeaderLength +asdu->payloadSize;
 800be92:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	4413      	add	r3, r2
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	4b04      	ldr	r3, [pc, #16]	; (800beb8 <CS101_Master_sendProcessCommand+0xa0>)
 800bea8:	701a      	strb	r2, [r3, #0]

}
 800beaa:	bf00      	nop
 800beac:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd90      	pop	{r4, r7, pc}
 800beb4:	200005f8 	.word	0x200005f8
 800beb8:	2000057f 	.word	0x2000057f

0800bebc <isBroadcastAddress>:

static bool
isBroadcastAddress(CS101_Master self, int address)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
    if (self->linkLayerParameters.addressLength == 1) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d106      	bne.n	800bedc <isBroadcastAddress+0x20>
        return (address == 255);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2bff      	cmp	r3, #255	; 0xff
 800bed2:	bf0c      	ite	eq
 800bed4:	2301      	moveq	r3, #1
 800bed6:	2300      	movne	r3, #0
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	e00d      	b.n	800bef8 <isBroadcastAddress+0x3c>
    }
    else if (self->linkLayerParameters.addressLength == 2) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d108      	bne.n	800bef6 <isBroadcastAddress+0x3a>
        return (address == 65535);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beea:	4293      	cmp	r3, r2
 800beec:	bf0c      	ite	eq
 800beee:	2301      	moveq	r3, #1
 800bef0:	2300      	movne	r3, #0
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	e000      	b.n	800bef8 <isBroadcastAddress+0x3c>
    }

    return 0;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <CS101_Master_sendASDU>:

void
CS101_Master_sendASDU(CS101_Master self, CS101_ASDU asdu)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b0c8      	sub	sp, #288	; 0x120
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	1d3b      	adds	r3, r7, #4
 800bf0c:	6018      	str	r0, [r3, #0]
 800bf0e:	463b      	mov	r3, r7
 800bf10:	6019      	str	r1, [r3, #0]
    if (self->unbalancedLinkLayer) {
 800bf12:	1d3b      	adds	r3, r7, #4
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d031      	beq.n	800bf80 <CS101_Master_sendASDU+0x7c>

        struct sBufferFrame bufferFrame;
        uint8_t buffer[256];
        BufferFrame_initialize(&bufferFrame, buffer, 0);
 800bf1c:	f107 010c 	add.w	r1, r7, #12
 800bf20:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800bf24:	2200      	movs	r2, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 f98a 	bl	800c240 <BufferFrame_initialize>

        CS101_ASDU_encode(asdu, (Frame) &bufferFrame);
 800bf2c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800bf30:	463b      	mov	r3, r7
 800bf32:	4611      	mov	r1, r2
 800bf34:	6818      	ldr	r0, [r3, #0]
 800bf36:	f7f8 f93a 	bl	80041ae <CS101_ASDU_encode>

        if (isBroadcastAddress(self, self->slaveAddress))
 800bf3a:	1d3b      	adds	r3, r7, #4
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf40:	1d3b      	adds	r3, r7, #4
 800bf42:	4611      	mov	r1, r2
 800bf44:	6818      	ldr	r0, [r3, #0]
 800bf46:	f7ff ffb9 	bl	800bebc <isBroadcastAddress>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00b      	beq.n	800bf68 <CS101_Master_sendASDU+0x64>
            LinkLayerPrimaryUnbalanced_sendNoReply(self->unbalancedLinkLayer, self->slaveAddress, &bufferFrame);
 800bf50:	1d3b      	adds	r3, r7, #4
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bf56:	1d3b      	adds	r3, r7, #4
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800bf60:	4619      	mov	r1, r3
 800bf62:	f000 fc18 	bl	800c796 <LinkLayerPrimaryUnbalanced_sendNoReply>
        else
            LinkLayerPrimaryUnbalanced_sendConfirmed(self->unbalancedLinkLayer, self->slaveAddress, &bufferFrame);
    }
    else
        CS101_Queue_enqueue(&(self->userDataQueue), asdu);
}
 800bf66:	e014      	b.n	800bf92 <CS101_Master_sendASDU+0x8e>
            LinkLayerPrimaryUnbalanced_sendConfirmed(self->unbalancedLinkLayer, self->slaveAddress, &bufferFrame);
 800bf68:	1d3b      	adds	r3, r7, #4
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bf6e:	1d3b      	adds	r3, r7, #4
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf74:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800bf78:	4619      	mov	r1, r3
 800bf7a:	f000 fbdc 	bl	800c736 <LinkLayerPrimaryUnbalanced_sendConfirmed>
}
 800bf7e:	e008      	b.n	800bf92 <CS101_Master_sendASDU+0x8e>
        CS101_Queue_enqueue(&(self->userDataQueue), asdu);
 800bf80:	1d3b      	adds	r3, r7, #4
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800bf88:	463b      	mov	r3, r7
 800bf8a:	6819      	ldr	r1, [r3, #0]
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	f000 f879 	bl	800c084 <CS101_Queue_enqueue>
}
 800bf92:	bf00      	nop
 800bf94:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <CS101_Master_setASDUReceivedHandler>:
    }
}

void
CS101_Master_setASDUReceivedHandler(CS101_Master self, CS101_ASDUReceivedHandler handler, void* parameter)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
    self->asduReceivedHandler = handler;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	645a      	str	r2, [r3, #68]	; 0x44
    self->asduReceivedHandlerParameter = parameter;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	649a      	str	r2, [r3, #72]	; 0x48
}
 800bfb4:	bf00      	nop
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <CS101_Master_setLinkLayerStateChanged>:

void
CS101_Master_setLinkLayerStateChanged(CS101_Master self, IEC60870_LinkLayerStateChangedHandler handler, void* parameter)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
    if (self->linkLayerMode == IEC60870_LINK_LAYER_BALANCED) {
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d107      	bne.n	800bfe6 <CS101_Master_setLinkLayerStateChanged+0x26>
        LinkLayerBalanced_setStateChangeHandler(self->balancedLinkLayer, handler, parameter);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 fabc 	bl	800c55c <LinkLayerBalanced_setStateChangeHandler>
    }
    else {
        LinkLayerPrimaryUnbalanced_setStateChangeHandler(self->unbalancedLinkLayer, handler, parameter);
    }
}
 800bfe4:	e006      	b.n	800bff4 <CS101_Master_setLinkLayerStateChanged+0x34>
        LinkLayerPrimaryUnbalanced_setStateChangeHandler(self->unbalancedLinkLayer, handler, parameter);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	68b9      	ldr	r1, [r7, #8]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 fb4e 	bl	800c690 <LinkLayerPrimaryUnbalanced_setStateChangeHandler>
}
 800bff4:	bf00      	nop
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <CS101_Master_setRawMessageHandler>:

void
CS101_Master_setRawMessageHandler(CS101_Master self, IEC60870_RawMessageHandler handler, void* parameter)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
    SerialTransceiverFT12_setRawMessageHandler(self->transceiver, handler, parameter);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	68b9      	ldr	r1, [r7, #8]
 800c010:	4618      	mov	r0, r3
 800c012:	f000 fc37 	bl	800c884 <SerialTransceiverFT12_setRawMessageHandler>
}
 800c016:	bf00      	nop
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <CS101_Queue_initialize>:
 * CS101_Queue
 ********************************************/

void
CS101_Queue_initialize(CS101_Queue self, int maxQueueSize)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	6039      	str	r1, [r7, #0]
    self->entryCounter = 0;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	605a      	str	r2, [r3, #4]
    self->firstMsgIndex = 0;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	60da      	str	r2, [r3, #12]
    self->lastMsgIndex = 0;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	609a      	str	r2, [r3, #8]
    self->size = maxQueueSize;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	683a      	ldr	r2, [r7, #0]
 800c03e:	601a      	str	r2, [r3, #0]

    BufferFrame_initialize(&(self->encodeFrame), NULL, 0);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3310      	adds	r3, #16
 800c044:	2200      	movs	r2, #0
 800c046:	2100      	movs	r1, #0
 800c048:	4618      	mov	r0, r3
 800c04a:	f000 f8f9 	bl	800c240 <BufferFrame_initialize>

    self->elements = (CS101_QueueElement) GLOBAL_CALLOC(queueSize, sizeof(struct sCS101_QueueElement));

    self->size = queueSize;
#else
    self->size = CS101_MAX_QUEUE_SIZE;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	220a      	movs	r2, #10
 800c052:	601a      	str	r2, [r3, #0]


#if (CONFIG_USE_SEMAPHORES == 1)
    self->queueLock = Semaphore_create(1);
#endif
}
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <CS101_Queue_lock>:
#endif
}

void
CS101_Queue_lock(CS101_Queue self)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
#if (CONFIG_USE_SEMAPHORES == 1)
    Semaphore_wait(self->queueLock);
#endif
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <CS101_Queue_unlock>:

void
CS101_Queue_unlock(CS101_Queue self)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
#if (CONFIG_USE_SEMAPHORES == 1)
    Semaphore_post(self->queueLock);
#endif
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <CS101_Queue_enqueue>:

void
CS101_Queue_enqueue(CS101_Queue self, CS101_ASDU asdu)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
    CS101_Queue_lock(self);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7ff ffe4 	bl	800c05c <CS101_Queue_lock>

    int nextIndex;
    bool removeEntry = false;
 800c094:	2300      	movs	r3, #0
 800c096:	74fb      	strb	r3, [r7, #19]

    if (self->entryCounter == 0) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d105      	bne.n	800c0ac <CS101_Queue_enqueue+0x28>
        self->firstMsgIndex = 0;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	60da      	str	r2, [r3, #12]
        nextIndex = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	e003      	b.n	800c0b4 <CS101_Queue_enqueue+0x30>
    }
    else
        nextIndex = self->lastMsgIndex + 1;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	617b      	str	r3, [r7, #20]

    if (nextIndex == self->size)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	697a      	ldr	r2, [r7, #20]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d101      	bne.n	800c0c2 <CS101_Queue_enqueue+0x3e>
        nextIndex = 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	617b      	str	r3, [r7, #20]

    if (self->entryCounter == self->size)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d101      	bne.n	800c0d2 <CS101_Queue_enqueue+0x4e>
        removeEntry = true;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	74fb      	strb	r3, [r7, #19]

    if (removeEntry == false) {
 800c0d2:	7cfb      	ldrb	r3, [r7, #19]
 800c0d4:	f083 0301 	eor.w	r3, r3, #1
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d008      	beq.n	800c0f0 <CS101_Queue_enqueue+0x6c>
        DEBUG_PRINT("add entry (nextIndex:%i)\n", nextIndex);
        self->lastMsgIndex = nextIndex;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	609a      	str	r2, [r3, #8]
        self->entryCounter++;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	605a      	str	r2, [r3, #4]
 800c0ee:	e00f      	b.n	800c110 <CS101_Queue_enqueue+0x8c>
    }
    else {
        DEBUG_PRINT("add entry (nextIndex:%i) -> remove oldest\n", nextIndex);

        /* remove oldest entry */
        self->lastMsgIndex = nextIndex;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	697a      	ldr	r2, [r7, #20]
 800c0f4:	609a      	str	r2, [r3, #8]

        int firstIndex = nextIndex + 1;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	60fb      	str	r3, [r7, #12]

        if (firstIndex == self->size)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	429a      	cmp	r2, r3
 800c104:	d101      	bne.n	800c10a <CS101_Queue_enqueue+0x86>
            firstIndex = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	60fb      	str	r3, [r7, #12]

        self->firstMsgIndex = firstIndex;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	60da      	str	r2, [r3, #12]
    }

    self->encodeFrame.buffer = self->elements[nextIndex].buffer;
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	4613      	mov	r3, r2
 800c114:	021b      	lsls	r3, r3, #8
 800c116:	4413      	add	r3, r2
 800c118:	3320      	adds	r3, #32
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	4413      	add	r3, r2
 800c11e:	1d5a      	adds	r2, r3, #5
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	615a      	str	r2, [r3, #20]
    self->encodeFrame.startSize = 0;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	61da      	str	r2, [r3, #28]
    self->encodeFrame.msgSize = 0;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	619a      	str	r2, [r3, #24]

    CS101_ASDU_encode(asdu, (Frame)&(self->encodeFrame));
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	3310      	adds	r3, #16
 800c134:	4619      	mov	r1, r3
 800c136:	6838      	ldr	r0, [r7, #0]
 800c138:	f7f8 f839 	bl	80041ae <CS101_ASDU_encode>

    int srcSize = self->encodeFrame.msgSize;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	60bb      	str	r3, [r7, #8]
    self->elements[nextIndex].size = srcSize;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	b2d8      	uxtb	r0, r3
 800c146:	6879      	ldr	r1, [r7, #4]
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	4613      	mov	r3, r2
 800c14c:	021b      	lsls	r3, r3, #8
 800c14e:	4413      	add	r3, r2
 800c150:	440b      	add	r3, r1
 800c152:	3324      	adds	r3, #36	; 0x24
 800c154:	4602      	mov	r2, r0
 800c156:	701a      	strb	r2, [r3, #0]

    DEBUG_PRINT("Events in FIFO: %i (first: %i, last: %i)\n", self->entryCounter,
            self->firstMsgIndex, self->lastMsgIndex);

    CS101_Queue_unlock(self);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff ff89 	bl	800c070 <CS101_Queue_unlock>
}
 800c15e:	bf00      	nop
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <CS101_Queue_dequeue>:
/*
 * NOTE: Locking has to be done by caller!
 */
Frame
CS101_Queue_dequeue(CS101_Queue self, Frame resultStorage)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6039      	str	r1, [r7, #0]
    Frame frame = NULL;
 800c170:	2300      	movs	r3, #0
 800c172:	60fb      	str	r3, [r7, #12]

    if (self->entryCounter != 0) {
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d02c      	beq.n	800c1d6 <CS101_Queue_dequeue+0x70>

        if (resultStorage) {
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d029      	beq.n	800c1d6 <CS101_Queue_dequeue+0x70>
            frame = resultStorage;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	60fb      	str	r3, [r7, #12]

            int currentIndex = self->firstMsgIndex;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	60bb      	str	r3, [r7, #8]

            Frame_appendBytes(frame, self->elements[currentIndex].buffer, self->elements[currentIndex].size);
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	4613      	mov	r3, r2
 800c190:	021b      	lsls	r3, r3, #8
 800c192:	4413      	add	r3, r2
 800c194:	3320      	adds	r3, #32
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	4413      	add	r3, r2
 800c19a:	1d58      	adds	r0, r3, #5
 800c19c:	6879      	ldr	r1, [r7, #4]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	021b      	lsls	r3, r3, #8
 800c1a4:	4413      	add	r3, r2
 800c1a6:	440b      	add	r3, r1
 800c1a8:	3324      	adds	r3, #36	; 0x24
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f000 f826 	bl	800c202 <Frame_appendBytes>

            self->firstMsgIndex = (currentIndex + 1) % self->size;
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	6812      	ldr	r2, [r2, #0]
 800c1be:	fb93 f1f2 	sdiv	r1, r3, r2
 800c1c2:	fb02 f201 	mul.w	r2, r2, r1
 800c1c6:	1a9a      	subs	r2, r3, r2
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	60da      	str	r2, [r3, #12]
            self->entryCounter--;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	1e5a      	subs	r2, r3, #1
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	605a      	str	r2, [r3, #4]
        }
    }

    return frame;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <Frame_setNextByte>:
    self->virtualFunctionTable->resetFrame(self);
}

void
Frame_setNextByte(Frame self, uint8_t byte)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	70fb      	strb	r3, [r7, #3]
    self->virtualFunctionTable->setNextByte(self, byte);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	78fa      	ldrb	r2, [r7, #3]
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	4798      	blx	r3
}
 800c1fa:	bf00      	nop
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <Frame_appendBytes>:

void
Frame_appendBytes(Frame self, uint8_t* bytes, int numberOfBytes)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	60f8      	str	r0, [r7, #12]
 800c20a:	60b9      	str	r1, [r7, #8]
 800c20c:	607a      	str	r2, [r7, #4]
    self->virtualFunctionTable->appendBytes(self, bytes, numberOfBytes);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	4798      	blx	r3
}
 800c21c:	bf00      	nop
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <Frame_getSpaceLeft>:
}


int
Frame_getSpaceLeft(Frame self)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
    return self->virtualFunctionTable->getSpaceLeft(self);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	4798      	blx	r3
 800c236:	4603      	mov	r3, r0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <BufferFrame_initialize>:
        BufferFrame_getSpaceLeft
};

Frame
BufferFrame_initialize(BufferFrame self, uint8_t* buffer, int startSize)
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
    self->virtualFunctionTable = &bufferFrameVFT;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4a0a      	ldr	r2, [pc, #40]	; (800c278 <BufferFrame_initialize+0x38>)
 800c250:	601a      	str	r2, [r3, #0]
    self->buffer = buffer;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	605a      	str	r2, [r3, #4]

    self->startSize = startSize;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	60da      	str	r2, [r3, #12]
    self->msgSize = startSize;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	609a      	str	r2, [r3, #8]
    self->isUsed = false;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	741a      	strb	r2, [r3, #16]

    return (Frame) self;
 800c26a:	68fb      	ldr	r3, [r7, #12]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3714      	adds	r7, #20
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	20000370 	.word	0x20000370

0800c27c <BufferFrame_destroy>:

void
BufferFrame_destroy(Frame super)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
    BufferFrame self = (BufferFrame) super;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	60fb      	str	r3, [r7, #12]

    self->isUsed = false;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	741a      	strb	r2, [r3, #16]
}
 800c28e:	bf00      	nop
 800c290:	3714      	adds	r7, #20
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <BufferFrame_resetFrame>:

void
BufferFrame_resetFrame(Frame super)
{
 800c29a:	b480      	push	{r7}
 800c29c:	b085      	sub	sp, #20
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
    BufferFrame self = (BufferFrame) super;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	60fb      	str	r3, [r7, #12]

    self->msgSize = self->startSize;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	68da      	ldr	r2, [r3, #12]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	609a      	str	r2, [r3, #8]
}
 800c2ae:	bf00      	nop
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <BufferFrame_setNextByte>:

void
BufferFrame_setNextByte(Frame super, uint8_t byte)
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b085      	sub	sp, #20
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	70fb      	strb	r3, [r7, #3]
    BufferFrame self = (BufferFrame) super;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	60fb      	str	r3, [r7, #12]

    self->buffer[self->msgSize++] = byte;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	1c58      	adds	r0, r3, #1
 800c2d4:	68f9      	ldr	r1, [r7, #12]
 800c2d6:	6088      	str	r0, [r1, #8]
 800c2d8:	4413      	add	r3, r2
 800c2da:	78fa      	ldrb	r2, [r7, #3]
 800c2dc:	701a      	strb	r2, [r3, #0]
}
 800c2de:	bf00      	nop
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <BufferFrame_appendBytes>:

void
BufferFrame_appendBytes(Frame super, uint8_t* bytes, int numberOfBytes)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b089      	sub	sp, #36	; 0x24
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
    BufferFrame self = (BufferFrame) super;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	61bb      	str	r3, [r7, #24]

    int i;

    uint8_t* target = self->buffer + self->msgSize;
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	69ba      	ldr	r2, [r7, #24]
 800c300:	6892      	ldr	r2, [r2, #8]
 800c302:	4413      	add	r3, r2
 800c304:	617b      	str	r3, [r7, #20]

    for (i = 0; i < numberOfBytes; i++)
 800c306:	2300      	movs	r3, #0
 800c308:	61fb      	str	r3, [r7, #28]
 800c30a:	e00a      	b.n	800c322 <BufferFrame_appendBytes+0x38>
        target[i] = bytes[i];
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	441a      	add	r2, r3
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	6979      	ldr	r1, [r7, #20]
 800c316:	440b      	add	r3, r1
 800c318:	7812      	ldrb	r2, [r2, #0]
 800c31a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfBytes; i++)
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	3301      	adds	r3, #1
 800c320:	61fb      	str	r3, [r7, #28]
 800c322:	69fa      	ldr	r2, [r7, #28]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	dbf0      	blt.n	800c30c <BufferFrame_appendBytes+0x22>

    self->msgSize += numberOfBytes;
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	689a      	ldr	r2, [r3, #8]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	441a      	add	r2, r3
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	609a      	str	r2, [r3, #8]
}
 800c336:	bf00      	nop
 800c338:	3724      	adds	r7, #36	; 0x24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr

0800c342 <BufferFrame_getMsgSize>:

int
BufferFrame_getMsgSize(Frame super)
{
 800c342:	b480      	push	{r7}
 800c344:	b085      	sub	sp, #20
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
    BufferFrame self = (BufferFrame) super;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	60fb      	str	r3, [r7, #12]

    return self->msgSize;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	689b      	ldr	r3, [r3, #8]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <BufferFrame_getBuffer>:

uint8_t*
BufferFrame_getBuffer(Frame super)
{
 800c35e:	b480      	push	{r7}
 800c360:	b085      	sub	sp, #20
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
    BufferFrame self = (BufferFrame) super;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	60fb      	str	r3, [r7, #12]

    return self->buffer;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	685b      	ldr	r3, [r3, #4]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <BufferFrame_getSpaceLeft>:

int
BufferFrame_getSpaceLeft(Frame super)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
    BufferFrame self = (BufferFrame) super;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	60fb      	str	r3, [r7, #12]

    return ((self->startSize) - self->msgSize);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	1ad3      	subs	r3, r2, r3
}
 800c390:	4618      	mov	r0, r3
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <LinkLayer_init>:
    struct sLinkLayer _linkLayer;
};

LinkLayer
LinkLayer_init(LinkLayer self, int address, SerialTransceiverFT12 transceiver, LinkLayerParameters linkLayerParameters)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
    if (self == NULL)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d104      	bne.n	800c3ba <LinkLayer_init+0x1e>
        self = (LinkLayer) GLOBAL_MALLOC(sizeof(struct sLinkLayer));
 800c3b0:	f44f 7009 	mov.w	r0, #548	; 0x224
 800c3b4:	f7f7 fd66 	bl	8003e84 <Memory_malloc>
 800c3b8:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d01f      	beq.n	800c400 <LinkLayer_init+0x64>
        self->address = address;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        self->transceiver = transceiver;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        self->linkLayerParameters = linkLayerParameters;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

        self->dir = false;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

        self->llSecUnbalanced = NULL;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        self->llSecBalanced = NULL;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        self->llPriBalanced = NULL;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        self->llPriUnbalanced = NULL;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    }

    return self;
 800c400:	68fb      	ldr	r3, [r7, #12]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <LinkLayer_getBroadcastAddress>:
    self->address = address;
}

static int
LinkLayer_getBroadcastAddress(LinkLayer self)
{
 800c40a:	b480      	push	{r7}
 800c40c:	b083      	sub	sp, #12
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
    if (self->linkLayerParameters->addressLength == 1) {
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d101      	bne.n	800c422 <LinkLayer_getBroadcastAddress+0x18>
        return 255;
 800c41e:	23ff      	movs	r3, #255	; 0xff
 800c420:	e009      	b.n	800c436 <LinkLayer_getBroadcastAddress+0x2c>
    } else if (self->linkLayerParameters->addressLength == 2) {
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d102      	bne.n	800c434 <LinkLayer_getBroadcastAddress+0x2a>
        return 65535;
 800c42e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c432:	e000      	b.n	800c436 <LinkLayer_getBroadcastAddress+0x2c>
    }

    return 0;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <LinkLayerSecondaryBalanced_init>:
    void* appLayerParam;
};

static void
LinkLayerSecondaryBalanced_init(LinkLayerSecondaryBalanced self, LinkLayer linkLayer, IBalancedApplicationLayer applicationLayer, void* appLayerParam)
{
 800c442:	b480      	push	{r7}
 800c444:	b085      	sub	sp, #20
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	603b      	str	r3, [r7, #0]
    self->expectedFcb = true;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2201      	movs	r2, #1
 800c454:	701a      	strb	r2, [r3, #0]
    self->linkLayer = linkLayer;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	605a      	str	r2, [r3, #4]
    self->applicationLayer = applicationLayer;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	609a      	str	r2, [r3, #8]
    self->appLayerParam = appLayerParam;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	60da      	str	r2, [r3, #12]
}
 800c468:	bf00      	nop
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <LinkLayerPrimaryBalanced_init>:
    LinkLayer linkLayer;
};

static void
LinkLayerPrimaryBalanced_init(LinkLayerPrimaryBalanced self, LinkLayer linkLayer, IBalancedApplicationLayer applicationLayer, void* appLayerParam)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	603b      	str	r3, [r7, #0]
    self->primaryState = PLL_IDLE;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	705a      	strb	r2, [r3, #1]
    self->state = LL_STATE_IDLE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	701a      	strb	r2, [r3, #0]

    self->waitingForResponse = false;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	709a      	strb	r2, [r3, #2]
    self->sendLinkLayerTestFunction = false;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	761a      	strb	r2, [r3, #24]
    self->nextFcb = true;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2201      	movs	r2, #1
 800c49e:	765a      	strb	r2, [r3, #25]

    self->linkLayer = linkLayer;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	655a      	str	r2, [r3, #84]	; 0x54

    self->applicationLayer = applicationLayer;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	635a      	str	r2, [r3, #52]	; 0x34
    self->applicationLayerParam = appLayerParam;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	639a      	str	r2, [r3, #56]	; 0x38

    self->stateChangedHandler = NULL;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	64da      	str	r2, [r3, #76]	; 0x4c

    self->idleTimeout = 5000;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4be:	649a      	str	r2, [r3, #72]	; 0x48

    self->otherStationAddress = 0;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	61da      	str	r2, [r3, #28]
}
 800c4c6:	bf00      	nop
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <LinkLayerBalanced_create>:
        SerialTransceiverFT12 transceiver,
        LinkLayerParameters linkLayerParameters,
        IBalancedApplicationLayer applicationLayer,
        void* applicationLayerParameter
        )
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	60f8      	str	r0, [r7, #12]
 800c4da:	60b9      	str	r1, [r7, #8]
 800c4dc:	607a      	str	r2, [r7, #4]
 800c4de:	603b      	str	r3, [r7, #0]
    LinkLayerBalanced self = (LinkLayerBalanced) GLOBAL_MALLOC(sizeof(struct sLinkLayerBalanced));
 800c4e0:	f44f 7026 	mov.w	r0, #664	; 0x298
 800c4e4:	f7f7 fcce 	bl	8003e84 <Memory_malloc>
 800c4e8:	6178      	str	r0, [r7, #20]

    if (self) {
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d030      	beq.n	800c552 <LinkLayerBalanced_create+0x80>
        self->linkLayer = LinkLayer_init(&(self->_linkLayer), linkLayerAddress, transceiver, linkLayerParameters);
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	f103 000c 	add.w	r0, r3, #12
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	68f9      	ldr	r1, [r7, #12]
 800c4fc:	f7ff ff4e 	bl	800c39c <LinkLayer_init>
 800c500:	4602      	mov	r2, r0
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	601a      	str	r2, [r3, #0]
        self->applicationLayer = applicationLayer;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	605a      	str	r2, [r3, #4]
        self->appLayerParameter = applicationLayerParameter;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	6a3a      	ldr	r2, [r7, #32]
 800c510:	609a      	str	r2, [r3, #8]

        LinkLayerPrimaryBalanced_init(&(self->primaryLinkLayer), self->linkLayer, applicationLayer, applicationLayerParameter);
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f503 700c 	add.w	r0, r3, #560	; 0x230
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	6819      	ldr	r1, [r3, #0]
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	f7ff ffa8 	bl	800c474 <LinkLayerPrimaryBalanced_init>
        LinkLayerSecondaryBalanced_init(&(self->secondaryLinkLayer), self->linkLayer, applicationLayer, applicationLayerParameter);
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	f503 7022 	add.w	r0, r3, #648	; 0x288
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	6819      	ldr	r1, [r3, #0]
 800c52e:	6a3b      	ldr	r3, [r7, #32]
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	f7ff ff86 	bl	800c442 <LinkLayerSecondaryBalanced_init>

        self->linkLayer->llPriBalanced = &(self->primaryLinkLayer);
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	f502 720c 	add.w	r2, r2, #560	; 0x230
 800c540:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        self->linkLayer->llSecBalanced = &(self->secondaryLinkLayer);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	f502 7222 	add.w	r2, r2, #648	; 0x288
 800c54e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    }

    return self;
 800c552:	697b      	ldr	r3, [r7, #20]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3718      	adds	r7, #24
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <LinkLayerBalanced_setStateChangeHandler>:
}

void
LinkLayerBalanced_setStateChangeHandler(LinkLayerBalanced self,
        IEC60870_LinkLayerStateChangedHandler handler, void* parameter)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	607a      	str	r2, [r7, #4]
    self->primaryLinkLayer.stateChangedHandler = handler;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    self->primaryLinkLayer.stateChangedHandlerParameter = parameter;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
}
 800c578:	bf00      	nop
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <LinkLayerBalanced_setDIR>:
}


void
LinkLayerBalanced_setDIR(LinkLayerBalanced self, bool dir)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
    self->linkLayer->dir = dir;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	78fa      	ldrb	r2, [r7, #3]
 800c596:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
}
 800c59a:	bf00      	nop
 800c59c:	370c      	adds	r7, #12
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <LinkLayerBalanced_setAddress>:

void
LinkLayerBalanced_setAddress(LinkLayerBalanced self, int address)
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b083      	sub	sp, #12
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	6039      	str	r1, [r7, #0]
    self->linkLayer->address = address;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800c5ba:	bf00      	nop
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <LinkLayerBalanced_setOtherStationAddress>:

void
LinkLayerBalanced_setOtherStationAddress(LinkLayerBalanced self, int address)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
    self->primaryLinkLayer.otherStationAddress = address;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <LinkLayerPrimaryUnbalanced_create>:


LinkLayerPrimaryUnbalanced
LinkLayerPrimaryUnbalanced_create(SerialTransceiverFT12 transceiver, LinkLayerParameters linkLayerParameters,
        IPrimaryApplicationLayer applicationLayer, void* applicationLayerParam)
{
 800c5e4:	b590      	push	{r4, r7, lr}
 800c5e6:	b087      	sub	sp, #28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
 800c5f0:	603b      	str	r3, [r7, #0]
    LinkLayerPrimaryUnbalanced self = (LinkLayerPrimaryUnbalanced) GLOBAL_MALLOC(sizeof(struct sLinkLayerPrimaryUnbalanced));
 800c5f2:	f44f 705b 	mov.w	r0, #876	; 0x36c
 800c5f6:	f7f7 fc45 	bl	8003e84 <Memory_malloc>
 800c5fa:	6178      	str	r0, [r7, #20]

    if (self) {
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d041      	beq.n	800c686 <LinkLayerPrimaryUnbalanced_create+0xa2>

        self->currentSlave = NULL;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2200      	movs	r2, #0
 800c606:	601a      	str	r2, [r3, #0]
        self->currentSlaveIndex = 0;
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	2200      	movs	r2, #0
 800c60c:	605a      	str	r2, [r3, #4]

        self->hasNextBroadcastToSend = false;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2200      	movs	r2, #0
 800c612:	721a      	strb	r2, [r3, #8]

        self->applicationLayer = applicationLayer;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        self->applicationLayerParam = applicationLayerParam;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

        self->linkLayerParameters = *linkLayerParameters;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	f503 7454 	add.w	r4, r3, #848	; 0x350
 800c62c:	4613      	mov	r3, r2
 800c62e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        self->linkLayer = &(self->_linkLayer);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c

        LinkLayer_init(self->linkLayer, 0, transceiver, &(self->linkLayerParameters));
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f8d3 034c 	ldr.w	r0, [r3, #844]	; 0x34c
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	2100      	movs	r1, #0
 800c650:	f7ff fea4 	bl	800c39c <LinkLayer_init>

        self->linkLayer->llPriUnbalanced = self;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 800c65a:	697a      	ldr	r2, [r7, #20]
 800c65c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

        BufferFrame_initialize(&(self->nextBroadcastMessage), self->buffer, 0);
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f103 000c 	add.w	r0, r3, #12
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	3320      	adds	r3, #32
 800c66a:	2200      	movs	r2, #0
 800c66c:	4619      	mov	r1, r3
 800c66e:	f7ff fde7 	bl	800c240 <BufferFrame_initialize>

        self->slaveConnections = LinkedList_create();
 800c672:	f7f7 fbcb 	bl	8003e0c <LinkedList_create>
 800c676:	4602      	mov	r2, r0
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360

        self->stateChangedHandler = NULL;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2200      	movs	r2, #0
 800c682:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
    }

    return self;
 800c686:	697b      	ldr	r3, [r7, #20]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	371c      	adds	r7, #28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd90      	pop	{r4, r7, pc}

0800c690 <LinkLayerPrimaryUnbalanced_setStateChangeHandler>:

void
LinkLayerPrimaryUnbalanced_setStateChangeHandler(LinkLayerPrimaryUnbalanced self,
        IEC60870_LinkLayerStateChangedHandler handler, void* parameter)
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
    self->stateChangedHandler = handler;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
    self->stateChangedHandlerParameter = parameter;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
}
 800c6ac:	bf00      	nop
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <LinkLayerPrimaryUnbalanced_getSlaveConnection>:



static LinkLayerSlaveConnection
LinkLayerPrimaryUnbalanced_getSlaveConnection(LinkLayerPrimaryUnbalanced self, int slaveAddress)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b086      	sub	sp, #24
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
    LinkLayerSlaveConnection retVal = NULL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	617b      	str	r3, [r7, #20]

    LinkedList element = LinkedList_getNext(self->slaveConnections);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7f7 fbaf 	bl	8003e30 <LinkedList_getNext>
 800c6d2:	6138      	str	r0, [r7, #16]

    while (element) {
 800c6d4:	e00f      	b.n	800c6f6 <LinkLayerPrimaryUnbalanced_getSlaveConnection+0x3e>

        LinkLayerSlaveConnection slaveConnection = (LinkLayerSlaveConnection) LinkedList_getData(element);
 800c6d6:	6938      	ldr	r0, [r7, #16]
 800c6d8:	f7f7 fbb6 	bl	8003e48 <LinkedList_getData>
 800c6dc:	60f8      	str	r0, [r7, #12]

        if (slaveConnection->address == slaveAddress) {
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d102      	bne.n	800c6ee <LinkLayerPrimaryUnbalanced_getSlaveConnection+0x36>
            retVal = slaveConnection;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	617b      	str	r3, [r7, #20]
            break;
 800c6ec:	e006      	b.n	800c6fc <LinkLayerPrimaryUnbalanced_getSlaveConnection+0x44>
        }

        element = LinkedList_getNext(element);
 800c6ee:	6938      	ldr	r0, [r7, #16]
 800c6f0:	f7f7 fb9e 	bl	8003e30 <LinkedList_getNext>
 800c6f4:	6138      	str	r0, [r7, #16]
    while (element) {
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1ec      	bne.n	800c6d6 <LinkLayerPrimaryUnbalanced_getSlaveConnection+0x1e>
    }

    return retVal;
 800c6fc:	697b      	ldr	r3, [r7, #20]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <LinkLayerPrimaryUnbalanced_requestClass1Data>:
        slave->sendLinkLayerTestFunction = true;
}

bool
LinkLayerPrimaryUnbalanced_requestClass1Data(LinkLayerPrimaryUnbalanced self, int slaveAddress)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
    LinkLayerSlaveConnection slave = LinkLayerPrimaryUnbalanced_getSlaveConnection(self, slaveAddress);
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7ff ffd0 	bl	800c6b8 <LinkLayerPrimaryUnbalanced_getSlaveConnection>
 800c718:	60f8      	str	r0, [r7, #12]

    if (slave) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <LinkLayerPrimaryUnbalanced_requestClass1Data+0x26>
        slave->requestClass1Data = true;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
        return true;
 800c728:	2301      	movs	r3, #1
 800c72a:	e000      	b.n	800c72e <LinkLayerPrimaryUnbalanced_requestClass1Data+0x28>
    }

    return false;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <LinkLayerPrimaryUnbalanced_sendConfirmed>:
    return false;
}

bool
LinkLayerPrimaryUnbalanced_sendConfirmed(LinkLayerPrimaryUnbalanced self, int slaveAddress, BufferFrame message)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b086      	sub	sp, #24
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	60f8      	str	r0, [r7, #12]
 800c73e:	60b9      	str	r1, [r7, #8]
 800c740:	607a      	str	r2, [r7, #4]
    LinkLayerSlaveConnection slave = LinkLayerPrimaryUnbalanced_getSlaveConnection(self, slaveAddress);
 800c742:	68b9      	ldr	r1, [r7, #8]
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f7ff ffb7 	bl	800c6b8 <LinkLayerPrimaryUnbalanced_getSlaveConnection>
 800c74a:	6178      	str	r0, [r7, #20]

    if (slave) {
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d01c      	beq.n	800c78c <LinkLayerPrimaryUnbalanced_sendConfirmed+0x56>

        if (slave->hasMessageToSend == false) {
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	7b5b      	ldrb	r3, [r3, #13]
 800c756:	f083 0301 	eor.w	r3, r3, #1
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d015      	beq.n	800c78c <LinkLayerPrimaryUnbalanced_sendConfirmed+0x56>

            slave->nextMessage.msgSize = message->msgSize;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	689a      	ldr	r2, [r3, #8]
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	619a      	str	r2, [r3, #24]
            slave->nextMessage.startSize = message->startSize;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	68da      	ldr	r2, [r3, #12]
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	61da      	str	r2, [r3, #28]
            memcpy(slave->nextMessage.buffer, message->buffer, message->msgSize);
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	6958      	ldr	r0, [r3, #20]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6859      	ldr	r1, [r3, #4]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	461a      	mov	r2, r3
 800c77e:	f000 f8cd 	bl	800c91c <memcpy>

            slave->hasMessageToSend = true;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	2201      	movs	r2, #1
 800c786:	735a      	strb	r2, [r3, #13]
            return true;
 800c788:	2301      	movs	r3, #1
 800c78a:	e000      	b.n	800c78e <LinkLayerPrimaryUnbalanced_sendConfirmed+0x58>
        }
    }

    return false;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <LinkLayerPrimaryUnbalanced_sendNoReply>:

bool
LinkLayerPrimaryUnbalanced_sendNoReply(LinkLayerPrimaryUnbalanced self, int slaveAddress, BufferFrame message)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b086      	sub	sp, #24
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
    if (slaveAddress == LinkLayer_getBroadcastAddress(self->linkLayer)) {
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff fe2e 	bl	800c40a <LinkLayer_getBroadcastAddress>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d11b      	bne.n	800c7ee <LinkLayerPrimaryUnbalanced_sendNoReply+0x58>
        if (self->hasNextBroadcastToSend)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	7a1b      	ldrb	r3, [r3, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <LinkLayerPrimaryUnbalanced_sendNoReply+0x2c>
            return false;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	e03b      	b.n	800c83a <LinkLayerPrimaryUnbalanced_sendNoReply+0xa4>
        else {

            self->nextBroadcastMessage.msgSize = message->msgSize;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	689a      	ldr	r2, [r3, #8]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	615a      	str	r2, [r3, #20]
            self->nextBroadcastMessage.startSize = message->startSize;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68da      	ldr	r2, [r3, #12]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	619a      	str	r2, [r3, #24]
            memcpy(self->nextBroadcastMessage.buffer, message->buffer, message->msgSize);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6918      	ldr	r0, [r3, #16]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6859      	ldr	r1, [r3, #4]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	f000 f89c 	bl	800c91c <memcpy>

            self->hasNextBroadcastToSend = true;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	721a      	strb	r2, [r3, #8]
            return true;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e025      	b.n	800c83a <LinkLayerPrimaryUnbalanced_sendNoReply+0xa4>
        }
    }
    else {
        LinkLayerSlaveConnection slave = LinkLayerPrimaryUnbalanced_getSlaveConnection(self, slaveAddress);
 800c7ee:	68b9      	ldr	r1, [r7, #8]
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f7ff ff61 	bl	800c6b8 <LinkLayerPrimaryUnbalanced_getSlaveConnection>
 800c7f6:	6178      	str	r0, [r7, #20]

        if (slave) {
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d01c      	beq.n	800c838 <LinkLayerPrimaryUnbalanced_sendNoReply+0xa2>
            if (slave->hasMessageToSend == false) {
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	7b5b      	ldrb	r3, [r3, #13]
 800c802:	f083 0301 	eor.w	r3, r3, #1
 800c806:	b2db      	uxtb	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d015      	beq.n	800c838 <LinkLayerPrimaryUnbalanced_sendNoReply+0xa2>

                slave->nextMessage.msgSize = message->msgSize;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	689a      	ldr	r2, [r3, #8]
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	619a      	str	r2, [r3, #24]
                slave->nextMessage.startSize = message->startSize;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68da      	ldr	r2, [r3, #12]
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	61da      	str	r2, [r3, #28]
                memcpy(slave->nextMessage.buffer, message->buffer, message->msgSize);
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	6958      	ldr	r0, [r3, #20]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6859      	ldr	r1, [r3, #4]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	461a      	mov	r2, r3
 800c82a:	f000 f877 	bl	800c91c <memcpy>

                slave->hasMessageToSend = true;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2201      	movs	r2, #1
 800c832:	735a      	strb	r2, [r3, #13]
                return true;
 800c834:	2301      	movs	r3, #1
 800c836:	e000      	b.n	800c83a <LinkLayerPrimaryUnbalanced_sendNoReply+0xa4>
            }
        }
    }

    return false;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <SerialTransceiverFT12_create>:
    void* rawMessageHandlerParameter;
};

SerialTransceiverFT12
SerialTransceiverFT12_create(SerialPort serialPort, LinkLayerParameters linkLayerParameters)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
    SerialTransceiverFT12 self = (SerialTransceiverFT12) GLOBAL_MALLOC(sizeof(struct sSerialTransceiverFT12));
 800c84c:	2018      	movs	r0, #24
 800c84e:	f7f7 fb19 	bl	8003e84 <Memory_malloc>
 800c852:	60f8      	str	r0, [r7, #12]

    if (self != NULL) {
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00f      	beq.n	800c87a <SerialTransceiverFT12_create+0x38>
        self->messageTimeout = 10;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	220a      	movs	r2, #10
 800c85e:	601a      	str	r2, [r3, #0]
        self->characterTimeout = 300;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c866:	605a      	str	r2, [r3, #4]
        self->linkLayerParameters = linkLayerParameters;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	609a      	str	r2, [r3, #8]
        self->serialPort = serialPort;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	60da      	str	r2, [r3, #12]
        self->rawMessageHandler = NULL;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	611a      	str	r2, [r3, #16]
    }

    return self;
 800c87a:	68fb      	ldr	r3, [r7, #12]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <SerialTransceiverFT12_setRawMessageHandler>:
    self->characterTimeout = characterTimeout;
}

void
SerialTransceiverFT12_setRawMessageHandler(SerialTransceiverFT12 self, IEC60870_RawMessageHandler handler, void* parameter)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
    self->rawMessageHandler = handler;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	611a      	str	r2, [r3, #16]
    self->rawMessageHandlerParameter = parameter;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	615a      	str	r2, [r3, #20]
}
 800c89c:	bf00      	nop
 800c89e:	3714      	adds	r7, #20
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <__errno>:
 800c8a8:	4b01      	ldr	r3, [pc, #4]	; (800c8b0 <__errno+0x8>)
 800c8aa:	6818      	ldr	r0, [r3, #0]
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	2000038c 	.word	0x2000038c

0800c8b4 <__libc_init_array>:
 800c8b4:	b570      	push	{r4, r5, r6, lr}
 800c8b6:	4d0d      	ldr	r5, [pc, #52]	; (800c8ec <__libc_init_array+0x38>)
 800c8b8:	4c0d      	ldr	r4, [pc, #52]	; (800c8f0 <__libc_init_array+0x3c>)
 800c8ba:	1b64      	subs	r4, r4, r5
 800c8bc:	10a4      	asrs	r4, r4, #2
 800c8be:	2600      	movs	r6, #0
 800c8c0:	42a6      	cmp	r6, r4
 800c8c2:	d109      	bne.n	800c8d8 <__libc_init_array+0x24>
 800c8c4:	4d0b      	ldr	r5, [pc, #44]	; (800c8f4 <__libc_init_array+0x40>)
 800c8c6:	4c0c      	ldr	r4, [pc, #48]	; (800c8f8 <__libc_init_array+0x44>)
 800c8c8:	f002 ffa8 	bl	800f81c <_init>
 800c8cc:	1b64      	subs	r4, r4, r5
 800c8ce:	10a4      	asrs	r4, r4, #2
 800c8d0:	2600      	movs	r6, #0
 800c8d2:	42a6      	cmp	r6, r4
 800c8d4:	d105      	bne.n	800c8e2 <__libc_init_array+0x2e>
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}
 800c8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8dc:	4798      	blx	r3
 800c8de:	3601      	adds	r6, #1
 800c8e0:	e7ee      	b.n	800c8c0 <__libc_init_array+0xc>
 800c8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8e6:	4798      	blx	r3
 800c8e8:	3601      	adds	r6, #1
 800c8ea:	e7f2      	b.n	800c8d2 <__libc_init_array+0x1e>
 800c8ec:	080104fc 	.word	0x080104fc
 800c8f0:	080104fc 	.word	0x080104fc
 800c8f4:	080104fc 	.word	0x080104fc
 800c8f8:	08010500 	.word	0x08010500

0800c8fc <malloc>:
 800c8fc:	4b02      	ldr	r3, [pc, #8]	; (800c908 <malloc+0xc>)
 800c8fe:	4601      	mov	r1, r0
 800c900:	6818      	ldr	r0, [r3, #0]
 800c902:	f000 b881 	b.w	800ca08 <_malloc_r>
 800c906:	bf00      	nop
 800c908:	2000038c 	.word	0x2000038c

0800c90c <free>:
 800c90c:	4b02      	ldr	r3, [pc, #8]	; (800c918 <free+0xc>)
 800c90e:	4601      	mov	r1, r0
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	f000 b829 	b.w	800c968 <_free_r>
 800c916:	bf00      	nop
 800c918:	2000038c 	.word	0x2000038c

0800c91c <memcpy>:
 800c91c:	440a      	add	r2, r1
 800c91e:	4291      	cmp	r1, r2
 800c920:	f100 33ff 	add.w	r3, r0, #4294967295
 800c924:	d100      	bne.n	800c928 <memcpy+0xc>
 800c926:	4770      	bx	lr
 800c928:	b510      	push	{r4, lr}
 800c92a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c92e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c932:	4291      	cmp	r1, r2
 800c934:	d1f9      	bne.n	800c92a <memcpy+0xe>
 800c936:	bd10      	pop	{r4, pc}

0800c938 <memset>:
 800c938:	4402      	add	r2, r0
 800c93a:	4603      	mov	r3, r0
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d100      	bne.n	800c942 <memset+0xa>
 800c940:	4770      	bx	lr
 800c942:	f803 1b01 	strb.w	r1, [r3], #1
 800c946:	e7f9      	b.n	800c93c <memset+0x4>

0800c948 <_calloc_r>:
 800c948:	b513      	push	{r0, r1, r4, lr}
 800c94a:	434a      	muls	r2, r1
 800c94c:	4611      	mov	r1, r2
 800c94e:	9201      	str	r2, [sp, #4]
 800c950:	f000 f85a 	bl	800ca08 <_malloc_r>
 800c954:	4604      	mov	r4, r0
 800c956:	b118      	cbz	r0, 800c960 <_calloc_r+0x18>
 800c958:	9a01      	ldr	r2, [sp, #4]
 800c95a:	2100      	movs	r1, #0
 800c95c:	f7ff ffec 	bl	800c938 <memset>
 800c960:	4620      	mov	r0, r4
 800c962:	b002      	add	sp, #8
 800c964:	bd10      	pop	{r4, pc}
	...

0800c968 <_free_r>:
 800c968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c96a:	2900      	cmp	r1, #0
 800c96c:	d048      	beq.n	800ca00 <_free_r+0x98>
 800c96e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c972:	9001      	str	r0, [sp, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	f1a1 0404 	sub.w	r4, r1, #4
 800c97a:	bfb8      	it	lt
 800c97c:	18e4      	addlt	r4, r4, r3
 800c97e:	f001 ff37 	bl	800e7f0 <__malloc_lock>
 800c982:	4a20      	ldr	r2, [pc, #128]	; (800ca04 <_free_r+0x9c>)
 800c984:	9801      	ldr	r0, [sp, #4]
 800c986:	6813      	ldr	r3, [r2, #0]
 800c988:	4615      	mov	r5, r2
 800c98a:	b933      	cbnz	r3, 800c99a <_free_r+0x32>
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	6014      	str	r4, [r2, #0]
 800c990:	b003      	add	sp, #12
 800c992:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c996:	f001 bf31 	b.w	800e7fc <__malloc_unlock>
 800c99a:	42a3      	cmp	r3, r4
 800c99c:	d90b      	bls.n	800c9b6 <_free_r+0x4e>
 800c99e:	6821      	ldr	r1, [r4, #0]
 800c9a0:	1862      	adds	r2, r4, r1
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	bf04      	itt	eq
 800c9a6:	681a      	ldreq	r2, [r3, #0]
 800c9a8:	685b      	ldreq	r3, [r3, #4]
 800c9aa:	6063      	str	r3, [r4, #4]
 800c9ac:	bf04      	itt	eq
 800c9ae:	1852      	addeq	r2, r2, r1
 800c9b0:	6022      	streq	r2, [r4, #0]
 800c9b2:	602c      	str	r4, [r5, #0]
 800c9b4:	e7ec      	b.n	800c990 <_free_r+0x28>
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	b10b      	cbz	r3, 800c9c0 <_free_r+0x58>
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	d9fa      	bls.n	800c9b6 <_free_r+0x4e>
 800c9c0:	6811      	ldr	r1, [r2, #0]
 800c9c2:	1855      	adds	r5, r2, r1
 800c9c4:	42a5      	cmp	r5, r4
 800c9c6:	d10b      	bne.n	800c9e0 <_free_r+0x78>
 800c9c8:	6824      	ldr	r4, [r4, #0]
 800c9ca:	4421      	add	r1, r4
 800c9cc:	1854      	adds	r4, r2, r1
 800c9ce:	42a3      	cmp	r3, r4
 800c9d0:	6011      	str	r1, [r2, #0]
 800c9d2:	d1dd      	bne.n	800c990 <_free_r+0x28>
 800c9d4:	681c      	ldr	r4, [r3, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	6053      	str	r3, [r2, #4]
 800c9da:	4421      	add	r1, r4
 800c9dc:	6011      	str	r1, [r2, #0]
 800c9de:	e7d7      	b.n	800c990 <_free_r+0x28>
 800c9e0:	d902      	bls.n	800c9e8 <_free_r+0x80>
 800c9e2:	230c      	movs	r3, #12
 800c9e4:	6003      	str	r3, [r0, #0]
 800c9e6:	e7d3      	b.n	800c990 <_free_r+0x28>
 800c9e8:	6825      	ldr	r5, [r4, #0]
 800c9ea:	1961      	adds	r1, r4, r5
 800c9ec:	428b      	cmp	r3, r1
 800c9ee:	bf04      	itt	eq
 800c9f0:	6819      	ldreq	r1, [r3, #0]
 800c9f2:	685b      	ldreq	r3, [r3, #4]
 800c9f4:	6063      	str	r3, [r4, #4]
 800c9f6:	bf04      	itt	eq
 800c9f8:	1949      	addeq	r1, r1, r5
 800c9fa:	6021      	streq	r1, [r4, #0]
 800c9fc:	6054      	str	r4, [r2, #4]
 800c9fe:	e7c7      	b.n	800c990 <_free_r+0x28>
 800ca00:	b003      	add	sp, #12
 800ca02:	bd30      	pop	{r4, r5, pc}
 800ca04:	2000058c 	.word	0x2000058c

0800ca08 <_malloc_r>:
 800ca08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0a:	1ccd      	adds	r5, r1, #3
 800ca0c:	f025 0503 	bic.w	r5, r5, #3
 800ca10:	3508      	adds	r5, #8
 800ca12:	2d0c      	cmp	r5, #12
 800ca14:	bf38      	it	cc
 800ca16:	250c      	movcc	r5, #12
 800ca18:	2d00      	cmp	r5, #0
 800ca1a:	4606      	mov	r6, r0
 800ca1c:	db01      	blt.n	800ca22 <_malloc_r+0x1a>
 800ca1e:	42a9      	cmp	r1, r5
 800ca20:	d903      	bls.n	800ca2a <_malloc_r+0x22>
 800ca22:	230c      	movs	r3, #12
 800ca24:	6033      	str	r3, [r6, #0]
 800ca26:	2000      	movs	r0, #0
 800ca28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca2a:	f001 fee1 	bl	800e7f0 <__malloc_lock>
 800ca2e:	4921      	ldr	r1, [pc, #132]	; (800cab4 <_malloc_r+0xac>)
 800ca30:	680a      	ldr	r2, [r1, #0]
 800ca32:	4614      	mov	r4, r2
 800ca34:	b99c      	cbnz	r4, 800ca5e <_malloc_r+0x56>
 800ca36:	4f20      	ldr	r7, [pc, #128]	; (800cab8 <_malloc_r+0xb0>)
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	b923      	cbnz	r3, 800ca46 <_malloc_r+0x3e>
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f000 fd4a 	bl	800d4d8 <_sbrk_r>
 800ca44:	6038      	str	r0, [r7, #0]
 800ca46:	4629      	mov	r1, r5
 800ca48:	4630      	mov	r0, r6
 800ca4a:	f000 fd45 	bl	800d4d8 <_sbrk_r>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	d123      	bne.n	800ca9a <_malloc_r+0x92>
 800ca52:	230c      	movs	r3, #12
 800ca54:	6033      	str	r3, [r6, #0]
 800ca56:	4630      	mov	r0, r6
 800ca58:	f001 fed0 	bl	800e7fc <__malloc_unlock>
 800ca5c:	e7e3      	b.n	800ca26 <_malloc_r+0x1e>
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	1b5b      	subs	r3, r3, r5
 800ca62:	d417      	bmi.n	800ca94 <_malloc_r+0x8c>
 800ca64:	2b0b      	cmp	r3, #11
 800ca66:	d903      	bls.n	800ca70 <_malloc_r+0x68>
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	441c      	add	r4, r3
 800ca6c:	6025      	str	r5, [r4, #0]
 800ca6e:	e004      	b.n	800ca7a <_malloc_r+0x72>
 800ca70:	6863      	ldr	r3, [r4, #4]
 800ca72:	42a2      	cmp	r2, r4
 800ca74:	bf0c      	ite	eq
 800ca76:	600b      	streq	r3, [r1, #0]
 800ca78:	6053      	strne	r3, [r2, #4]
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f001 febe 	bl	800e7fc <__malloc_unlock>
 800ca80:	f104 000b 	add.w	r0, r4, #11
 800ca84:	1d23      	adds	r3, r4, #4
 800ca86:	f020 0007 	bic.w	r0, r0, #7
 800ca8a:	1ac2      	subs	r2, r0, r3
 800ca8c:	d0cc      	beq.n	800ca28 <_malloc_r+0x20>
 800ca8e:	1a1b      	subs	r3, r3, r0
 800ca90:	50a3      	str	r3, [r4, r2]
 800ca92:	e7c9      	b.n	800ca28 <_malloc_r+0x20>
 800ca94:	4622      	mov	r2, r4
 800ca96:	6864      	ldr	r4, [r4, #4]
 800ca98:	e7cc      	b.n	800ca34 <_malloc_r+0x2c>
 800ca9a:	1cc4      	adds	r4, r0, #3
 800ca9c:	f024 0403 	bic.w	r4, r4, #3
 800caa0:	42a0      	cmp	r0, r4
 800caa2:	d0e3      	beq.n	800ca6c <_malloc_r+0x64>
 800caa4:	1a21      	subs	r1, r4, r0
 800caa6:	4630      	mov	r0, r6
 800caa8:	f000 fd16 	bl	800d4d8 <_sbrk_r>
 800caac:	3001      	adds	r0, #1
 800caae:	d1dd      	bne.n	800ca6c <_malloc_r+0x64>
 800cab0:	e7cf      	b.n	800ca52 <_malloc_r+0x4a>
 800cab2:	bf00      	nop
 800cab4:	2000058c 	.word	0x2000058c
 800cab8:	20000590 	.word	0x20000590

0800cabc <__cvt>:
 800cabc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cac0:	ec55 4b10 	vmov	r4, r5, d0
 800cac4:	2d00      	cmp	r5, #0
 800cac6:	460e      	mov	r6, r1
 800cac8:	4619      	mov	r1, r3
 800caca:	462b      	mov	r3, r5
 800cacc:	bfbb      	ittet	lt
 800cace:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cad2:	461d      	movlt	r5, r3
 800cad4:	2300      	movge	r3, #0
 800cad6:	232d      	movlt	r3, #45	; 0x2d
 800cad8:	700b      	strb	r3, [r1, #0]
 800cada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cadc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cae0:	4691      	mov	r9, r2
 800cae2:	f023 0820 	bic.w	r8, r3, #32
 800cae6:	bfbc      	itt	lt
 800cae8:	4622      	movlt	r2, r4
 800caea:	4614      	movlt	r4, r2
 800caec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800caf0:	d005      	beq.n	800cafe <__cvt+0x42>
 800caf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800caf6:	d100      	bne.n	800cafa <__cvt+0x3e>
 800caf8:	3601      	adds	r6, #1
 800cafa:	2102      	movs	r1, #2
 800cafc:	e000      	b.n	800cb00 <__cvt+0x44>
 800cafe:	2103      	movs	r1, #3
 800cb00:	ab03      	add	r3, sp, #12
 800cb02:	9301      	str	r3, [sp, #4]
 800cb04:	ab02      	add	r3, sp, #8
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	ec45 4b10 	vmov	d0, r4, r5
 800cb0c:	4653      	mov	r3, sl
 800cb0e:	4632      	mov	r2, r6
 800cb10:	f000 fe5e 	bl	800d7d0 <_dtoa_r>
 800cb14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb18:	4607      	mov	r7, r0
 800cb1a:	d102      	bne.n	800cb22 <__cvt+0x66>
 800cb1c:	f019 0f01 	tst.w	r9, #1
 800cb20:	d022      	beq.n	800cb68 <__cvt+0xac>
 800cb22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb26:	eb07 0906 	add.w	r9, r7, r6
 800cb2a:	d110      	bne.n	800cb4e <__cvt+0x92>
 800cb2c:	783b      	ldrb	r3, [r7, #0]
 800cb2e:	2b30      	cmp	r3, #48	; 0x30
 800cb30:	d10a      	bne.n	800cb48 <__cvt+0x8c>
 800cb32:	2200      	movs	r2, #0
 800cb34:	2300      	movs	r3, #0
 800cb36:	4620      	mov	r0, r4
 800cb38:	4629      	mov	r1, r5
 800cb3a:	f7f3 ffcd 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb3e:	b918      	cbnz	r0, 800cb48 <__cvt+0x8c>
 800cb40:	f1c6 0601 	rsb	r6, r6, #1
 800cb44:	f8ca 6000 	str.w	r6, [sl]
 800cb48:	f8da 3000 	ldr.w	r3, [sl]
 800cb4c:	4499      	add	r9, r3
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2300      	movs	r3, #0
 800cb52:	4620      	mov	r0, r4
 800cb54:	4629      	mov	r1, r5
 800cb56:	f7f3 ffbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb5a:	b108      	cbz	r0, 800cb60 <__cvt+0xa4>
 800cb5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb60:	2230      	movs	r2, #48	; 0x30
 800cb62:	9b03      	ldr	r3, [sp, #12]
 800cb64:	454b      	cmp	r3, r9
 800cb66:	d307      	bcc.n	800cb78 <__cvt+0xbc>
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb6c:	1bdb      	subs	r3, r3, r7
 800cb6e:	4638      	mov	r0, r7
 800cb70:	6013      	str	r3, [r2, #0]
 800cb72:	b004      	add	sp, #16
 800cb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb78:	1c59      	adds	r1, r3, #1
 800cb7a:	9103      	str	r1, [sp, #12]
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	e7f0      	b.n	800cb62 <__cvt+0xa6>

0800cb80 <__exponent>:
 800cb80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb82:	4603      	mov	r3, r0
 800cb84:	2900      	cmp	r1, #0
 800cb86:	bfb8      	it	lt
 800cb88:	4249      	neglt	r1, r1
 800cb8a:	f803 2b02 	strb.w	r2, [r3], #2
 800cb8e:	bfb4      	ite	lt
 800cb90:	222d      	movlt	r2, #45	; 0x2d
 800cb92:	222b      	movge	r2, #43	; 0x2b
 800cb94:	2909      	cmp	r1, #9
 800cb96:	7042      	strb	r2, [r0, #1]
 800cb98:	dd2a      	ble.n	800cbf0 <__exponent+0x70>
 800cb9a:	f10d 0407 	add.w	r4, sp, #7
 800cb9e:	46a4      	mov	ip, r4
 800cba0:	270a      	movs	r7, #10
 800cba2:	46a6      	mov	lr, r4
 800cba4:	460a      	mov	r2, r1
 800cba6:	fb91 f6f7 	sdiv	r6, r1, r7
 800cbaa:	fb07 1516 	mls	r5, r7, r6, r1
 800cbae:	3530      	adds	r5, #48	; 0x30
 800cbb0:	2a63      	cmp	r2, #99	; 0x63
 800cbb2:	f104 34ff 	add.w	r4, r4, #4294967295
 800cbb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cbba:	4631      	mov	r1, r6
 800cbbc:	dcf1      	bgt.n	800cba2 <__exponent+0x22>
 800cbbe:	3130      	adds	r1, #48	; 0x30
 800cbc0:	f1ae 0502 	sub.w	r5, lr, #2
 800cbc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cbc8:	1c44      	adds	r4, r0, #1
 800cbca:	4629      	mov	r1, r5
 800cbcc:	4561      	cmp	r1, ip
 800cbce:	d30a      	bcc.n	800cbe6 <__exponent+0x66>
 800cbd0:	f10d 0209 	add.w	r2, sp, #9
 800cbd4:	eba2 020e 	sub.w	r2, r2, lr
 800cbd8:	4565      	cmp	r5, ip
 800cbda:	bf88      	it	hi
 800cbdc:	2200      	movhi	r2, #0
 800cbde:	4413      	add	r3, r2
 800cbe0:	1a18      	subs	r0, r3, r0
 800cbe2:	b003      	add	sp, #12
 800cbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cbee:	e7ed      	b.n	800cbcc <__exponent+0x4c>
 800cbf0:	2330      	movs	r3, #48	; 0x30
 800cbf2:	3130      	adds	r1, #48	; 0x30
 800cbf4:	7083      	strb	r3, [r0, #2]
 800cbf6:	70c1      	strb	r1, [r0, #3]
 800cbf8:	1d03      	adds	r3, r0, #4
 800cbfa:	e7f1      	b.n	800cbe0 <__exponent+0x60>

0800cbfc <_printf_float>:
 800cbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc00:	ed2d 8b02 	vpush	{d8}
 800cc04:	b08d      	sub	sp, #52	; 0x34
 800cc06:	460c      	mov	r4, r1
 800cc08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc0c:	4616      	mov	r6, r2
 800cc0e:	461f      	mov	r7, r3
 800cc10:	4605      	mov	r5, r0
 800cc12:	f001 fd81 	bl	800e718 <_localeconv_r>
 800cc16:	f8d0 a000 	ldr.w	sl, [r0]
 800cc1a:	4650      	mov	r0, sl
 800cc1c:	f7f3 fae0 	bl	80001e0 <strlen>
 800cc20:	2300      	movs	r3, #0
 800cc22:	930a      	str	r3, [sp, #40]	; 0x28
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	9305      	str	r3, [sp, #20]
 800cc28:	f8d8 3000 	ldr.w	r3, [r8]
 800cc2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc30:	3307      	adds	r3, #7
 800cc32:	f023 0307 	bic.w	r3, r3, #7
 800cc36:	f103 0208 	add.w	r2, r3, #8
 800cc3a:	f8c8 2000 	str.w	r2, [r8]
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cc4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc4e:	9307      	str	r3, [sp, #28]
 800cc50:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc54:	ee08 0a10 	vmov	s16, r0
 800cc58:	4b9f      	ldr	r3, [pc, #636]	; (800ced8 <_printf_float+0x2dc>)
 800cc5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc62:	f7f3 ff6b 	bl	8000b3c <__aeabi_dcmpun>
 800cc66:	bb88      	cbnz	r0, 800cccc <_printf_float+0xd0>
 800cc68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc6c:	4b9a      	ldr	r3, [pc, #616]	; (800ced8 <_printf_float+0x2dc>)
 800cc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc72:	f7f3 ff45 	bl	8000b00 <__aeabi_dcmple>
 800cc76:	bb48      	cbnz	r0, 800cccc <_printf_float+0xd0>
 800cc78:	2200      	movs	r2, #0
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	4649      	mov	r1, r9
 800cc80:	f7f3 ff34 	bl	8000aec <__aeabi_dcmplt>
 800cc84:	b110      	cbz	r0, 800cc8c <_printf_float+0x90>
 800cc86:	232d      	movs	r3, #45	; 0x2d
 800cc88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc8c:	4b93      	ldr	r3, [pc, #588]	; (800cedc <_printf_float+0x2e0>)
 800cc8e:	4894      	ldr	r0, [pc, #592]	; (800cee0 <_printf_float+0x2e4>)
 800cc90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc94:	bf94      	ite	ls
 800cc96:	4698      	movls	r8, r3
 800cc98:	4680      	movhi	r8, r0
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	6123      	str	r3, [r4, #16]
 800cc9e:	9b05      	ldr	r3, [sp, #20]
 800cca0:	f023 0204 	bic.w	r2, r3, #4
 800cca4:	6022      	str	r2, [r4, #0]
 800cca6:	f04f 0900 	mov.w	r9, #0
 800ccaa:	9700      	str	r7, [sp, #0]
 800ccac:	4633      	mov	r3, r6
 800ccae:	aa0b      	add	r2, sp, #44	; 0x2c
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f000 f9d8 	bl	800d068 <_printf_common>
 800ccb8:	3001      	adds	r0, #1
 800ccba:	f040 8090 	bne.w	800cdde <_printf_float+0x1e2>
 800ccbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc2:	b00d      	add	sp, #52	; 0x34
 800ccc4:	ecbd 8b02 	vpop	{d8}
 800ccc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cccc:	4642      	mov	r2, r8
 800ccce:	464b      	mov	r3, r9
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	4649      	mov	r1, r9
 800ccd4:	f7f3 ff32 	bl	8000b3c <__aeabi_dcmpun>
 800ccd8:	b140      	cbz	r0, 800ccec <_printf_float+0xf0>
 800ccda:	464b      	mov	r3, r9
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	bfbc      	itt	lt
 800cce0:	232d      	movlt	r3, #45	; 0x2d
 800cce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cce6:	487f      	ldr	r0, [pc, #508]	; (800cee4 <_printf_float+0x2e8>)
 800cce8:	4b7f      	ldr	r3, [pc, #508]	; (800cee8 <_printf_float+0x2ec>)
 800ccea:	e7d1      	b.n	800cc90 <_printf_float+0x94>
 800ccec:	6863      	ldr	r3, [r4, #4]
 800ccee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ccf2:	9206      	str	r2, [sp, #24]
 800ccf4:	1c5a      	adds	r2, r3, #1
 800ccf6:	d13f      	bne.n	800cd78 <_printf_float+0x17c>
 800ccf8:	2306      	movs	r3, #6
 800ccfa:	6063      	str	r3, [r4, #4]
 800ccfc:	9b05      	ldr	r3, [sp, #20]
 800ccfe:	6861      	ldr	r1, [r4, #4]
 800cd00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd04:	2300      	movs	r3, #0
 800cd06:	9303      	str	r3, [sp, #12]
 800cd08:	ab0a      	add	r3, sp, #40	; 0x28
 800cd0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd0e:	ab09      	add	r3, sp, #36	; 0x24
 800cd10:	ec49 8b10 	vmov	d0, r8, r9
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	6022      	str	r2, [r4, #0]
 800cd18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f7ff fecd 	bl	800cabc <__cvt>
 800cd22:	9b06      	ldr	r3, [sp, #24]
 800cd24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd26:	2b47      	cmp	r3, #71	; 0x47
 800cd28:	4680      	mov	r8, r0
 800cd2a:	d108      	bne.n	800cd3e <_printf_float+0x142>
 800cd2c:	1cc8      	adds	r0, r1, #3
 800cd2e:	db02      	blt.n	800cd36 <_printf_float+0x13a>
 800cd30:	6863      	ldr	r3, [r4, #4]
 800cd32:	4299      	cmp	r1, r3
 800cd34:	dd41      	ble.n	800cdba <_printf_float+0x1be>
 800cd36:	f1ab 0b02 	sub.w	fp, fp, #2
 800cd3a:	fa5f fb8b 	uxtb.w	fp, fp
 800cd3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd42:	d820      	bhi.n	800cd86 <_printf_float+0x18a>
 800cd44:	3901      	subs	r1, #1
 800cd46:	465a      	mov	r2, fp
 800cd48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd4c:	9109      	str	r1, [sp, #36]	; 0x24
 800cd4e:	f7ff ff17 	bl	800cb80 <__exponent>
 800cd52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd54:	1813      	adds	r3, r2, r0
 800cd56:	2a01      	cmp	r2, #1
 800cd58:	4681      	mov	r9, r0
 800cd5a:	6123      	str	r3, [r4, #16]
 800cd5c:	dc02      	bgt.n	800cd64 <_printf_float+0x168>
 800cd5e:	6822      	ldr	r2, [r4, #0]
 800cd60:	07d2      	lsls	r2, r2, #31
 800cd62:	d501      	bpl.n	800cd68 <_printf_float+0x16c>
 800cd64:	3301      	adds	r3, #1
 800cd66:	6123      	str	r3, [r4, #16]
 800cd68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d09c      	beq.n	800ccaa <_printf_float+0xae>
 800cd70:	232d      	movs	r3, #45	; 0x2d
 800cd72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd76:	e798      	b.n	800ccaa <_printf_float+0xae>
 800cd78:	9a06      	ldr	r2, [sp, #24]
 800cd7a:	2a47      	cmp	r2, #71	; 0x47
 800cd7c:	d1be      	bne.n	800ccfc <_printf_float+0x100>
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1bc      	bne.n	800ccfc <_printf_float+0x100>
 800cd82:	2301      	movs	r3, #1
 800cd84:	e7b9      	b.n	800ccfa <_printf_float+0xfe>
 800cd86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd8a:	d118      	bne.n	800cdbe <_printf_float+0x1c2>
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	dd0b      	ble.n	800cdaa <_printf_float+0x1ae>
 800cd92:	6121      	str	r1, [r4, #16]
 800cd94:	b913      	cbnz	r3, 800cd9c <_printf_float+0x1a0>
 800cd96:	6822      	ldr	r2, [r4, #0]
 800cd98:	07d0      	lsls	r0, r2, #31
 800cd9a:	d502      	bpl.n	800cda2 <_printf_float+0x1a6>
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	440b      	add	r3, r1
 800cda0:	6123      	str	r3, [r4, #16]
 800cda2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cda4:	f04f 0900 	mov.w	r9, #0
 800cda8:	e7de      	b.n	800cd68 <_printf_float+0x16c>
 800cdaa:	b913      	cbnz	r3, 800cdb2 <_printf_float+0x1b6>
 800cdac:	6822      	ldr	r2, [r4, #0]
 800cdae:	07d2      	lsls	r2, r2, #31
 800cdb0:	d501      	bpl.n	800cdb6 <_printf_float+0x1ba>
 800cdb2:	3302      	adds	r3, #2
 800cdb4:	e7f4      	b.n	800cda0 <_printf_float+0x1a4>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e7f2      	b.n	800cda0 <_printf_float+0x1a4>
 800cdba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cdbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc0:	4299      	cmp	r1, r3
 800cdc2:	db05      	blt.n	800cdd0 <_printf_float+0x1d4>
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	6121      	str	r1, [r4, #16]
 800cdc8:	07d8      	lsls	r0, r3, #31
 800cdca:	d5ea      	bpl.n	800cda2 <_printf_float+0x1a6>
 800cdcc:	1c4b      	adds	r3, r1, #1
 800cdce:	e7e7      	b.n	800cda0 <_printf_float+0x1a4>
 800cdd0:	2900      	cmp	r1, #0
 800cdd2:	bfd4      	ite	le
 800cdd4:	f1c1 0202 	rsble	r2, r1, #2
 800cdd8:	2201      	movgt	r2, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	e7e0      	b.n	800cda0 <_printf_float+0x1a4>
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	055a      	lsls	r2, r3, #21
 800cde2:	d407      	bmi.n	800cdf4 <_printf_float+0x1f8>
 800cde4:	6923      	ldr	r3, [r4, #16]
 800cde6:	4642      	mov	r2, r8
 800cde8:	4631      	mov	r1, r6
 800cdea:	4628      	mov	r0, r5
 800cdec:	47b8      	blx	r7
 800cdee:	3001      	adds	r0, #1
 800cdf0:	d12c      	bne.n	800ce4c <_printf_float+0x250>
 800cdf2:	e764      	b.n	800ccbe <_printf_float+0xc2>
 800cdf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdf8:	f240 80e0 	bls.w	800cfbc <_printf_float+0x3c0>
 800cdfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce00:	2200      	movs	r2, #0
 800ce02:	2300      	movs	r3, #0
 800ce04:	f7f3 fe68 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d034      	beq.n	800ce76 <_printf_float+0x27a>
 800ce0c:	4a37      	ldr	r2, [pc, #220]	; (800ceec <_printf_float+0x2f0>)
 800ce0e:	2301      	movs	r3, #1
 800ce10:	4631      	mov	r1, r6
 800ce12:	4628      	mov	r0, r5
 800ce14:	47b8      	blx	r7
 800ce16:	3001      	adds	r0, #1
 800ce18:	f43f af51 	beq.w	800ccbe <_printf_float+0xc2>
 800ce1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce20:	429a      	cmp	r2, r3
 800ce22:	db02      	blt.n	800ce2a <_printf_float+0x22e>
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	07d8      	lsls	r0, r3, #31
 800ce28:	d510      	bpl.n	800ce4c <_printf_float+0x250>
 800ce2a:	ee18 3a10 	vmov	r3, s16
 800ce2e:	4652      	mov	r2, sl
 800ce30:	4631      	mov	r1, r6
 800ce32:	4628      	mov	r0, r5
 800ce34:	47b8      	blx	r7
 800ce36:	3001      	adds	r0, #1
 800ce38:	f43f af41 	beq.w	800ccbe <_printf_float+0xc2>
 800ce3c:	f04f 0800 	mov.w	r8, #0
 800ce40:	f104 091a 	add.w	r9, r4, #26
 800ce44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce46:	3b01      	subs	r3, #1
 800ce48:	4543      	cmp	r3, r8
 800ce4a:	dc09      	bgt.n	800ce60 <_printf_float+0x264>
 800ce4c:	6823      	ldr	r3, [r4, #0]
 800ce4e:	079b      	lsls	r3, r3, #30
 800ce50:	f100 8105 	bmi.w	800d05e <_printf_float+0x462>
 800ce54:	68e0      	ldr	r0, [r4, #12]
 800ce56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce58:	4298      	cmp	r0, r3
 800ce5a:	bfb8      	it	lt
 800ce5c:	4618      	movlt	r0, r3
 800ce5e:	e730      	b.n	800ccc2 <_printf_float+0xc6>
 800ce60:	2301      	movs	r3, #1
 800ce62:	464a      	mov	r2, r9
 800ce64:	4631      	mov	r1, r6
 800ce66:	4628      	mov	r0, r5
 800ce68:	47b8      	blx	r7
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	f43f af27 	beq.w	800ccbe <_printf_float+0xc2>
 800ce70:	f108 0801 	add.w	r8, r8, #1
 800ce74:	e7e6      	b.n	800ce44 <_printf_float+0x248>
 800ce76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	dc39      	bgt.n	800cef0 <_printf_float+0x2f4>
 800ce7c:	4a1b      	ldr	r2, [pc, #108]	; (800ceec <_printf_float+0x2f0>)
 800ce7e:	2301      	movs	r3, #1
 800ce80:	4631      	mov	r1, r6
 800ce82:	4628      	mov	r0, r5
 800ce84:	47b8      	blx	r7
 800ce86:	3001      	adds	r0, #1
 800ce88:	f43f af19 	beq.w	800ccbe <_printf_float+0xc2>
 800ce8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce90:	4313      	orrs	r3, r2
 800ce92:	d102      	bne.n	800ce9a <_printf_float+0x29e>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	07d9      	lsls	r1, r3, #31
 800ce98:	d5d8      	bpl.n	800ce4c <_printf_float+0x250>
 800ce9a:	ee18 3a10 	vmov	r3, s16
 800ce9e:	4652      	mov	r2, sl
 800cea0:	4631      	mov	r1, r6
 800cea2:	4628      	mov	r0, r5
 800cea4:	47b8      	blx	r7
 800cea6:	3001      	adds	r0, #1
 800cea8:	f43f af09 	beq.w	800ccbe <_printf_float+0xc2>
 800ceac:	f04f 0900 	mov.w	r9, #0
 800ceb0:	f104 0a1a 	add.w	sl, r4, #26
 800ceb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb6:	425b      	negs	r3, r3
 800ceb8:	454b      	cmp	r3, r9
 800ceba:	dc01      	bgt.n	800cec0 <_printf_float+0x2c4>
 800cebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cebe:	e792      	b.n	800cde6 <_printf_float+0x1ea>
 800cec0:	2301      	movs	r3, #1
 800cec2:	4652      	mov	r2, sl
 800cec4:	4631      	mov	r1, r6
 800cec6:	4628      	mov	r0, r5
 800cec8:	47b8      	blx	r7
 800ceca:	3001      	adds	r0, #1
 800cecc:	f43f aef7 	beq.w	800ccbe <_printf_float+0xc2>
 800ced0:	f109 0901 	add.w	r9, r9, #1
 800ced4:	e7ee      	b.n	800ceb4 <_printf_float+0x2b8>
 800ced6:	bf00      	nop
 800ced8:	7fefffff 	.word	0x7fefffff
 800cedc:	08010114 	.word	0x08010114
 800cee0:	08010118 	.word	0x08010118
 800cee4:	08010120 	.word	0x08010120
 800cee8:	0801011c 	.word	0x0801011c
 800ceec:	08010124 	.word	0x08010124
 800cef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cef4:	429a      	cmp	r2, r3
 800cef6:	bfa8      	it	ge
 800cef8:	461a      	movge	r2, r3
 800cefa:	2a00      	cmp	r2, #0
 800cefc:	4691      	mov	r9, r2
 800cefe:	dc37      	bgt.n	800cf70 <_printf_float+0x374>
 800cf00:	f04f 0b00 	mov.w	fp, #0
 800cf04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf08:	f104 021a 	add.w	r2, r4, #26
 800cf0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf0e:	9305      	str	r3, [sp, #20]
 800cf10:	eba3 0309 	sub.w	r3, r3, r9
 800cf14:	455b      	cmp	r3, fp
 800cf16:	dc33      	bgt.n	800cf80 <_printf_float+0x384>
 800cf18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	db3b      	blt.n	800cf98 <_printf_float+0x39c>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	07da      	lsls	r2, r3, #31
 800cf24:	d438      	bmi.n	800cf98 <_printf_float+0x39c>
 800cf26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf28:	9b05      	ldr	r3, [sp, #20]
 800cf2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	eba2 0901 	sub.w	r9, r2, r1
 800cf32:	4599      	cmp	r9, r3
 800cf34:	bfa8      	it	ge
 800cf36:	4699      	movge	r9, r3
 800cf38:	f1b9 0f00 	cmp.w	r9, #0
 800cf3c:	dc35      	bgt.n	800cfaa <_printf_float+0x3ae>
 800cf3e:	f04f 0800 	mov.w	r8, #0
 800cf42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf46:	f104 0a1a 	add.w	sl, r4, #26
 800cf4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf4e:	1a9b      	subs	r3, r3, r2
 800cf50:	eba3 0309 	sub.w	r3, r3, r9
 800cf54:	4543      	cmp	r3, r8
 800cf56:	f77f af79 	ble.w	800ce4c <_printf_float+0x250>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	4652      	mov	r2, sl
 800cf5e:	4631      	mov	r1, r6
 800cf60:	4628      	mov	r0, r5
 800cf62:	47b8      	blx	r7
 800cf64:	3001      	adds	r0, #1
 800cf66:	f43f aeaa 	beq.w	800ccbe <_printf_float+0xc2>
 800cf6a:	f108 0801 	add.w	r8, r8, #1
 800cf6e:	e7ec      	b.n	800cf4a <_printf_float+0x34e>
 800cf70:	4613      	mov	r3, r2
 800cf72:	4631      	mov	r1, r6
 800cf74:	4642      	mov	r2, r8
 800cf76:	4628      	mov	r0, r5
 800cf78:	47b8      	blx	r7
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	d1c0      	bne.n	800cf00 <_printf_float+0x304>
 800cf7e:	e69e      	b.n	800ccbe <_printf_float+0xc2>
 800cf80:	2301      	movs	r3, #1
 800cf82:	4631      	mov	r1, r6
 800cf84:	4628      	mov	r0, r5
 800cf86:	9205      	str	r2, [sp, #20]
 800cf88:	47b8      	blx	r7
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	f43f ae97 	beq.w	800ccbe <_printf_float+0xc2>
 800cf90:	9a05      	ldr	r2, [sp, #20]
 800cf92:	f10b 0b01 	add.w	fp, fp, #1
 800cf96:	e7b9      	b.n	800cf0c <_printf_float+0x310>
 800cf98:	ee18 3a10 	vmov	r3, s16
 800cf9c:	4652      	mov	r2, sl
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	d1be      	bne.n	800cf26 <_printf_float+0x32a>
 800cfa8:	e689      	b.n	800ccbe <_printf_float+0xc2>
 800cfaa:	9a05      	ldr	r2, [sp, #20]
 800cfac:	464b      	mov	r3, r9
 800cfae:	4442      	add	r2, r8
 800cfb0:	4631      	mov	r1, r6
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	47b8      	blx	r7
 800cfb6:	3001      	adds	r0, #1
 800cfb8:	d1c1      	bne.n	800cf3e <_printf_float+0x342>
 800cfba:	e680      	b.n	800ccbe <_printf_float+0xc2>
 800cfbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfbe:	2a01      	cmp	r2, #1
 800cfc0:	dc01      	bgt.n	800cfc6 <_printf_float+0x3ca>
 800cfc2:	07db      	lsls	r3, r3, #31
 800cfc4:	d538      	bpl.n	800d038 <_printf_float+0x43c>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4642      	mov	r2, r8
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4628      	mov	r0, r5
 800cfce:	47b8      	blx	r7
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	f43f ae74 	beq.w	800ccbe <_printf_float+0xc2>
 800cfd6:	ee18 3a10 	vmov	r3, s16
 800cfda:	4652      	mov	r2, sl
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b8      	blx	r7
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	f43f ae6b 	beq.w	800ccbe <_printf_float+0xc2>
 800cfe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfec:	2200      	movs	r2, #0
 800cfee:	2300      	movs	r3, #0
 800cff0:	f7f3 fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 800cff4:	b9d8      	cbnz	r0, 800d02e <_printf_float+0x432>
 800cff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff8:	f108 0201 	add.w	r2, r8, #1
 800cffc:	3b01      	subs	r3, #1
 800cffe:	4631      	mov	r1, r6
 800d000:	4628      	mov	r0, r5
 800d002:	47b8      	blx	r7
 800d004:	3001      	adds	r0, #1
 800d006:	d10e      	bne.n	800d026 <_printf_float+0x42a>
 800d008:	e659      	b.n	800ccbe <_printf_float+0xc2>
 800d00a:	2301      	movs	r3, #1
 800d00c:	4652      	mov	r2, sl
 800d00e:	4631      	mov	r1, r6
 800d010:	4628      	mov	r0, r5
 800d012:	47b8      	blx	r7
 800d014:	3001      	adds	r0, #1
 800d016:	f43f ae52 	beq.w	800ccbe <_printf_float+0xc2>
 800d01a:	f108 0801 	add.w	r8, r8, #1
 800d01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d020:	3b01      	subs	r3, #1
 800d022:	4543      	cmp	r3, r8
 800d024:	dcf1      	bgt.n	800d00a <_printf_float+0x40e>
 800d026:	464b      	mov	r3, r9
 800d028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d02c:	e6dc      	b.n	800cde8 <_printf_float+0x1ec>
 800d02e:	f04f 0800 	mov.w	r8, #0
 800d032:	f104 0a1a 	add.w	sl, r4, #26
 800d036:	e7f2      	b.n	800d01e <_printf_float+0x422>
 800d038:	2301      	movs	r3, #1
 800d03a:	4642      	mov	r2, r8
 800d03c:	e7df      	b.n	800cffe <_printf_float+0x402>
 800d03e:	2301      	movs	r3, #1
 800d040:	464a      	mov	r2, r9
 800d042:	4631      	mov	r1, r6
 800d044:	4628      	mov	r0, r5
 800d046:	47b8      	blx	r7
 800d048:	3001      	adds	r0, #1
 800d04a:	f43f ae38 	beq.w	800ccbe <_printf_float+0xc2>
 800d04e:	f108 0801 	add.w	r8, r8, #1
 800d052:	68e3      	ldr	r3, [r4, #12]
 800d054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d056:	1a5b      	subs	r3, r3, r1
 800d058:	4543      	cmp	r3, r8
 800d05a:	dcf0      	bgt.n	800d03e <_printf_float+0x442>
 800d05c:	e6fa      	b.n	800ce54 <_printf_float+0x258>
 800d05e:	f04f 0800 	mov.w	r8, #0
 800d062:	f104 0919 	add.w	r9, r4, #25
 800d066:	e7f4      	b.n	800d052 <_printf_float+0x456>

0800d068 <_printf_common>:
 800d068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d06c:	4616      	mov	r6, r2
 800d06e:	4699      	mov	r9, r3
 800d070:	688a      	ldr	r2, [r1, #8]
 800d072:	690b      	ldr	r3, [r1, #16]
 800d074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d078:	4293      	cmp	r3, r2
 800d07a:	bfb8      	it	lt
 800d07c:	4613      	movlt	r3, r2
 800d07e:	6033      	str	r3, [r6, #0]
 800d080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d084:	4607      	mov	r7, r0
 800d086:	460c      	mov	r4, r1
 800d088:	b10a      	cbz	r2, 800d08e <_printf_common+0x26>
 800d08a:	3301      	adds	r3, #1
 800d08c:	6033      	str	r3, [r6, #0]
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	0699      	lsls	r1, r3, #26
 800d092:	bf42      	ittt	mi
 800d094:	6833      	ldrmi	r3, [r6, #0]
 800d096:	3302      	addmi	r3, #2
 800d098:	6033      	strmi	r3, [r6, #0]
 800d09a:	6825      	ldr	r5, [r4, #0]
 800d09c:	f015 0506 	ands.w	r5, r5, #6
 800d0a0:	d106      	bne.n	800d0b0 <_printf_common+0x48>
 800d0a2:	f104 0a19 	add.w	sl, r4, #25
 800d0a6:	68e3      	ldr	r3, [r4, #12]
 800d0a8:	6832      	ldr	r2, [r6, #0]
 800d0aa:	1a9b      	subs	r3, r3, r2
 800d0ac:	42ab      	cmp	r3, r5
 800d0ae:	dc26      	bgt.n	800d0fe <_printf_common+0x96>
 800d0b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0b4:	1e13      	subs	r3, r2, #0
 800d0b6:	6822      	ldr	r2, [r4, #0]
 800d0b8:	bf18      	it	ne
 800d0ba:	2301      	movne	r3, #1
 800d0bc:	0692      	lsls	r2, r2, #26
 800d0be:	d42b      	bmi.n	800d118 <_printf_common+0xb0>
 800d0c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	47c0      	blx	r8
 800d0ca:	3001      	adds	r0, #1
 800d0cc:	d01e      	beq.n	800d10c <_printf_common+0xa4>
 800d0ce:	6823      	ldr	r3, [r4, #0]
 800d0d0:	68e5      	ldr	r5, [r4, #12]
 800d0d2:	6832      	ldr	r2, [r6, #0]
 800d0d4:	f003 0306 	and.w	r3, r3, #6
 800d0d8:	2b04      	cmp	r3, #4
 800d0da:	bf08      	it	eq
 800d0dc:	1aad      	subeq	r5, r5, r2
 800d0de:	68a3      	ldr	r3, [r4, #8]
 800d0e0:	6922      	ldr	r2, [r4, #16]
 800d0e2:	bf0c      	ite	eq
 800d0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0e8:	2500      	movne	r5, #0
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	bfc4      	itt	gt
 800d0ee:	1a9b      	subgt	r3, r3, r2
 800d0f0:	18ed      	addgt	r5, r5, r3
 800d0f2:	2600      	movs	r6, #0
 800d0f4:	341a      	adds	r4, #26
 800d0f6:	42b5      	cmp	r5, r6
 800d0f8:	d11a      	bne.n	800d130 <_printf_common+0xc8>
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	e008      	b.n	800d110 <_printf_common+0xa8>
 800d0fe:	2301      	movs	r3, #1
 800d100:	4652      	mov	r2, sl
 800d102:	4649      	mov	r1, r9
 800d104:	4638      	mov	r0, r7
 800d106:	47c0      	blx	r8
 800d108:	3001      	adds	r0, #1
 800d10a:	d103      	bne.n	800d114 <_printf_common+0xac>
 800d10c:	f04f 30ff 	mov.w	r0, #4294967295
 800d110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d114:	3501      	adds	r5, #1
 800d116:	e7c6      	b.n	800d0a6 <_printf_common+0x3e>
 800d118:	18e1      	adds	r1, r4, r3
 800d11a:	1c5a      	adds	r2, r3, #1
 800d11c:	2030      	movs	r0, #48	; 0x30
 800d11e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d122:	4422      	add	r2, r4
 800d124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d12c:	3302      	adds	r3, #2
 800d12e:	e7c7      	b.n	800d0c0 <_printf_common+0x58>
 800d130:	2301      	movs	r3, #1
 800d132:	4622      	mov	r2, r4
 800d134:	4649      	mov	r1, r9
 800d136:	4638      	mov	r0, r7
 800d138:	47c0      	blx	r8
 800d13a:	3001      	adds	r0, #1
 800d13c:	d0e6      	beq.n	800d10c <_printf_common+0xa4>
 800d13e:	3601      	adds	r6, #1
 800d140:	e7d9      	b.n	800d0f6 <_printf_common+0x8e>
	...

0800d144 <_printf_i>:
 800d144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d148:	460c      	mov	r4, r1
 800d14a:	4691      	mov	r9, r2
 800d14c:	7e27      	ldrb	r7, [r4, #24]
 800d14e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d150:	2f78      	cmp	r7, #120	; 0x78
 800d152:	4680      	mov	r8, r0
 800d154:	469a      	mov	sl, r3
 800d156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d15a:	d807      	bhi.n	800d16c <_printf_i+0x28>
 800d15c:	2f62      	cmp	r7, #98	; 0x62
 800d15e:	d80a      	bhi.n	800d176 <_printf_i+0x32>
 800d160:	2f00      	cmp	r7, #0
 800d162:	f000 80d8 	beq.w	800d316 <_printf_i+0x1d2>
 800d166:	2f58      	cmp	r7, #88	; 0x58
 800d168:	f000 80a3 	beq.w	800d2b2 <_printf_i+0x16e>
 800d16c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d174:	e03a      	b.n	800d1ec <_printf_i+0xa8>
 800d176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d17a:	2b15      	cmp	r3, #21
 800d17c:	d8f6      	bhi.n	800d16c <_printf_i+0x28>
 800d17e:	a001      	add	r0, pc, #4	; (adr r0, 800d184 <_printf_i+0x40>)
 800d180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d184:	0800d1dd 	.word	0x0800d1dd
 800d188:	0800d1f1 	.word	0x0800d1f1
 800d18c:	0800d16d 	.word	0x0800d16d
 800d190:	0800d16d 	.word	0x0800d16d
 800d194:	0800d16d 	.word	0x0800d16d
 800d198:	0800d16d 	.word	0x0800d16d
 800d19c:	0800d1f1 	.word	0x0800d1f1
 800d1a0:	0800d16d 	.word	0x0800d16d
 800d1a4:	0800d16d 	.word	0x0800d16d
 800d1a8:	0800d16d 	.word	0x0800d16d
 800d1ac:	0800d16d 	.word	0x0800d16d
 800d1b0:	0800d2fd 	.word	0x0800d2fd
 800d1b4:	0800d221 	.word	0x0800d221
 800d1b8:	0800d2df 	.word	0x0800d2df
 800d1bc:	0800d16d 	.word	0x0800d16d
 800d1c0:	0800d16d 	.word	0x0800d16d
 800d1c4:	0800d31f 	.word	0x0800d31f
 800d1c8:	0800d16d 	.word	0x0800d16d
 800d1cc:	0800d221 	.word	0x0800d221
 800d1d0:	0800d16d 	.word	0x0800d16d
 800d1d4:	0800d16d 	.word	0x0800d16d
 800d1d8:	0800d2e7 	.word	0x0800d2e7
 800d1dc:	680b      	ldr	r3, [r1, #0]
 800d1de:	1d1a      	adds	r2, r3, #4
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	600a      	str	r2, [r1, #0]
 800d1e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e0a3      	b.n	800d338 <_printf_i+0x1f4>
 800d1f0:	6825      	ldr	r5, [r4, #0]
 800d1f2:	6808      	ldr	r0, [r1, #0]
 800d1f4:	062e      	lsls	r6, r5, #24
 800d1f6:	f100 0304 	add.w	r3, r0, #4
 800d1fa:	d50a      	bpl.n	800d212 <_printf_i+0xce>
 800d1fc:	6805      	ldr	r5, [r0, #0]
 800d1fe:	600b      	str	r3, [r1, #0]
 800d200:	2d00      	cmp	r5, #0
 800d202:	da03      	bge.n	800d20c <_printf_i+0xc8>
 800d204:	232d      	movs	r3, #45	; 0x2d
 800d206:	426d      	negs	r5, r5
 800d208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d20c:	485e      	ldr	r0, [pc, #376]	; (800d388 <_printf_i+0x244>)
 800d20e:	230a      	movs	r3, #10
 800d210:	e019      	b.n	800d246 <_printf_i+0x102>
 800d212:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d216:	6805      	ldr	r5, [r0, #0]
 800d218:	600b      	str	r3, [r1, #0]
 800d21a:	bf18      	it	ne
 800d21c:	b22d      	sxthne	r5, r5
 800d21e:	e7ef      	b.n	800d200 <_printf_i+0xbc>
 800d220:	680b      	ldr	r3, [r1, #0]
 800d222:	6825      	ldr	r5, [r4, #0]
 800d224:	1d18      	adds	r0, r3, #4
 800d226:	6008      	str	r0, [r1, #0]
 800d228:	0628      	lsls	r0, r5, #24
 800d22a:	d501      	bpl.n	800d230 <_printf_i+0xec>
 800d22c:	681d      	ldr	r5, [r3, #0]
 800d22e:	e002      	b.n	800d236 <_printf_i+0xf2>
 800d230:	0669      	lsls	r1, r5, #25
 800d232:	d5fb      	bpl.n	800d22c <_printf_i+0xe8>
 800d234:	881d      	ldrh	r5, [r3, #0]
 800d236:	4854      	ldr	r0, [pc, #336]	; (800d388 <_printf_i+0x244>)
 800d238:	2f6f      	cmp	r7, #111	; 0x6f
 800d23a:	bf0c      	ite	eq
 800d23c:	2308      	moveq	r3, #8
 800d23e:	230a      	movne	r3, #10
 800d240:	2100      	movs	r1, #0
 800d242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d246:	6866      	ldr	r6, [r4, #4]
 800d248:	60a6      	str	r6, [r4, #8]
 800d24a:	2e00      	cmp	r6, #0
 800d24c:	bfa2      	ittt	ge
 800d24e:	6821      	ldrge	r1, [r4, #0]
 800d250:	f021 0104 	bicge.w	r1, r1, #4
 800d254:	6021      	strge	r1, [r4, #0]
 800d256:	b90d      	cbnz	r5, 800d25c <_printf_i+0x118>
 800d258:	2e00      	cmp	r6, #0
 800d25a:	d04d      	beq.n	800d2f8 <_printf_i+0x1b4>
 800d25c:	4616      	mov	r6, r2
 800d25e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d262:	fb03 5711 	mls	r7, r3, r1, r5
 800d266:	5dc7      	ldrb	r7, [r0, r7]
 800d268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d26c:	462f      	mov	r7, r5
 800d26e:	42bb      	cmp	r3, r7
 800d270:	460d      	mov	r5, r1
 800d272:	d9f4      	bls.n	800d25e <_printf_i+0x11a>
 800d274:	2b08      	cmp	r3, #8
 800d276:	d10b      	bne.n	800d290 <_printf_i+0x14c>
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	07df      	lsls	r7, r3, #31
 800d27c:	d508      	bpl.n	800d290 <_printf_i+0x14c>
 800d27e:	6923      	ldr	r3, [r4, #16]
 800d280:	6861      	ldr	r1, [r4, #4]
 800d282:	4299      	cmp	r1, r3
 800d284:	bfde      	ittt	le
 800d286:	2330      	movle	r3, #48	; 0x30
 800d288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d28c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d290:	1b92      	subs	r2, r2, r6
 800d292:	6122      	str	r2, [r4, #16]
 800d294:	f8cd a000 	str.w	sl, [sp]
 800d298:	464b      	mov	r3, r9
 800d29a:	aa03      	add	r2, sp, #12
 800d29c:	4621      	mov	r1, r4
 800d29e:	4640      	mov	r0, r8
 800d2a0:	f7ff fee2 	bl	800d068 <_printf_common>
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	d14c      	bne.n	800d342 <_printf_i+0x1fe>
 800d2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ac:	b004      	add	sp, #16
 800d2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b2:	4835      	ldr	r0, [pc, #212]	; (800d388 <_printf_i+0x244>)
 800d2b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2b8:	6823      	ldr	r3, [r4, #0]
 800d2ba:	680e      	ldr	r6, [r1, #0]
 800d2bc:	061f      	lsls	r7, r3, #24
 800d2be:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2c2:	600e      	str	r6, [r1, #0]
 800d2c4:	d514      	bpl.n	800d2f0 <_printf_i+0x1ac>
 800d2c6:	07d9      	lsls	r1, r3, #31
 800d2c8:	bf44      	itt	mi
 800d2ca:	f043 0320 	orrmi.w	r3, r3, #32
 800d2ce:	6023      	strmi	r3, [r4, #0]
 800d2d0:	b91d      	cbnz	r5, 800d2da <_printf_i+0x196>
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	f023 0320 	bic.w	r3, r3, #32
 800d2d8:	6023      	str	r3, [r4, #0]
 800d2da:	2310      	movs	r3, #16
 800d2dc:	e7b0      	b.n	800d240 <_printf_i+0xfc>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	f043 0320 	orr.w	r3, r3, #32
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	2378      	movs	r3, #120	; 0x78
 800d2e8:	4828      	ldr	r0, [pc, #160]	; (800d38c <_printf_i+0x248>)
 800d2ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2ee:	e7e3      	b.n	800d2b8 <_printf_i+0x174>
 800d2f0:	065e      	lsls	r6, r3, #25
 800d2f2:	bf48      	it	mi
 800d2f4:	b2ad      	uxthmi	r5, r5
 800d2f6:	e7e6      	b.n	800d2c6 <_printf_i+0x182>
 800d2f8:	4616      	mov	r6, r2
 800d2fa:	e7bb      	b.n	800d274 <_printf_i+0x130>
 800d2fc:	680b      	ldr	r3, [r1, #0]
 800d2fe:	6826      	ldr	r6, [r4, #0]
 800d300:	6960      	ldr	r0, [r4, #20]
 800d302:	1d1d      	adds	r5, r3, #4
 800d304:	600d      	str	r5, [r1, #0]
 800d306:	0635      	lsls	r5, r6, #24
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	d501      	bpl.n	800d310 <_printf_i+0x1cc>
 800d30c:	6018      	str	r0, [r3, #0]
 800d30e:	e002      	b.n	800d316 <_printf_i+0x1d2>
 800d310:	0671      	lsls	r1, r6, #25
 800d312:	d5fb      	bpl.n	800d30c <_printf_i+0x1c8>
 800d314:	8018      	strh	r0, [r3, #0]
 800d316:	2300      	movs	r3, #0
 800d318:	6123      	str	r3, [r4, #16]
 800d31a:	4616      	mov	r6, r2
 800d31c:	e7ba      	b.n	800d294 <_printf_i+0x150>
 800d31e:	680b      	ldr	r3, [r1, #0]
 800d320:	1d1a      	adds	r2, r3, #4
 800d322:	600a      	str	r2, [r1, #0]
 800d324:	681e      	ldr	r6, [r3, #0]
 800d326:	6862      	ldr	r2, [r4, #4]
 800d328:	2100      	movs	r1, #0
 800d32a:	4630      	mov	r0, r6
 800d32c:	f7f2 ff60 	bl	80001f0 <memchr>
 800d330:	b108      	cbz	r0, 800d336 <_printf_i+0x1f2>
 800d332:	1b80      	subs	r0, r0, r6
 800d334:	6060      	str	r0, [r4, #4]
 800d336:	6863      	ldr	r3, [r4, #4]
 800d338:	6123      	str	r3, [r4, #16]
 800d33a:	2300      	movs	r3, #0
 800d33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d340:	e7a8      	b.n	800d294 <_printf_i+0x150>
 800d342:	6923      	ldr	r3, [r4, #16]
 800d344:	4632      	mov	r2, r6
 800d346:	4649      	mov	r1, r9
 800d348:	4640      	mov	r0, r8
 800d34a:	47d0      	blx	sl
 800d34c:	3001      	adds	r0, #1
 800d34e:	d0ab      	beq.n	800d2a8 <_printf_i+0x164>
 800d350:	6823      	ldr	r3, [r4, #0]
 800d352:	079b      	lsls	r3, r3, #30
 800d354:	d413      	bmi.n	800d37e <_printf_i+0x23a>
 800d356:	68e0      	ldr	r0, [r4, #12]
 800d358:	9b03      	ldr	r3, [sp, #12]
 800d35a:	4298      	cmp	r0, r3
 800d35c:	bfb8      	it	lt
 800d35e:	4618      	movlt	r0, r3
 800d360:	e7a4      	b.n	800d2ac <_printf_i+0x168>
 800d362:	2301      	movs	r3, #1
 800d364:	4632      	mov	r2, r6
 800d366:	4649      	mov	r1, r9
 800d368:	4640      	mov	r0, r8
 800d36a:	47d0      	blx	sl
 800d36c:	3001      	adds	r0, #1
 800d36e:	d09b      	beq.n	800d2a8 <_printf_i+0x164>
 800d370:	3501      	adds	r5, #1
 800d372:	68e3      	ldr	r3, [r4, #12]
 800d374:	9903      	ldr	r1, [sp, #12]
 800d376:	1a5b      	subs	r3, r3, r1
 800d378:	42ab      	cmp	r3, r5
 800d37a:	dcf2      	bgt.n	800d362 <_printf_i+0x21e>
 800d37c:	e7eb      	b.n	800d356 <_printf_i+0x212>
 800d37e:	2500      	movs	r5, #0
 800d380:	f104 0619 	add.w	r6, r4, #25
 800d384:	e7f5      	b.n	800d372 <_printf_i+0x22e>
 800d386:	bf00      	nop
 800d388:	08010126 	.word	0x08010126
 800d38c:	08010137 	.word	0x08010137

0800d390 <iprintf>:
 800d390:	b40f      	push	{r0, r1, r2, r3}
 800d392:	4b0a      	ldr	r3, [pc, #40]	; (800d3bc <iprintf+0x2c>)
 800d394:	b513      	push	{r0, r1, r4, lr}
 800d396:	681c      	ldr	r4, [r3, #0]
 800d398:	b124      	cbz	r4, 800d3a4 <iprintf+0x14>
 800d39a:	69a3      	ldr	r3, [r4, #24]
 800d39c:	b913      	cbnz	r3, 800d3a4 <iprintf+0x14>
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f001 f91c 	bl	800e5dc <__sinit>
 800d3a4:	ab05      	add	r3, sp, #20
 800d3a6:	9a04      	ldr	r2, [sp, #16]
 800d3a8:	68a1      	ldr	r1, [r4, #8]
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f001 ff55 	bl	800f25c <_vfiprintf_r>
 800d3b2:	b002      	add	sp, #8
 800d3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3b8:	b004      	add	sp, #16
 800d3ba:	4770      	bx	lr
 800d3bc:	2000038c 	.word	0x2000038c

0800d3c0 <putchar>:
 800d3c0:	4b09      	ldr	r3, [pc, #36]	; (800d3e8 <putchar+0x28>)
 800d3c2:	b513      	push	{r0, r1, r4, lr}
 800d3c4:	681c      	ldr	r4, [r3, #0]
 800d3c6:	4601      	mov	r1, r0
 800d3c8:	b134      	cbz	r4, 800d3d8 <putchar+0x18>
 800d3ca:	69a3      	ldr	r3, [r4, #24]
 800d3cc:	b923      	cbnz	r3, 800d3d8 <putchar+0x18>
 800d3ce:	9001      	str	r0, [sp, #4]
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f001 f903 	bl	800e5dc <__sinit>
 800d3d6:	9901      	ldr	r1, [sp, #4]
 800d3d8:	68a2      	ldr	r2, [r4, #8]
 800d3da:	4620      	mov	r0, r4
 800d3dc:	b002      	add	sp, #8
 800d3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3e2:	f002 b86b 	b.w	800f4bc <_putc_r>
 800d3e6:	bf00      	nop
 800d3e8:	2000038c 	.word	0x2000038c

0800d3ec <_puts_r>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	460e      	mov	r6, r1
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	b118      	cbz	r0, 800d3fc <_puts_r+0x10>
 800d3f4:	6983      	ldr	r3, [r0, #24]
 800d3f6:	b90b      	cbnz	r3, 800d3fc <_puts_r+0x10>
 800d3f8:	f001 f8f0 	bl	800e5dc <__sinit>
 800d3fc:	69ab      	ldr	r3, [r5, #24]
 800d3fe:	68ac      	ldr	r4, [r5, #8]
 800d400:	b913      	cbnz	r3, 800d408 <_puts_r+0x1c>
 800d402:	4628      	mov	r0, r5
 800d404:	f001 f8ea 	bl	800e5dc <__sinit>
 800d408:	4b2c      	ldr	r3, [pc, #176]	; (800d4bc <_puts_r+0xd0>)
 800d40a:	429c      	cmp	r4, r3
 800d40c:	d120      	bne.n	800d450 <_puts_r+0x64>
 800d40e:	686c      	ldr	r4, [r5, #4]
 800d410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d412:	07db      	lsls	r3, r3, #31
 800d414:	d405      	bmi.n	800d422 <_puts_r+0x36>
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	0598      	lsls	r0, r3, #22
 800d41a:	d402      	bmi.n	800d422 <_puts_r+0x36>
 800d41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d41e:	f001 f980 	bl	800e722 <__retarget_lock_acquire_recursive>
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	0719      	lsls	r1, r3, #28
 800d426:	d51d      	bpl.n	800d464 <_puts_r+0x78>
 800d428:	6923      	ldr	r3, [r4, #16]
 800d42a:	b1db      	cbz	r3, 800d464 <_puts_r+0x78>
 800d42c:	3e01      	subs	r6, #1
 800d42e:	68a3      	ldr	r3, [r4, #8]
 800d430:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d434:	3b01      	subs	r3, #1
 800d436:	60a3      	str	r3, [r4, #8]
 800d438:	bb39      	cbnz	r1, 800d48a <_puts_r+0x9e>
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	da38      	bge.n	800d4b0 <_puts_r+0xc4>
 800d43e:	4622      	mov	r2, r4
 800d440:	210a      	movs	r1, #10
 800d442:	4628      	mov	r0, r5
 800d444:	f000 f878 	bl	800d538 <__swbuf_r>
 800d448:	3001      	adds	r0, #1
 800d44a:	d011      	beq.n	800d470 <_puts_r+0x84>
 800d44c:	250a      	movs	r5, #10
 800d44e:	e011      	b.n	800d474 <_puts_r+0x88>
 800d450:	4b1b      	ldr	r3, [pc, #108]	; (800d4c0 <_puts_r+0xd4>)
 800d452:	429c      	cmp	r4, r3
 800d454:	d101      	bne.n	800d45a <_puts_r+0x6e>
 800d456:	68ac      	ldr	r4, [r5, #8]
 800d458:	e7da      	b.n	800d410 <_puts_r+0x24>
 800d45a:	4b1a      	ldr	r3, [pc, #104]	; (800d4c4 <_puts_r+0xd8>)
 800d45c:	429c      	cmp	r4, r3
 800d45e:	bf08      	it	eq
 800d460:	68ec      	ldreq	r4, [r5, #12]
 800d462:	e7d5      	b.n	800d410 <_puts_r+0x24>
 800d464:	4621      	mov	r1, r4
 800d466:	4628      	mov	r0, r5
 800d468:	f000 f8b8 	bl	800d5dc <__swsetup_r>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d0dd      	beq.n	800d42c <_puts_r+0x40>
 800d470:	f04f 35ff 	mov.w	r5, #4294967295
 800d474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d476:	07da      	lsls	r2, r3, #31
 800d478:	d405      	bmi.n	800d486 <_puts_r+0x9a>
 800d47a:	89a3      	ldrh	r3, [r4, #12]
 800d47c:	059b      	lsls	r3, r3, #22
 800d47e:	d402      	bmi.n	800d486 <_puts_r+0x9a>
 800d480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d482:	f001 f94f 	bl	800e724 <__retarget_lock_release_recursive>
 800d486:	4628      	mov	r0, r5
 800d488:	bd70      	pop	{r4, r5, r6, pc}
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	da04      	bge.n	800d498 <_puts_r+0xac>
 800d48e:	69a2      	ldr	r2, [r4, #24]
 800d490:	429a      	cmp	r2, r3
 800d492:	dc06      	bgt.n	800d4a2 <_puts_r+0xb6>
 800d494:	290a      	cmp	r1, #10
 800d496:	d004      	beq.n	800d4a2 <_puts_r+0xb6>
 800d498:	6823      	ldr	r3, [r4, #0]
 800d49a:	1c5a      	adds	r2, r3, #1
 800d49c:	6022      	str	r2, [r4, #0]
 800d49e:	7019      	strb	r1, [r3, #0]
 800d4a0:	e7c5      	b.n	800d42e <_puts_r+0x42>
 800d4a2:	4622      	mov	r2, r4
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	f000 f847 	bl	800d538 <__swbuf_r>
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	d1bf      	bne.n	800d42e <_puts_r+0x42>
 800d4ae:	e7df      	b.n	800d470 <_puts_r+0x84>
 800d4b0:	6823      	ldr	r3, [r4, #0]
 800d4b2:	250a      	movs	r5, #10
 800d4b4:	1c5a      	adds	r2, r3, #1
 800d4b6:	6022      	str	r2, [r4, #0]
 800d4b8:	701d      	strb	r5, [r3, #0]
 800d4ba:	e7db      	b.n	800d474 <_puts_r+0x88>
 800d4bc:	080101fc 	.word	0x080101fc
 800d4c0:	0801021c 	.word	0x0801021c
 800d4c4:	080101dc 	.word	0x080101dc

0800d4c8 <puts>:
 800d4c8:	4b02      	ldr	r3, [pc, #8]	; (800d4d4 <puts+0xc>)
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	6818      	ldr	r0, [r3, #0]
 800d4ce:	f7ff bf8d 	b.w	800d3ec <_puts_r>
 800d4d2:	bf00      	nop
 800d4d4:	2000038c 	.word	0x2000038c

0800d4d8 <_sbrk_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	4d06      	ldr	r5, [pc, #24]	; (800d4f4 <_sbrk_r+0x1c>)
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4604      	mov	r4, r0
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	602b      	str	r3, [r5, #0]
 800d4e4:	f7f4 fb1c 	bl	8001b20 <_sbrk>
 800d4e8:	1c43      	adds	r3, r0, #1
 800d4ea:	d102      	bne.n	800d4f2 <_sbrk_r+0x1a>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	b103      	cbz	r3, 800d4f2 <_sbrk_r+0x1a>
 800d4f0:	6023      	str	r3, [r4, #0]
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	200006b4 	.word	0x200006b4

0800d4f8 <_vsiprintf_r>:
 800d4f8:	b500      	push	{lr}
 800d4fa:	b09b      	sub	sp, #108	; 0x6c
 800d4fc:	9100      	str	r1, [sp, #0]
 800d4fe:	9104      	str	r1, [sp, #16]
 800d500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d504:	9105      	str	r1, [sp, #20]
 800d506:	9102      	str	r1, [sp, #8]
 800d508:	4905      	ldr	r1, [pc, #20]	; (800d520 <_vsiprintf_r+0x28>)
 800d50a:	9103      	str	r1, [sp, #12]
 800d50c:	4669      	mov	r1, sp
 800d50e:	f001 fd7b 	bl	800f008 <_svfiprintf_r>
 800d512:	9b00      	ldr	r3, [sp, #0]
 800d514:	2200      	movs	r2, #0
 800d516:	701a      	strb	r2, [r3, #0]
 800d518:	b01b      	add	sp, #108	; 0x6c
 800d51a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d51e:	bf00      	nop
 800d520:	ffff0208 	.word	0xffff0208

0800d524 <vsiprintf>:
 800d524:	4613      	mov	r3, r2
 800d526:	460a      	mov	r2, r1
 800d528:	4601      	mov	r1, r0
 800d52a:	4802      	ldr	r0, [pc, #8]	; (800d534 <vsiprintf+0x10>)
 800d52c:	6800      	ldr	r0, [r0, #0]
 800d52e:	f7ff bfe3 	b.w	800d4f8 <_vsiprintf_r>
 800d532:	bf00      	nop
 800d534:	2000038c 	.word	0x2000038c

0800d538 <__swbuf_r>:
 800d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53a:	460e      	mov	r6, r1
 800d53c:	4614      	mov	r4, r2
 800d53e:	4605      	mov	r5, r0
 800d540:	b118      	cbz	r0, 800d54a <__swbuf_r+0x12>
 800d542:	6983      	ldr	r3, [r0, #24]
 800d544:	b90b      	cbnz	r3, 800d54a <__swbuf_r+0x12>
 800d546:	f001 f849 	bl	800e5dc <__sinit>
 800d54a:	4b21      	ldr	r3, [pc, #132]	; (800d5d0 <__swbuf_r+0x98>)
 800d54c:	429c      	cmp	r4, r3
 800d54e:	d12b      	bne.n	800d5a8 <__swbuf_r+0x70>
 800d550:	686c      	ldr	r4, [r5, #4]
 800d552:	69a3      	ldr	r3, [r4, #24]
 800d554:	60a3      	str	r3, [r4, #8]
 800d556:	89a3      	ldrh	r3, [r4, #12]
 800d558:	071a      	lsls	r2, r3, #28
 800d55a:	d52f      	bpl.n	800d5bc <__swbuf_r+0x84>
 800d55c:	6923      	ldr	r3, [r4, #16]
 800d55e:	b36b      	cbz	r3, 800d5bc <__swbuf_r+0x84>
 800d560:	6923      	ldr	r3, [r4, #16]
 800d562:	6820      	ldr	r0, [r4, #0]
 800d564:	1ac0      	subs	r0, r0, r3
 800d566:	6963      	ldr	r3, [r4, #20]
 800d568:	b2f6      	uxtb	r6, r6
 800d56a:	4283      	cmp	r3, r0
 800d56c:	4637      	mov	r7, r6
 800d56e:	dc04      	bgt.n	800d57a <__swbuf_r+0x42>
 800d570:	4621      	mov	r1, r4
 800d572:	4628      	mov	r0, r5
 800d574:	f000 ff9e 	bl	800e4b4 <_fflush_r>
 800d578:	bb30      	cbnz	r0, 800d5c8 <__swbuf_r+0x90>
 800d57a:	68a3      	ldr	r3, [r4, #8]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	60a3      	str	r3, [r4, #8]
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	6022      	str	r2, [r4, #0]
 800d586:	701e      	strb	r6, [r3, #0]
 800d588:	6963      	ldr	r3, [r4, #20]
 800d58a:	3001      	adds	r0, #1
 800d58c:	4283      	cmp	r3, r0
 800d58e:	d004      	beq.n	800d59a <__swbuf_r+0x62>
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	07db      	lsls	r3, r3, #31
 800d594:	d506      	bpl.n	800d5a4 <__swbuf_r+0x6c>
 800d596:	2e0a      	cmp	r6, #10
 800d598:	d104      	bne.n	800d5a4 <__swbuf_r+0x6c>
 800d59a:	4621      	mov	r1, r4
 800d59c:	4628      	mov	r0, r5
 800d59e:	f000 ff89 	bl	800e4b4 <_fflush_r>
 800d5a2:	b988      	cbnz	r0, 800d5c8 <__swbuf_r+0x90>
 800d5a4:	4638      	mov	r0, r7
 800d5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5a8:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <__swbuf_r+0x9c>)
 800d5aa:	429c      	cmp	r4, r3
 800d5ac:	d101      	bne.n	800d5b2 <__swbuf_r+0x7a>
 800d5ae:	68ac      	ldr	r4, [r5, #8]
 800d5b0:	e7cf      	b.n	800d552 <__swbuf_r+0x1a>
 800d5b2:	4b09      	ldr	r3, [pc, #36]	; (800d5d8 <__swbuf_r+0xa0>)
 800d5b4:	429c      	cmp	r4, r3
 800d5b6:	bf08      	it	eq
 800d5b8:	68ec      	ldreq	r4, [r5, #12]
 800d5ba:	e7ca      	b.n	800d552 <__swbuf_r+0x1a>
 800d5bc:	4621      	mov	r1, r4
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f000 f80c 	bl	800d5dc <__swsetup_r>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d0cb      	beq.n	800d560 <__swbuf_r+0x28>
 800d5c8:	f04f 37ff 	mov.w	r7, #4294967295
 800d5cc:	e7ea      	b.n	800d5a4 <__swbuf_r+0x6c>
 800d5ce:	bf00      	nop
 800d5d0:	080101fc 	.word	0x080101fc
 800d5d4:	0801021c 	.word	0x0801021c
 800d5d8:	080101dc 	.word	0x080101dc

0800d5dc <__swsetup_r>:
 800d5dc:	4b32      	ldr	r3, [pc, #200]	; (800d6a8 <__swsetup_r+0xcc>)
 800d5de:	b570      	push	{r4, r5, r6, lr}
 800d5e0:	681d      	ldr	r5, [r3, #0]
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	460c      	mov	r4, r1
 800d5e6:	b125      	cbz	r5, 800d5f2 <__swsetup_r+0x16>
 800d5e8:	69ab      	ldr	r3, [r5, #24]
 800d5ea:	b913      	cbnz	r3, 800d5f2 <__swsetup_r+0x16>
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	f000 fff5 	bl	800e5dc <__sinit>
 800d5f2:	4b2e      	ldr	r3, [pc, #184]	; (800d6ac <__swsetup_r+0xd0>)
 800d5f4:	429c      	cmp	r4, r3
 800d5f6:	d10f      	bne.n	800d618 <__swsetup_r+0x3c>
 800d5f8:	686c      	ldr	r4, [r5, #4]
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d600:	0719      	lsls	r1, r3, #28
 800d602:	d42c      	bmi.n	800d65e <__swsetup_r+0x82>
 800d604:	06dd      	lsls	r5, r3, #27
 800d606:	d411      	bmi.n	800d62c <__swsetup_r+0x50>
 800d608:	2309      	movs	r3, #9
 800d60a:	6033      	str	r3, [r6, #0]
 800d60c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d610:	81a3      	strh	r3, [r4, #12]
 800d612:	f04f 30ff 	mov.w	r0, #4294967295
 800d616:	e03e      	b.n	800d696 <__swsetup_r+0xba>
 800d618:	4b25      	ldr	r3, [pc, #148]	; (800d6b0 <__swsetup_r+0xd4>)
 800d61a:	429c      	cmp	r4, r3
 800d61c:	d101      	bne.n	800d622 <__swsetup_r+0x46>
 800d61e:	68ac      	ldr	r4, [r5, #8]
 800d620:	e7eb      	b.n	800d5fa <__swsetup_r+0x1e>
 800d622:	4b24      	ldr	r3, [pc, #144]	; (800d6b4 <__swsetup_r+0xd8>)
 800d624:	429c      	cmp	r4, r3
 800d626:	bf08      	it	eq
 800d628:	68ec      	ldreq	r4, [r5, #12]
 800d62a:	e7e6      	b.n	800d5fa <__swsetup_r+0x1e>
 800d62c:	0758      	lsls	r0, r3, #29
 800d62e:	d512      	bpl.n	800d656 <__swsetup_r+0x7a>
 800d630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d632:	b141      	cbz	r1, 800d646 <__swsetup_r+0x6a>
 800d634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d638:	4299      	cmp	r1, r3
 800d63a:	d002      	beq.n	800d642 <__swsetup_r+0x66>
 800d63c:	4630      	mov	r0, r6
 800d63e:	f7ff f993 	bl	800c968 <_free_r>
 800d642:	2300      	movs	r3, #0
 800d644:	6363      	str	r3, [r4, #52]	; 0x34
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d64c:	81a3      	strh	r3, [r4, #12]
 800d64e:	2300      	movs	r3, #0
 800d650:	6063      	str	r3, [r4, #4]
 800d652:	6923      	ldr	r3, [r4, #16]
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f043 0308 	orr.w	r3, r3, #8
 800d65c:	81a3      	strh	r3, [r4, #12]
 800d65e:	6923      	ldr	r3, [r4, #16]
 800d660:	b94b      	cbnz	r3, 800d676 <__swsetup_r+0x9a>
 800d662:	89a3      	ldrh	r3, [r4, #12]
 800d664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d66c:	d003      	beq.n	800d676 <__swsetup_r+0x9a>
 800d66e:	4621      	mov	r1, r4
 800d670:	4630      	mov	r0, r6
 800d672:	f001 f87d 	bl	800e770 <__smakebuf_r>
 800d676:	89a0      	ldrh	r0, [r4, #12]
 800d678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d67c:	f010 0301 	ands.w	r3, r0, #1
 800d680:	d00a      	beq.n	800d698 <__swsetup_r+0xbc>
 800d682:	2300      	movs	r3, #0
 800d684:	60a3      	str	r3, [r4, #8]
 800d686:	6963      	ldr	r3, [r4, #20]
 800d688:	425b      	negs	r3, r3
 800d68a:	61a3      	str	r3, [r4, #24]
 800d68c:	6923      	ldr	r3, [r4, #16]
 800d68e:	b943      	cbnz	r3, 800d6a2 <__swsetup_r+0xc6>
 800d690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d694:	d1ba      	bne.n	800d60c <__swsetup_r+0x30>
 800d696:	bd70      	pop	{r4, r5, r6, pc}
 800d698:	0781      	lsls	r1, r0, #30
 800d69a:	bf58      	it	pl
 800d69c:	6963      	ldrpl	r3, [r4, #20]
 800d69e:	60a3      	str	r3, [r4, #8]
 800d6a0:	e7f4      	b.n	800d68c <__swsetup_r+0xb0>
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	e7f7      	b.n	800d696 <__swsetup_r+0xba>
 800d6a6:	bf00      	nop
 800d6a8:	2000038c 	.word	0x2000038c
 800d6ac:	080101fc 	.word	0x080101fc
 800d6b0:	0801021c 	.word	0x0801021c
 800d6b4:	080101dc 	.word	0x080101dc

0800d6b8 <quorem>:
 800d6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	6903      	ldr	r3, [r0, #16]
 800d6be:	690c      	ldr	r4, [r1, #16]
 800d6c0:	42a3      	cmp	r3, r4
 800d6c2:	4607      	mov	r7, r0
 800d6c4:	f2c0 8081 	blt.w	800d7ca <quorem+0x112>
 800d6c8:	3c01      	subs	r4, #1
 800d6ca:	f101 0814 	add.w	r8, r1, #20
 800d6ce:	f100 0514 	add.w	r5, r0, #20
 800d6d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6d6:	9301      	str	r3, [sp, #4]
 800d6d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d6dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d6e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d6ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800d6f0:	d331      	bcc.n	800d756 <quorem+0x9e>
 800d6f2:	f04f 0e00 	mov.w	lr, #0
 800d6f6:	4640      	mov	r0, r8
 800d6f8:	46ac      	mov	ip, r5
 800d6fa:	46f2      	mov	sl, lr
 800d6fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d700:	b293      	uxth	r3, r2
 800d702:	fb06 e303 	mla	r3, r6, r3, lr
 800d706:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	ebaa 0303 	sub.w	r3, sl, r3
 800d710:	0c12      	lsrs	r2, r2, #16
 800d712:	f8dc a000 	ldr.w	sl, [ip]
 800d716:	fb06 e202 	mla	r2, r6, r2, lr
 800d71a:	fa13 f38a 	uxtah	r3, r3, sl
 800d71e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d722:	fa1f fa82 	uxth.w	sl, r2
 800d726:	f8dc 2000 	ldr.w	r2, [ip]
 800d72a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d72e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d732:	b29b      	uxth	r3, r3
 800d734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d738:	4581      	cmp	r9, r0
 800d73a:	f84c 3b04 	str.w	r3, [ip], #4
 800d73e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d742:	d2db      	bcs.n	800d6fc <quorem+0x44>
 800d744:	f855 300b 	ldr.w	r3, [r5, fp]
 800d748:	b92b      	cbnz	r3, 800d756 <quorem+0x9e>
 800d74a:	9b01      	ldr	r3, [sp, #4]
 800d74c:	3b04      	subs	r3, #4
 800d74e:	429d      	cmp	r5, r3
 800d750:	461a      	mov	r2, r3
 800d752:	d32e      	bcc.n	800d7b2 <quorem+0xfa>
 800d754:	613c      	str	r4, [r7, #16]
 800d756:	4638      	mov	r0, r7
 800d758:	f001 fad4 	bl	800ed04 <__mcmp>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	db24      	blt.n	800d7aa <quorem+0xf2>
 800d760:	3601      	adds	r6, #1
 800d762:	4628      	mov	r0, r5
 800d764:	f04f 0c00 	mov.w	ip, #0
 800d768:	f858 2b04 	ldr.w	r2, [r8], #4
 800d76c:	f8d0 e000 	ldr.w	lr, [r0]
 800d770:	b293      	uxth	r3, r2
 800d772:	ebac 0303 	sub.w	r3, ip, r3
 800d776:	0c12      	lsrs	r2, r2, #16
 800d778:	fa13 f38e 	uxtah	r3, r3, lr
 800d77c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d780:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d784:	b29b      	uxth	r3, r3
 800d786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d78a:	45c1      	cmp	r9, r8
 800d78c:	f840 3b04 	str.w	r3, [r0], #4
 800d790:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d794:	d2e8      	bcs.n	800d768 <quorem+0xb0>
 800d796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d79a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d79e:	b922      	cbnz	r2, 800d7aa <quorem+0xf2>
 800d7a0:	3b04      	subs	r3, #4
 800d7a2:	429d      	cmp	r5, r3
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	d30a      	bcc.n	800d7be <quorem+0x106>
 800d7a8:	613c      	str	r4, [r7, #16]
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	b003      	add	sp, #12
 800d7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b2:	6812      	ldr	r2, [r2, #0]
 800d7b4:	3b04      	subs	r3, #4
 800d7b6:	2a00      	cmp	r2, #0
 800d7b8:	d1cc      	bne.n	800d754 <quorem+0x9c>
 800d7ba:	3c01      	subs	r4, #1
 800d7bc:	e7c7      	b.n	800d74e <quorem+0x96>
 800d7be:	6812      	ldr	r2, [r2, #0]
 800d7c0:	3b04      	subs	r3, #4
 800d7c2:	2a00      	cmp	r2, #0
 800d7c4:	d1f0      	bne.n	800d7a8 <quorem+0xf0>
 800d7c6:	3c01      	subs	r4, #1
 800d7c8:	e7eb      	b.n	800d7a2 <quorem+0xea>
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	e7ee      	b.n	800d7ac <quorem+0xf4>
	...

0800d7d0 <_dtoa_r>:
 800d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	ed2d 8b02 	vpush	{d8}
 800d7d8:	ec57 6b10 	vmov	r6, r7, d0
 800d7dc:	b095      	sub	sp, #84	; 0x54
 800d7de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d7e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d7e4:	9105      	str	r1, [sp, #20]
 800d7e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d7ea:	4604      	mov	r4, r0
 800d7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d7ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7f0:	b975      	cbnz	r5, 800d810 <_dtoa_r+0x40>
 800d7f2:	2010      	movs	r0, #16
 800d7f4:	f7ff f882 	bl	800c8fc <malloc>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	6260      	str	r0, [r4, #36]	; 0x24
 800d7fc:	b920      	cbnz	r0, 800d808 <_dtoa_r+0x38>
 800d7fe:	4bb2      	ldr	r3, [pc, #712]	; (800dac8 <_dtoa_r+0x2f8>)
 800d800:	21ea      	movs	r1, #234	; 0xea
 800d802:	48b2      	ldr	r0, [pc, #712]	; (800dacc <_dtoa_r+0x2fc>)
 800d804:	f001 fef8 	bl	800f5f8 <__assert_func>
 800d808:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d80c:	6005      	str	r5, [r0, #0]
 800d80e:	60c5      	str	r5, [r0, #12]
 800d810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d812:	6819      	ldr	r1, [r3, #0]
 800d814:	b151      	cbz	r1, 800d82c <_dtoa_r+0x5c>
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	604a      	str	r2, [r1, #4]
 800d81a:	2301      	movs	r3, #1
 800d81c:	4093      	lsls	r3, r2
 800d81e:	608b      	str	r3, [r1, #8]
 800d820:	4620      	mov	r0, r4
 800d822:	f001 f831 	bl	800e888 <_Bfree>
 800d826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d828:	2200      	movs	r2, #0
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	1e3b      	subs	r3, r7, #0
 800d82e:	bfb9      	ittee	lt
 800d830:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d834:	9303      	strlt	r3, [sp, #12]
 800d836:	2300      	movge	r3, #0
 800d838:	f8c8 3000 	strge.w	r3, [r8]
 800d83c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d840:	4ba3      	ldr	r3, [pc, #652]	; (800dad0 <_dtoa_r+0x300>)
 800d842:	bfbc      	itt	lt
 800d844:	2201      	movlt	r2, #1
 800d846:	f8c8 2000 	strlt.w	r2, [r8]
 800d84a:	ea33 0309 	bics.w	r3, r3, r9
 800d84e:	d11b      	bne.n	800d888 <_dtoa_r+0xb8>
 800d850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d852:	f242 730f 	movw	r3, #9999	; 0x270f
 800d856:	6013      	str	r3, [r2, #0]
 800d858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d85c:	4333      	orrs	r3, r6
 800d85e:	f000 857a 	beq.w	800e356 <_dtoa_r+0xb86>
 800d862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d864:	b963      	cbnz	r3, 800d880 <_dtoa_r+0xb0>
 800d866:	4b9b      	ldr	r3, [pc, #620]	; (800dad4 <_dtoa_r+0x304>)
 800d868:	e024      	b.n	800d8b4 <_dtoa_r+0xe4>
 800d86a:	4b9b      	ldr	r3, [pc, #620]	; (800dad8 <_dtoa_r+0x308>)
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	3308      	adds	r3, #8
 800d870:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d872:	6013      	str	r3, [r2, #0]
 800d874:	9800      	ldr	r0, [sp, #0]
 800d876:	b015      	add	sp, #84	; 0x54
 800d878:	ecbd 8b02 	vpop	{d8}
 800d87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d880:	4b94      	ldr	r3, [pc, #592]	; (800dad4 <_dtoa_r+0x304>)
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	3303      	adds	r3, #3
 800d886:	e7f3      	b.n	800d870 <_dtoa_r+0xa0>
 800d888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d88c:	2200      	movs	r2, #0
 800d88e:	ec51 0b17 	vmov	r0, r1, d7
 800d892:	2300      	movs	r3, #0
 800d894:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d898:	f7f3 f91e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d89c:	4680      	mov	r8, r0
 800d89e:	b158      	cbz	r0, 800d8b8 <_dtoa_r+0xe8>
 800d8a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 8551 	beq.w	800e350 <_dtoa_r+0xb80>
 800d8ae:	488b      	ldr	r0, [pc, #556]	; (800dadc <_dtoa_r+0x30c>)
 800d8b0:	6018      	str	r0, [r3, #0]
 800d8b2:	1e43      	subs	r3, r0, #1
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	e7dd      	b.n	800d874 <_dtoa_r+0xa4>
 800d8b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d8bc:	aa12      	add	r2, sp, #72	; 0x48
 800d8be:	a913      	add	r1, sp, #76	; 0x4c
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f001 fac3 	bl	800ee4c <__d2b>
 800d8c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8ca:	4683      	mov	fp, r0
 800d8cc:	2d00      	cmp	r5, #0
 800d8ce:	d07c      	beq.n	800d9ca <_dtoa_r+0x1fa>
 800d8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d8d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d8de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d8e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d8e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d8ea:	4b7d      	ldr	r3, [pc, #500]	; (800dae0 <_dtoa_r+0x310>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	4639      	mov	r1, r7
 800d8f2:	f7f2 fcd1 	bl	8000298 <__aeabi_dsub>
 800d8f6:	a36e      	add	r3, pc, #440	; (adr r3, 800dab0 <_dtoa_r+0x2e0>)
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	f7f2 fe84 	bl	8000608 <__aeabi_dmul>
 800d900:	a36d      	add	r3, pc, #436	; (adr r3, 800dab8 <_dtoa_r+0x2e8>)
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	f7f2 fcc9 	bl	800029c <__adddf3>
 800d90a:	4606      	mov	r6, r0
 800d90c:	4628      	mov	r0, r5
 800d90e:	460f      	mov	r7, r1
 800d910:	f7f2 fe10 	bl	8000534 <__aeabi_i2d>
 800d914:	a36a      	add	r3, pc, #424	; (adr r3, 800dac0 <_dtoa_r+0x2f0>)
 800d916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91a:	f7f2 fe75 	bl	8000608 <__aeabi_dmul>
 800d91e:	4602      	mov	r2, r0
 800d920:	460b      	mov	r3, r1
 800d922:	4630      	mov	r0, r6
 800d924:	4639      	mov	r1, r7
 800d926:	f7f2 fcb9 	bl	800029c <__adddf3>
 800d92a:	4606      	mov	r6, r0
 800d92c:	460f      	mov	r7, r1
 800d92e:	f7f3 f91b 	bl	8000b68 <__aeabi_d2iz>
 800d932:	2200      	movs	r2, #0
 800d934:	4682      	mov	sl, r0
 800d936:	2300      	movs	r3, #0
 800d938:	4630      	mov	r0, r6
 800d93a:	4639      	mov	r1, r7
 800d93c:	f7f3 f8d6 	bl	8000aec <__aeabi_dcmplt>
 800d940:	b148      	cbz	r0, 800d956 <_dtoa_r+0x186>
 800d942:	4650      	mov	r0, sl
 800d944:	f7f2 fdf6 	bl	8000534 <__aeabi_i2d>
 800d948:	4632      	mov	r2, r6
 800d94a:	463b      	mov	r3, r7
 800d94c:	f7f3 f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d950:	b908      	cbnz	r0, 800d956 <_dtoa_r+0x186>
 800d952:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d956:	f1ba 0f16 	cmp.w	sl, #22
 800d95a:	d854      	bhi.n	800da06 <_dtoa_r+0x236>
 800d95c:	4b61      	ldr	r3, [pc, #388]	; (800dae4 <_dtoa_r+0x314>)
 800d95e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d966:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d96a:	f7f3 f8bf 	bl	8000aec <__aeabi_dcmplt>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d04b      	beq.n	800da0a <_dtoa_r+0x23a>
 800d972:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d976:	2300      	movs	r3, #0
 800d978:	930e      	str	r3, [sp, #56]	; 0x38
 800d97a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d97c:	1b5d      	subs	r5, r3, r5
 800d97e:	1e6b      	subs	r3, r5, #1
 800d980:	9304      	str	r3, [sp, #16]
 800d982:	bf43      	ittte	mi
 800d984:	2300      	movmi	r3, #0
 800d986:	f1c5 0801 	rsbmi	r8, r5, #1
 800d98a:	9304      	strmi	r3, [sp, #16]
 800d98c:	f04f 0800 	movpl.w	r8, #0
 800d990:	f1ba 0f00 	cmp.w	sl, #0
 800d994:	db3b      	blt.n	800da0e <_dtoa_r+0x23e>
 800d996:	9b04      	ldr	r3, [sp, #16]
 800d998:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d99c:	4453      	add	r3, sl
 800d99e:	9304      	str	r3, [sp, #16]
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	9306      	str	r3, [sp, #24]
 800d9a4:	9b05      	ldr	r3, [sp, #20]
 800d9a6:	2b09      	cmp	r3, #9
 800d9a8:	d869      	bhi.n	800da7e <_dtoa_r+0x2ae>
 800d9aa:	2b05      	cmp	r3, #5
 800d9ac:	bfc4      	itt	gt
 800d9ae:	3b04      	subgt	r3, #4
 800d9b0:	9305      	strgt	r3, [sp, #20]
 800d9b2:	9b05      	ldr	r3, [sp, #20]
 800d9b4:	f1a3 0302 	sub.w	r3, r3, #2
 800d9b8:	bfcc      	ite	gt
 800d9ba:	2500      	movgt	r5, #0
 800d9bc:	2501      	movle	r5, #1
 800d9be:	2b03      	cmp	r3, #3
 800d9c0:	d869      	bhi.n	800da96 <_dtoa_r+0x2c6>
 800d9c2:	e8df f003 	tbb	[pc, r3]
 800d9c6:	4e2c      	.short	0x4e2c
 800d9c8:	5a4c      	.short	0x5a4c
 800d9ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d9ce:	441d      	add	r5, r3
 800d9d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d9d4:	2b20      	cmp	r3, #32
 800d9d6:	bfc1      	itttt	gt
 800d9d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d9dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d9e0:	fa09 f303 	lslgt.w	r3, r9, r3
 800d9e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d9e8:	bfda      	itte	le
 800d9ea:	f1c3 0320 	rsble	r3, r3, #32
 800d9ee:	fa06 f003 	lslle.w	r0, r6, r3
 800d9f2:	4318      	orrgt	r0, r3
 800d9f4:	f7f2 fd8e 	bl	8000514 <__aeabi_ui2d>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800da00:	3d01      	subs	r5, #1
 800da02:	9310      	str	r3, [sp, #64]	; 0x40
 800da04:	e771      	b.n	800d8ea <_dtoa_r+0x11a>
 800da06:	2301      	movs	r3, #1
 800da08:	e7b6      	b.n	800d978 <_dtoa_r+0x1a8>
 800da0a:	900e      	str	r0, [sp, #56]	; 0x38
 800da0c:	e7b5      	b.n	800d97a <_dtoa_r+0x1aa>
 800da0e:	f1ca 0300 	rsb	r3, sl, #0
 800da12:	9306      	str	r3, [sp, #24]
 800da14:	2300      	movs	r3, #0
 800da16:	eba8 080a 	sub.w	r8, r8, sl
 800da1a:	930d      	str	r3, [sp, #52]	; 0x34
 800da1c:	e7c2      	b.n	800d9a4 <_dtoa_r+0x1d4>
 800da1e:	2300      	movs	r3, #0
 800da20:	9308      	str	r3, [sp, #32]
 800da22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da24:	2b00      	cmp	r3, #0
 800da26:	dc39      	bgt.n	800da9c <_dtoa_r+0x2cc>
 800da28:	f04f 0901 	mov.w	r9, #1
 800da2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800da30:	464b      	mov	r3, r9
 800da32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800da36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da38:	2200      	movs	r2, #0
 800da3a:	6042      	str	r2, [r0, #4]
 800da3c:	2204      	movs	r2, #4
 800da3e:	f102 0614 	add.w	r6, r2, #20
 800da42:	429e      	cmp	r6, r3
 800da44:	6841      	ldr	r1, [r0, #4]
 800da46:	d92f      	bls.n	800daa8 <_dtoa_r+0x2d8>
 800da48:	4620      	mov	r0, r4
 800da4a:	f000 fedd 	bl	800e808 <_Balloc>
 800da4e:	9000      	str	r0, [sp, #0]
 800da50:	2800      	cmp	r0, #0
 800da52:	d14b      	bne.n	800daec <_dtoa_r+0x31c>
 800da54:	4b24      	ldr	r3, [pc, #144]	; (800dae8 <_dtoa_r+0x318>)
 800da56:	4602      	mov	r2, r0
 800da58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da5c:	e6d1      	b.n	800d802 <_dtoa_r+0x32>
 800da5e:	2301      	movs	r3, #1
 800da60:	e7de      	b.n	800da20 <_dtoa_r+0x250>
 800da62:	2300      	movs	r3, #0
 800da64:	9308      	str	r3, [sp, #32]
 800da66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da68:	eb0a 0903 	add.w	r9, sl, r3
 800da6c:	f109 0301 	add.w	r3, r9, #1
 800da70:	2b01      	cmp	r3, #1
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	bfb8      	it	lt
 800da76:	2301      	movlt	r3, #1
 800da78:	e7dd      	b.n	800da36 <_dtoa_r+0x266>
 800da7a:	2301      	movs	r3, #1
 800da7c:	e7f2      	b.n	800da64 <_dtoa_r+0x294>
 800da7e:	2501      	movs	r5, #1
 800da80:	2300      	movs	r3, #0
 800da82:	9305      	str	r3, [sp, #20]
 800da84:	9508      	str	r5, [sp, #32]
 800da86:	f04f 39ff 	mov.w	r9, #4294967295
 800da8a:	2200      	movs	r2, #0
 800da8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800da90:	2312      	movs	r3, #18
 800da92:	9209      	str	r2, [sp, #36]	; 0x24
 800da94:	e7cf      	b.n	800da36 <_dtoa_r+0x266>
 800da96:	2301      	movs	r3, #1
 800da98:	9308      	str	r3, [sp, #32]
 800da9a:	e7f4      	b.n	800da86 <_dtoa_r+0x2b6>
 800da9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800daa0:	f8cd 9004 	str.w	r9, [sp, #4]
 800daa4:	464b      	mov	r3, r9
 800daa6:	e7c6      	b.n	800da36 <_dtoa_r+0x266>
 800daa8:	3101      	adds	r1, #1
 800daaa:	6041      	str	r1, [r0, #4]
 800daac:	0052      	lsls	r2, r2, #1
 800daae:	e7c6      	b.n	800da3e <_dtoa_r+0x26e>
 800dab0:	636f4361 	.word	0x636f4361
 800dab4:	3fd287a7 	.word	0x3fd287a7
 800dab8:	8b60c8b3 	.word	0x8b60c8b3
 800dabc:	3fc68a28 	.word	0x3fc68a28
 800dac0:	509f79fb 	.word	0x509f79fb
 800dac4:	3fd34413 	.word	0x3fd34413
 800dac8:	08010155 	.word	0x08010155
 800dacc:	0801016c 	.word	0x0801016c
 800dad0:	7ff00000 	.word	0x7ff00000
 800dad4:	08010151 	.word	0x08010151
 800dad8:	08010148 	.word	0x08010148
 800dadc:	08010125 	.word	0x08010125
 800dae0:	3ff80000 	.word	0x3ff80000
 800dae4:	080102c8 	.word	0x080102c8
 800dae8:	080101cb 	.word	0x080101cb
 800daec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daee:	9a00      	ldr	r2, [sp, #0]
 800daf0:	601a      	str	r2, [r3, #0]
 800daf2:	9b01      	ldr	r3, [sp, #4]
 800daf4:	2b0e      	cmp	r3, #14
 800daf6:	f200 80ad 	bhi.w	800dc54 <_dtoa_r+0x484>
 800dafa:	2d00      	cmp	r5, #0
 800dafc:	f000 80aa 	beq.w	800dc54 <_dtoa_r+0x484>
 800db00:	f1ba 0f00 	cmp.w	sl, #0
 800db04:	dd36      	ble.n	800db74 <_dtoa_r+0x3a4>
 800db06:	4ac3      	ldr	r2, [pc, #780]	; (800de14 <_dtoa_r+0x644>)
 800db08:	f00a 030f 	and.w	r3, sl, #15
 800db0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800db10:	ed93 7b00 	vldr	d7, [r3]
 800db14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800db18:	ea4f 172a 	mov.w	r7, sl, asr #4
 800db1c:	eeb0 8a47 	vmov.f32	s16, s14
 800db20:	eef0 8a67 	vmov.f32	s17, s15
 800db24:	d016      	beq.n	800db54 <_dtoa_r+0x384>
 800db26:	4bbc      	ldr	r3, [pc, #752]	; (800de18 <_dtoa_r+0x648>)
 800db28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db30:	f7f2 fe94 	bl	800085c <__aeabi_ddiv>
 800db34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db38:	f007 070f 	and.w	r7, r7, #15
 800db3c:	2503      	movs	r5, #3
 800db3e:	4eb6      	ldr	r6, [pc, #728]	; (800de18 <_dtoa_r+0x648>)
 800db40:	b957      	cbnz	r7, 800db58 <_dtoa_r+0x388>
 800db42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db46:	ec53 2b18 	vmov	r2, r3, d8
 800db4a:	f7f2 fe87 	bl	800085c <__aeabi_ddiv>
 800db4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db52:	e029      	b.n	800dba8 <_dtoa_r+0x3d8>
 800db54:	2502      	movs	r5, #2
 800db56:	e7f2      	b.n	800db3e <_dtoa_r+0x36e>
 800db58:	07f9      	lsls	r1, r7, #31
 800db5a:	d508      	bpl.n	800db6e <_dtoa_r+0x39e>
 800db5c:	ec51 0b18 	vmov	r0, r1, d8
 800db60:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db64:	f7f2 fd50 	bl	8000608 <__aeabi_dmul>
 800db68:	ec41 0b18 	vmov	d8, r0, r1
 800db6c:	3501      	adds	r5, #1
 800db6e:	107f      	asrs	r7, r7, #1
 800db70:	3608      	adds	r6, #8
 800db72:	e7e5      	b.n	800db40 <_dtoa_r+0x370>
 800db74:	f000 80a6 	beq.w	800dcc4 <_dtoa_r+0x4f4>
 800db78:	f1ca 0600 	rsb	r6, sl, #0
 800db7c:	4ba5      	ldr	r3, [pc, #660]	; (800de14 <_dtoa_r+0x644>)
 800db7e:	4fa6      	ldr	r7, [pc, #664]	; (800de18 <_dtoa_r+0x648>)
 800db80:	f006 020f 	and.w	r2, r6, #15
 800db84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db90:	f7f2 fd3a 	bl	8000608 <__aeabi_dmul>
 800db94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db98:	1136      	asrs	r6, r6, #4
 800db9a:	2300      	movs	r3, #0
 800db9c:	2502      	movs	r5, #2
 800db9e:	2e00      	cmp	r6, #0
 800dba0:	f040 8085 	bne.w	800dcae <_dtoa_r+0x4de>
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1d2      	bne.n	800db4e <_dtoa_r+0x37e>
 800dba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f000 808c 	beq.w	800dcc8 <_dtoa_r+0x4f8>
 800dbb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dbb4:	4b99      	ldr	r3, [pc, #612]	; (800de1c <_dtoa_r+0x64c>)
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	4630      	mov	r0, r6
 800dbba:	4639      	mov	r1, r7
 800dbbc:	f7f2 ff96 	bl	8000aec <__aeabi_dcmplt>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	f000 8081 	beq.w	800dcc8 <_dtoa_r+0x4f8>
 800dbc6:	9b01      	ldr	r3, [sp, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d07d      	beq.n	800dcc8 <_dtoa_r+0x4f8>
 800dbcc:	f1b9 0f00 	cmp.w	r9, #0
 800dbd0:	dd3c      	ble.n	800dc4c <_dtoa_r+0x47c>
 800dbd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dbd6:	9307      	str	r3, [sp, #28]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	4b91      	ldr	r3, [pc, #580]	; (800de20 <_dtoa_r+0x650>)
 800dbdc:	4630      	mov	r0, r6
 800dbde:	4639      	mov	r1, r7
 800dbe0:	f7f2 fd12 	bl	8000608 <__aeabi_dmul>
 800dbe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbe8:	3501      	adds	r5, #1
 800dbea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dbee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f7f2 fc9e 	bl	8000534 <__aeabi_i2d>
 800dbf8:	4632      	mov	r2, r6
 800dbfa:	463b      	mov	r3, r7
 800dbfc:	f7f2 fd04 	bl	8000608 <__aeabi_dmul>
 800dc00:	4b88      	ldr	r3, [pc, #544]	; (800de24 <_dtoa_r+0x654>)
 800dc02:	2200      	movs	r2, #0
 800dc04:	f7f2 fb4a 	bl	800029c <__adddf3>
 800dc08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc10:	9303      	str	r3, [sp, #12]
 800dc12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d15c      	bne.n	800dcd2 <_dtoa_r+0x502>
 800dc18:	4b83      	ldr	r3, [pc, #524]	; (800de28 <_dtoa_r+0x658>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	4639      	mov	r1, r7
 800dc20:	f7f2 fb3a 	bl	8000298 <__aeabi_dsub>
 800dc24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc28:	4606      	mov	r6, r0
 800dc2a:	460f      	mov	r7, r1
 800dc2c:	f7f2 ff7c 	bl	8000b28 <__aeabi_dcmpgt>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	f040 8296 	bne.w	800e162 <_dtoa_r+0x992>
 800dc36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc40:	4639      	mov	r1, r7
 800dc42:	f7f2 ff53 	bl	8000aec <__aeabi_dcmplt>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	f040 8288 	bne.w	800e15c <_dtoa_r+0x98c>
 800dc4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dc50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f2c0 8158 	blt.w	800df0c <_dtoa_r+0x73c>
 800dc5c:	f1ba 0f0e 	cmp.w	sl, #14
 800dc60:	f300 8154 	bgt.w	800df0c <_dtoa_r+0x73c>
 800dc64:	4b6b      	ldr	r3, [pc, #428]	; (800de14 <_dtoa_r+0x644>)
 800dc66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f280 80e3 	bge.w	800de3c <_dtoa_r+0x66c>
 800dc76:	9b01      	ldr	r3, [sp, #4]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f300 80df 	bgt.w	800de3c <_dtoa_r+0x66c>
 800dc7e:	f040 826d 	bne.w	800e15c <_dtoa_r+0x98c>
 800dc82:	4b69      	ldr	r3, [pc, #420]	; (800de28 <_dtoa_r+0x658>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	4640      	mov	r0, r8
 800dc88:	4649      	mov	r1, r9
 800dc8a:	f7f2 fcbd 	bl	8000608 <__aeabi_dmul>
 800dc8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc92:	f7f2 ff3f 	bl	8000b14 <__aeabi_dcmpge>
 800dc96:	9e01      	ldr	r6, [sp, #4]
 800dc98:	4637      	mov	r7, r6
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	f040 8243 	bne.w	800e126 <_dtoa_r+0x956>
 800dca0:	9d00      	ldr	r5, [sp, #0]
 800dca2:	2331      	movs	r3, #49	; 0x31
 800dca4:	f805 3b01 	strb.w	r3, [r5], #1
 800dca8:	f10a 0a01 	add.w	sl, sl, #1
 800dcac:	e23f      	b.n	800e12e <_dtoa_r+0x95e>
 800dcae:	07f2      	lsls	r2, r6, #31
 800dcb0:	d505      	bpl.n	800dcbe <_dtoa_r+0x4ee>
 800dcb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcb6:	f7f2 fca7 	bl	8000608 <__aeabi_dmul>
 800dcba:	3501      	adds	r5, #1
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	1076      	asrs	r6, r6, #1
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	e76c      	b.n	800db9e <_dtoa_r+0x3ce>
 800dcc4:	2502      	movs	r5, #2
 800dcc6:	e76f      	b.n	800dba8 <_dtoa_r+0x3d8>
 800dcc8:	9b01      	ldr	r3, [sp, #4]
 800dcca:	f8cd a01c 	str.w	sl, [sp, #28]
 800dcce:	930c      	str	r3, [sp, #48]	; 0x30
 800dcd0:	e78d      	b.n	800dbee <_dtoa_r+0x41e>
 800dcd2:	9900      	ldr	r1, [sp, #0]
 800dcd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dcd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcd8:	4b4e      	ldr	r3, [pc, #312]	; (800de14 <_dtoa_r+0x644>)
 800dcda:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcde:	4401      	add	r1, r0
 800dce0:	9102      	str	r1, [sp, #8]
 800dce2:	9908      	ldr	r1, [sp, #32]
 800dce4:	eeb0 8a47 	vmov.f32	s16, s14
 800dce8:	eef0 8a67 	vmov.f32	s17, s15
 800dcec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dcf4:	2900      	cmp	r1, #0
 800dcf6:	d045      	beq.n	800dd84 <_dtoa_r+0x5b4>
 800dcf8:	494c      	ldr	r1, [pc, #304]	; (800de2c <_dtoa_r+0x65c>)
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	f7f2 fdae 	bl	800085c <__aeabi_ddiv>
 800dd00:	ec53 2b18 	vmov	r2, r3, d8
 800dd04:	f7f2 fac8 	bl	8000298 <__aeabi_dsub>
 800dd08:	9d00      	ldr	r5, [sp, #0]
 800dd0a:	ec41 0b18 	vmov	d8, r0, r1
 800dd0e:	4639      	mov	r1, r7
 800dd10:	4630      	mov	r0, r6
 800dd12:	f7f2 ff29 	bl	8000b68 <__aeabi_d2iz>
 800dd16:	900c      	str	r0, [sp, #48]	; 0x30
 800dd18:	f7f2 fc0c 	bl	8000534 <__aeabi_i2d>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	4630      	mov	r0, r6
 800dd22:	4639      	mov	r1, r7
 800dd24:	f7f2 fab8 	bl	8000298 <__aeabi_dsub>
 800dd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd2a:	3330      	adds	r3, #48	; 0x30
 800dd2c:	f805 3b01 	strb.w	r3, [r5], #1
 800dd30:	ec53 2b18 	vmov	r2, r3, d8
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	f7f2 fed8 	bl	8000aec <__aeabi_dcmplt>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	d165      	bne.n	800de0c <_dtoa_r+0x63c>
 800dd40:	4632      	mov	r2, r6
 800dd42:	463b      	mov	r3, r7
 800dd44:	4935      	ldr	r1, [pc, #212]	; (800de1c <_dtoa_r+0x64c>)
 800dd46:	2000      	movs	r0, #0
 800dd48:	f7f2 faa6 	bl	8000298 <__aeabi_dsub>
 800dd4c:	ec53 2b18 	vmov	r2, r3, d8
 800dd50:	f7f2 fecc 	bl	8000aec <__aeabi_dcmplt>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	f040 80b9 	bne.w	800decc <_dtoa_r+0x6fc>
 800dd5a:	9b02      	ldr	r3, [sp, #8]
 800dd5c:	429d      	cmp	r5, r3
 800dd5e:	f43f af75 	beq.w	800dc4c <_dtoa_r+0x47c>
 800dd62:	4b2f      	ldr	r3, [pc, #188]	; (800de20 <_dtoa_r+0x650>)
 800dd64:	ec51 0b18 	vmov	r0, r1, d8
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f7f2 fc4d 	bl	8000608 <__aeabi_dmul>
 800dd6e:	4b2c      	ldr	r3, [pc, #176]	; (800de20 <_dtoa_r+0x650>)
 800dd70:	ec41 0b18 	vmov	d8, r0, r1
 800dd74:	2200      	movs	r2, #0
 800dd76:	4630      	mov	r0, r6
 800dd78:	4639      	mov	r1, r7
 800dd7a:	f7f2 fc45 	bl	8000608 <__aeabi_dmul>
 800dd7e:	4606      	mov	r6, r0
 800dd80:	460f      	mov	r7, r1
 800dd82:	e7c4      	b.n	800dd0e <_dtoa_r+0x53e>
 800dd84:	ec51 0b17 	vmov	r0, r1, d7
 800dd88:	f7f2 fc3e 	bl	8000608 <__aeabi_dmul>
 800dd8c:	9b02      	ldr	r3, [sp, #8]
 800dd8e:	9d00      	ldr	r5, [sp, #0]
 800dd90:	930c      	str	r3, [sp, #48]	; 0x30
 800dd92:	ec41 0b18 	vmov	d8, r0, r1
 800dd96:	4639      	mov	r1, r7
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f7f2 fee5 	bl	8000b68 <__aeabi_d2iz>
 800dd9e:	9011      	str	r0, [sp, #68]	; 0x44
 800dda0:	f7f2 fbc8 	bl	8000534 <__aeabi_i2d>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4630      	mov	r0, r6
 800ddaa:	4639      	mov	r1, r7
 800ddac:	f7f2 fa74 	bl	8000298 <__aeabi_dsub>
 800ddb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddb2:	3330      	adds	r3, #48	; 0x30
 800ddb4:	f805 3b01 	strb.w	r3, [r5], #1
 800ddb8:	9b02      	ldr	r3, [sp, #8]
 800ddba:	429d      	cmp	r5, r3
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	460f      	mov	r7, r1
 800ddc0:	f04f 0200 	mov.w	r2, #0
 800ddc4:	d134      	bne.n	800de30 <_dtoa_r+0x660>
 800ddc6:	4b19      	ldr	r3, [pc, #100]	; (800de2c <_dtoa_r+0x65c>)
 800ddc8:	ec51 0b18 	vmov	r0, r1, d8
 800ddcc:	f7f2 fa66 	bl	800029c <__adddf3>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	4639      	mov	r1, r7
 800ddd8:	f7f2 fea6 	bl	8000b28 <__aeabi_dcmpgt>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d175      	bne.n	800decc <_dtoa_r+0x6fc>
 800dde0:	ec53 2b18 	vmov	r2, r3, d8
 800dde4:	4911      	ldr	r1, [pc, #68]	; (800de2c <_dtoa_r+0x65c>)
 800dde6:	2000      	movs	r0, #0
 800dde8:	f7f2 fa56 	bl	8000298 <__aeabi_dsub>
 800ddec:	4602      	mov	r2, r0
 800ddee:	460b      	mov	r3, r1
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	4639      	mov	r1, r7
 800ddf4:	f7f2 fe7a 	bl	8000aec <__aeabi_dcmplt>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	f43f af27 	beq.w	800dc4c <_dtoa_r+0x47c>
 800ddfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de00:	1e6b      	subs	r3, r5, #1
 800de02:	930c      	str	r3, [sp, #48]	; 0x30
 800de04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de08:	2b30      	cmp	r3, #48	; 0x30
 800de0a:	d0f8      	beq.n	800ddfe <_dtoa_r+0x62e>
 800de0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800de10:	e04a      	b.n	800dea8 <_dtoa_r+0x6d8>
 800de12:	bf00      	nop
 800de14:	080102c8 	.word	0x080102c8
 800de18:	080102a0 	.word	0x080102a0
 800de1c:	3ff00000 	.word	0x3ff00000
 800de20:	40240000 	.word	0x40240000
 800de24:	401c0000 	.word	0x401c0000
 800de28:	40140000 	.word	0x40140000
 800de2c:	3fe00000 	.word	0x3fe00000
 800de30:	4baf      	ldr	r3, [pc, #700]	; (800e0f0 <_dtoa_r+0x920>)
 800de32:	f7f2 fbe9 	bl	8000608 <__aeabi_dmul>
 800de36:	4606      	mov	r6, r0
 800de38:	460f      	mov	r7, r1
 800de3a:	e7ac      	b.n	800dd96 <_dtoa_r+0x5c6>
 800de3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de40:	9d00      	ldr	r5, [sp, #0]
 800de42:	4642      	mov	r2, r8
 800de44:	464b      	mov	r3, r9
 800de46:	4630      	mov	r0, r6
 800de48:	4639      	mov	r1, r7
 800de4a:	f7f2 fd07 	bl	800085c <__aeabi_ddiv>
 800de4e:	f7f2 fe8b 	bl	8000b68 <__aeabi_d2iz>
 800de52:	9002      	str	r0, [sp, #8]
 800de54:	f7f2 fb6e 	bl	8000534 <__aeabi_i2d>
 800de58:	4642      	mov	r2, r8
 800de5a:	464b      	mov	r3, r9
 800de5c:	f7f2 fbd4 	bl	8000608 <__aeabi_dmul>
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	4630      	mov	r0, r6
 800de66:	4639      	mov	r1, r7
 800de68:	f7f2 fa16 	bl	8000298 <__aeabi_dsub>
 800de6c:	9e02      	ldr	r6, [sp, #8]
 800de6e:	9f01      	ldr	r7, [sp, #4]
 800de70:	3630      	adds	r6, #48	; 0x30
 800de72:	f805 6b01 	strb.w	r6, [r5], #1
 800de76:	9e00      	ldr	r6, [sp, #0]
 800de78:	1bae      	subs	r6, r5, r6
 800de7a:	42b7      	cmp	r7, r6
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	d137      	bne.n	800def2 <_dtoa_r+0x722>
 800de82:	f7f2 fa0b 	bl	800029c <__adddf3>
 800de86:	4642      	mov	r2, r8
 800de88:	464b      	mov	r3, r9
 800de8a:	4606      	mov	r6, r0
 800de8c:	460f      	mov	r7, r1
 800de8e:	f7f2 fe4b 	bl	8000b28 <__aeabi_dcmpgt>
 800de92:	b9c8      	cbnz	r0, 800dec8 <_dtoa_r+0x6f8>
 800de94:	4642      	mov	r2, r8
 800de96:	464b      	mov	r3, r9
 800de98:	4630      	mov	r0, r6
 800de9a:	4639      	mov	r1, r7
 800de9c:	f7f2 fe1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800dea0:	b110      	cbz	r0, 800dea8 <_dtoa_r+0x6d8>
 800dea2:	9b02      	ldr	r3, [sp, #8]
 800dea4:	07d9      	lsls	r1, r3, #31
 800dea6:	d40f      	bmi.n	800dec8 <_dtoa_r+0x6f8>
 800dea8:	4620      	mov	r0, r4
 800deaa:	4659      	mov	r1, fp
 800deac:	f000 fcec 	bl	800e888 <_Bfree>
 800deb0:	2300      	movs	r3, #0
 800deb2:	702b      	strb	r3, [r5, #0]
 800deb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800deb6:	f10a 0001 	add.w	r0, sl, #1
 800deba:	6018      	str	r0, [r3, #0]
 800debc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f43f acd8 	beq.w	800d874 <_dtoa_r+0xa4>
 800dec4:	601d      	str	r5, [r3, #0]
 800dec6:	e4d5      	b.n	800d874 <_dtoa_r+0xa4>
 800dec8:	f8cd a01c 	str.w	sl, [sp, #28]
 800decc:	462b      	mov	r3, r5
 800dece:	461d      	mov	r5, r3
 800ded0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ded4:	2a39      	cmp	r2, #57	; 0x39
 800ded6:	d108      	bne.n	800deea <_dtoa_r+0x71a>
 800ded8:	9a00      	ldr	r2, [sp, #0]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d1f7      	bne.n	800dece <_dtoa_r+0x6fe>
 800dede:	9a07      	ldr	r2, [sp, #28]
 800dee0:	9900      	ldr	r1, [sp, #0]
 800dee2:	3201      	adds	r2, #1
 800dee4:	9207      	str	r2, [sp, #28]
 800dee6:	2230      	movs	r2, #48	; 0x30
 800dee8:	700a      	strb	r2, [r1, #0]
 800deea:	781a      	ldrb	r2, [r3, #0]
 800deec:	3201      	adds	r2, #1
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e78c      	b.n	800de0c <_dtoa_r+0x63c>
 800def2:	4b7f      	ldr	r3, [pc, #508]	; (800e0f0 <_dtoa_r+0x920>)
 800def4:	2200      	movs	r2, #0
 800def6:	f7f2 fb87 	bl	8000608 <__aeabi_dmul>
 800defa:	2200      	movs	r2, #0
 800defc:	2300      	movs	r3, #0
 800defe:	4606      	mov	r6, r0
 800df00:	460f      	mov	r7, r1
 800df02:	f7f2 fde9 	bl	8000ad8 <__aeabi_dcmpeq>
 800df06:	2800      	cmp	r0, #0
 800df08:	d09b      	beq.n	800de42 <_dtoa_r+0x672>
 800df0a:	e7cd      	b.n	800dea8 <_dtoa_r+0x6d8>
 800df0c:	9a08      	ldr	r2, [sp, #32]
 800df0e:	2a00      	cmp	r2, #0
 800df10:	f000 80c4 	beq.w	800e09c <_dtoa_r+0x8cc>
 800df14:	9a05      	ldr	r2, [sp, #20]
 800df16:	2a01      	cmp	r2, #1
 800df18:	f300 80a8 	bgt.w	800e06c <_dtoa_r+0x89c>
 800df1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df1e:	2a00      	cmp	r2, #0
 800df20:	f000 80a0 	beq.w	800e064 <_dtoa_r+0x894>
 800df24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df28:	9e06      	ldr	r6, [sp, #24]
 800df2a:	4645      	mov	r5, r8
 800df2c:	9a04      	ldr	r2, [sp, #16]
 800df2e:	2101      	movs	r1, #1
 800df30:	441a      	add	r2, r3
 800df32:	4620      	mov	r0, r4
 800df34:	4498      	add	r8, r3
 800df36:	9204      	str	r2, [sp, #16]
 800df38:	f000 fd62 	bl	800ea00 <__i2b>
 800df3c:	4607      	mov	r7, r0
 800df3e:	2d00      	cmp	r5, #0
 800df40:	dd0b      	ble.n	800df5a <_dtoa_r+0x78a>
 800df42:	9b04      	ldr	r3, [sp, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	dd08      	ble.n	800df5a <_dtoa_r+0x78a>
 800df48:	42ab      	cmp	r3, r5
 800df4a:	9a04      	ldr	r2, [sp, #16]
 800df4c:	bfa8      	it	ge
 800df4e:	462b      	movge	r3, r5
 800df50:	eba8 0803 	sub.w	r8, r8, r3
 800df54:	1aed      	subs	r5, r5, r3
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	9304      	str	r3, [sp, #16]
 800df5a:	9b06      	ldr	r3, [sp, #24]
 800df5c:	b1fb      	cbz	r3, 800df9e <_dtoa_r+0x7ce>
 800df5e:	9b08      	ldr	r3, [sp, #32]
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 809f 	beq.w	800e0a4 <_dtoa_r+0x8d4>
 800df66:	2e00      	cmp	r6, #0
 800df68:	dd11      	ble.n	800df8e <_dtoa_r+0x7be>
 800df6a:	4639      	mov	r1, r7
 800df6c:	4632      	mov	r2, r6
 800df6e:	4620      	mov	r0, r4
 800df70:	f000 fe02 	bl	800eb78 <__pow5mult>
 800df74:	465a      	mov	r2, fp
 800df76:	4601      	mov	r1, r0
 800df78:	4607      	mov	r7, r0
 800df7a:	4620      	mov	r0, r4
 800df7c:	f000 fd56 	bl	800ea2c <__multiply>
 800df80:	4659      	mov	r1, fp
 800df82:	9007      	str	r0, [sp, #28]
 800df84:	4620      	mov	r0, r4
 800df86:	f000 fc7f 	bl	800e888 <_Bfree>
 800df8a:	9b07      	ldr	r3, [sp, #28]
 800df8c:	469b      	mov	fp, r3
 800df8e:	9b06      	ldr	r3, [sp, #24]
 800df90:	1b9a      	subs	r2, r3, r6
 800df92:	d004      	beq.n	800df9e <_dtoa_r+0x7ce>
 800df94:	4659      	mov	r1, fp
 800df96:	4620      	mov	r0, r4
 800df98:	f000 fdee 	bl	800eb78 <__pow5mult>
 800df9c:	4683      	mov	fp, r0
 800df9e:	2101      	movs	r1, #1
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f000 fd2d 	bl	800ea00 <__i2b>
 800dfa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	4606      	mov	r6, r0
 800dfac:	dd7c      	ble.n	800e0a8 <_dtoa_r+0x8d8>
 800dfae:	461a      	mov	r2, r3
 800dfb0:	4601      	mov	r1, r0
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f000 fde0 	bl	800eb78 <__pow5mult>
 800dfb8:	9b05      	ldr	r3, [sp, #20]
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	dd76      	ble.n	800e0ae <_dtoa_r+0x8de>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	9306      	str	r3, [sp, #24]
 800dfc4:	6933      	ldr	r3, [r6, #16]
 800dfc6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dfca:	6918      	ldr	r0, [r3, #16]
 800dfcc:	f000 fcc8 	bl	800e960 <__hi0bits>
 800dfd0:	f1c0 0020 	rsb	r0, r0, #32
 800dfd4:	9b04      	ldr	r3, [sp, #16]
 800dfd6:	4418      	add	r0, r3
 800dfd8:	f010 001f 	ands.w	r0, r0, #31
 800dfdc:	f000 8086 	beq.w	800e0ec <_dtoa_r+0x91c>
 800dfe0:	f1c0 0320 	rsb	r3, r0, #32
 800dfe4:	2b04      	cmp	r3, #4
 800dfe6:	dd7f      	ble.n	800e0e8 <_dtoa_r+0x918>
 800dfe8:	f1c0 001c 	rsb	r0, r0, #28
 800dfec:	9b04      	ldr	r3, [sp, #16]
 800dfee:	4403      	add	r3, r0
 800dff0:	4480      	add	r8, r0
 800dff2:	4405      	add	r5, r0
 800dff4:	9304      	str	r3, [sp, #16]
 800dff6:	f1b8 0f00 	cmp.w	r8, #0
 800dffa:	dd05      	ble.n	800e008 <_dtoa_r+0x838>
 800dffc:	4659      	mov	r1, fp
 800dffe:	4642      	mov	r2, r8
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fe13 	bl	800ec2c <__lshift>
 800e006:	4683      	mov	fp, r0
 800e008:	9b04      	ldr	r3, [sp, #16]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	dd05      	ble.n	800e01a <_dtoa_r+0x84a>
 800e00e:	4631      	mov	r1, r6
 800e010:	461a      	mov	r2, r3
 800e012:	4620      	mov	r0, r4
 800e014:	f000 fe0a 	bl	800ec2c <__lshift>
 800e018:	4606      	mov	r6, r0
 800e01a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d069      	beq.n	800e0f4 <_dtoa_r+0x924>
 800e020:	4631      	mov	r1, r6
 800e022:	4658      	mov	r0, fp
 800e024:	f000 fe6e 	bl	800ed04 <__mcmp>
 800e028:	2800      	cmp	r0, #0
 800e02a:	da63      	bge.n	800e0f4 <_dtoa_r+0x924>
 800e02c:	2300      	movs	r3, #0
 800e02e:	4659      	mov	r1, fp
 800e030:	220a      	movs	r2, #10
 800e032:	4620      	mov	r0, r4
 800e034:	f000 fc4a 	bl	800e8cc <__multadd>
 800e038:	9b08      	ldr	r3, [sp, #32]
 800e03a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e03e:	4683      	mov	fp, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 818f 	beq.w	800e364 <_dtoa_r+0xb94>
 800e046:	4639      	mov	r1, r7
 800e048:	2300      	movs	r3, #0
 800e04a:	220a      	movs	r2, #10
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 fc3d 	bl	800e8cc <__multadd>
 800e052:	f1b9 0f00 	cmp.w	r9, #0
 800e056:	4607      	mov	r7, r0
 800e058:	f300 808e 	bgt.w	800e178 <_dtoa_r+0x9a8>
 800e05c:	9b05      	ldr	r3, [sp, #20]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	dc50      	bgt.n	800e104 <_dtoa_r+0x934>
 800e062:	e089      	b.n	800e178 <_dtoa_r+0x9a8>
 800e064:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e06a:	e75d      	b.n	800df28 <_dtoa_r+0x758>
 800e06c:	9b01      	ldr	r3, [sp, #4]
 800e06e:	1e5e      	subs	r6, r3, #1
 800e070:	9b06      	ldr	r3, [sp, #24]
 800e072:	42b3      	cmp	r3, r6
 800e074:	bfbf      	itttt	lt
 800e076:	9b06      	ldrlt	r3, [sp, #24]
 800e078:	9606      	strlt	r6, [sp, #24]
 800e07a:	1af2      	sublt	r2, r6, r3
 800e07c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e07e:	bfb6      	itet	lt
 800e080:	189b      	addlt	r3, r3, r2
 800e082:	1b9e      	subge	r6, r3, r6
 800e084:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e086:	9b01      	ldr	r3, [sp, #4]
 800e088:	bfb8      	it	lt
 800e08a:	2600      	movlt	r6, #0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	bfb5      	itete	lt
 800e090:	eba8 0503 	sublt.w	r5, r8, r3
 800e094:	9b01      	ldrge	r3, [sp, #4]
 800e096:	2300      	movlt	r3, #0
 800e098:	4645      	movge	r5, r8
 800e09a:	e747      	b.n	800df2c <_dtoa_r+0x75c>
 800e09c:	9e06      	ldr	r6, [sp, #24]
 800e09e:	9f08      	ldr	r7, [sp, #32]
 800e0a0:	4645      	mov	r5, r8
 800e0a2:	e74c      	b.n	800df3e <_dtoa_r+0x76e>
 800e0a4:	9a06      	ldr	r2, [sp, #24]
 800e0a6:	e775      	b.n	800df94 <_dtoa_r+0x7c4>
 800e0a8:	9b05      	ldr	r3, [sp, #20]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	dc18      	bgt.n	800e0e0 <_dtoa_r+0x910>
 800e0ae:	9b02      	ldr	r3, [sp, #8]
 800e0b0:	b9b3      	cbnz	r3, 800e0e0 <_dtoa_r+0x910>
 800e0b2:	9b03      	ldr	r3, [sp, #12]
 800e0b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0b8:	b9a3      	cbnz	r3, 800e0e4 <_dtoa_r+0x914>
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0c0:	0d1b      	lsrs	r3, r3, #20
 800e0c2:	051b      	lsls	r3, r3, #20
 800e0c4:	b12b      	cbz	r3, 800e0d2 <_dtoa_r+0x902>
 800e0c6:	9b04      	ldr	r3, [sp, #16]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	9304      	str	r3, [sp, #16]
 800e0cc:	f108 0801 	add.w	r8, r8, #1
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	9306      	str	r3, [sp, #24]
 800e0d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f47f af74 	bne.w	800dfc4 <_dtoa_r+0x7f4>
 800e0dc:	2001      	movs	r0, #1
 800e0de:	e779      	b.n	800dfd4 <_dtoa_r+0x804>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e7f6      	b.n	800e0d2 <_dtoa_r+0x902>
 800e0e4:	9b02      	ldr	r3, [sp, #8]
 800e0e6:	e7f4      	b.n	800e0d2 <_dtoa_r+0x902>
 800e0e8:	d085      	beq.n	800dff6 <_dtoa_r+0x826>
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	301c      	adds	r0, #28
 800e0ee:	e77d      	b.n	800dfec <_dtoa_r+0x81c>
 800e0f0:	40240000 	.word	0x40240000
 800e0f4:	9b01      	ldr	r3, [sp, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	dc38      	bgt.n	800e16c <_dtoa_r+0x99c>
 800e0fa:	9b05      	ldr	r3, [sp, #20]
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	dd35      	ble.n	800e16c <_dtoa_r+0x99c>
 800e100:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e104:	f1b9 0f00 	cmp.w	r9, #0
 800e108:	d10d      	bne.n	800e126 <_dtoa_r+0x956>
 800e10a:	4631      	mov	r1, r6
 800e10c:	464b      	mov	r3, r9
 800e10e:	2205      	movs	r2, #5
 800e110:	4620      	mov	r0, r4
 800e112:	f000 fbdb 	bl	800e8cc <__multadd>
 800e116:	4601      	mov	r1, r0
 800e118:	4606      	mov	r6, r0
 800e11a:	4658      	mov	r0, fp
 800e11c:	f000 fdf2 	bl	800ed04 <__mcmp>
 800e120:	2800      	cmp	r0, #0
 800e122:	f73f adbd 	bgt.w	800dca0 <_dtoa_r+0x4d0>
 800e126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e128:	9d00      	ldr	r5, [sp, #0]
 800e12a:	ea6f 0a03 	mvn.w	sl, r3
 800e12e:	f04f 0800 	mov.w	r8, #0
 800e132:	4631      	mov	r1, r6
 800e134:	4620      	mov	r0, r4
 800e136:	f000 fba7 	bl	800e888 <_Bfree>
 800e13a:	2f00      	cmp	r7, #0
 800e13c:	f43f aeb4 	beq.w	800dea8 <_dtoa_r+0x6d8>
 800e140:	f1b8 0f00 	cmp.w	r8, #0
 800e144:	d005      	beq.n	800e152 <_dtoa_r+0x982>
 800e146:	45b8      	cmp	r8, r7
 800e148:	d003      	beq.n	800e152 <_dtoa_r+0x982>
 800e14a:	4641      	mov	r1, r8
 800e14c:	4620      	mov	r0, r4
 800e14e:	f000 fb9b 	bl	800e888 <_Bfree>
 800e152:	4639      	mov	r1, r7
 800e154:	4620      	mov	r0, r4
 800e156:	f000 fb97 	bl	800e888 <_Bfree>
 800e15a:	e6a5      	b.n	800dea8 <_dtoa_r+0x6d8>
 800e15c:	2600      	movs	r6, #0
 800e15e:	4637      	mov	r7, r6
 800e160:	e7e1      	b.n	800e126 <_dtoa_r+0x956>
 800e162:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e164:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e168:	4637      	mov	r7, r6
 800e16a:	e599      	b.n	800dca0 <_dtoa_r+0x4d0>
 800e16c:	9b08      	ldr	r3, [sp, #32]
 800e16e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f000 80fd 	beq.w	800e372 <_dtoa_r+0xba2>
 800e178:	2d00      	cmp	r5, #0
 800e17a:	dd05      	ble.n	800e188 <_dtoa_r+0x9b8>
 800e17c:	4639      	mov	r1, r7
 800e17e:	462a      	mov	r2, r5
 800e180:	4620      	mov	r0, r4
 800e182:	f000 fd53 	bl	800ec2c <__lshift>
 800e186:	4607      	mov	r7, r0
 800e188:	9b06      	ldr	r3, [sp, #24]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d05c      	beq.n	800e248 <_dtoa_r+0xa78>
 800e18e:	6879      	ldr	r1, [r7, #4]
 800e190:	4620      	mov	r0, r4
 800e192:	f000 fb39 	bl	800e808 <_Balloc>
 800e196:	4605      	mov	r5, r0
 800e198:	b928      	cbnz	r0, 800e1a6 <_dtoa_r+0x9d6>
 800e19a:	4b80      	ldr	r3, [pc, #512]	; (800e39c <_dtoa_r+0xbcc>)
 800e19c:	4602      	mov	r2, r0
 800e19e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e1a2:	f7ff bb2e 	b.w	800d802 <_dtoa_r+0x32>
 800e1a6:	693a      	ldr	r2, [r7, #16]
 800e1a8:	3202      	adds	r2, #2
 800e1aa:	0092      	lsls	r2, r2, #2
 800e1ac:	f107 010c 	add.w	r1, r7, #12
 800e1b0:	300c      	adds	r0, #12
 800e1b2:	f7fe fbb3 	bl	800c91c <memcpy>
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	4629      	mov	r1, r5
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f000 fd36 	bl	800ec2c <__lshift>
 800e1c0:	9b00      	ldr	r3, [sp, #0]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	9301      	str	r3, [sp, #4]
 800e1c6:	9b00      	ldr	r3, [sp, #0]
 800e1c8:	444b      	add	r3, r9
 800e1ca:	9307      	str	r3, [sp, #28]
 800e1cc:	9b02      	ldr	r3, [sp, #8]
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	46b8      	mov	r8, r7
 800e1d4:	9306      	str	r3, [sp, #24]
 800e1d6:	4607      	mov	r7, r0
 800e1d8:	9b01      	ldr	r3, [sp, #4]
 800e1da:	4631      	mov	r1, r6
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	4658      	mov	r0, fp
 800e1e0:	9302      	str	r3, [sp, #8]
 800e1e2:	f7ff fa69 	bl	800d6b8 <quorem>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	3330      	adds	r3, #48	; 0x30
 800e1ea:	9004      	str	r0, [sp, #16]
 800e1ec:	4641      	mov	r1, r8
 800e1ee:	4658      	mov	r0, fp
 800e1f0:	9308      	str	r3, [sp, #32]
 800e1f2:	f000 fd87 	bl	800ed04 <__mcmp>
 800e1f6:	463a      	mov	r2, r7
 800e1f8:	4681      	mov	r9, r0
 800e1fa:	4631      	mov	r1, r6
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f000 fd9d 	bl	800ed3c <__mdiff>
 800e202:	68c2      	ldr	r2, [r0, #12]
 800e204:	9b08      	ldr	r3, [sp, #32]
 800e206:	4605      	mov	r5, r0
 800e208:	bb02      	cbnz	r2, 800e24c <_dtoa_r+0xa7c>
 800e20a:	4601      	mov	r1, r0
 800e20c:	4658      	mov	r0, fp
 800e20e:	f000 fd79 	bl	800ed04 <__mcmp>
 800e212:	9b08      	ldr	r3, [sp, #32]
 800e214:	4602      	mov	r2, r0
 800e216:	4629      	mov	r1, r5
 800e218:	4620      	mov	r0, r4
 800e21a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e21e:	f000 fb33 	bl	800e888 <_Bfree>
 800e222:	9b05      	ldr	r3, [sp, #20]
 800e224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e226:	9d01      	ldr	r5, [sp, #4]
 800e228:	ea43 0102 	orr.w	r1, r3, r2
 800e22c:	9b06      	ldr	r3, [sp, #24]
 800e22e:	430b      	orrs	r3, r1
 800e230:	9b08      	ldr	r3, [sp, #32]
 800e232:	d10d      	bne.n	800e250 <_dtoa_r+0xa80>
 800e234:	2b39      	cmp	r3, #57	; 0x39
 800e236:	d029      	beq.n	800e28c <_dtoa_r+0xabc>
 800e238:	f1b9 0f00 	cmp.w	r9, #0
 800e23c:	dd01      	ble.n	800e242 <_dtoa_r+0xa72>
 800e23e:	9b04      	ldr	r3, [sp, #16]
 800e240:	3331      	adds	r3, #49	; 0x31
 800e242:	9a02      	ldr	r2, [sp, #8]
 800e244:	7013      	strb	r3, [r2, #0]
 800e246:	e774      	b.n	800e132 <_dtoa_r+0x962>
 800e248:	4638      	mov	r0, r7
 800e24a:	e7b9      	b.n	800e1c0 <_dtoa_r+0x9f0>
 800e24c:	2201      	movs	r2, #1
 800e24e:	e7e2      	b.n	800e216 <_dtoa_r+0xa46>
 800e250:	f1b9 0f00 	cmp.w	r9, #0
 800e254:	db06      	blt.n	800e264 <_dtoa_r+0xa94>
 800e256:	9905      	ldr	r1, [sp, #20]
 800e258:	ea41 0909 	orr.w	r9, r1, r9
 800e25c:	9906      	ldr	r1, [sp, #24]
 800e25e:	ea59 0101 	orrs.w	r1, r9, r1
 800e262:	d120      	bne.n	800e2a6 <_dtoa_r+0xad6>
 800e264:	2a00      	cmp	r2, #0
 800e266:	ddec      	ble.n	800e242 <_dtoa_r+0xa72>
 800e268:	4659      	mov	r1, fp
 800e26a:	2201      	movs	r2, #1
 800e26c:	4620      	mov	r0, r4
 800e26e:	9301      	str	r3, [sp, #4]
 800e270:	f000 fcdc 	bl	800ec2c <__lshift>
 800e274:	4631      	mov	r1, r6
 800e276:	4683      	mov	fp, r0
 800e278:	f000 fd44 	bl	800ed04 <__mcmp>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	9b01      	ldr	r3, [sp, #4]
 800e280:	dc02      	bgt.n	800e288 <_dtoa_r+0xab8>
 800e282:	d1de      	bne.n	800e242 <_dtoa_r+0xa72>
 800e284:	07da      	lsls	r2, r3, #31
 800e286:	d5dc      	bpl.n	800e242 <_dtoa_r+0xa72>
 800e288:	2b39      	cmp	r3, #57	; 0x39
 800e28a:	d1d8      	bne.n	800e23e <_dtoa_r+0xa6e>
 800e28c:	9a02      	ldr	r2, [sp, #8]
 800e28e:	2339      	movs	r3, #57	; 0x39
 800e290:	7013      	strb	r3, [r2, #0]
 800e292:	462b      	mov	r3, r5
 800e294:	461d      	mov	r5, r3
 800e296:	3b01      	subs	r3, #1
 800e298:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e29c:	2a39      	cmp	r2, #57	; 0x39
 800e29e:	d050      	beq.n	800e342 <_dtoa_r+0xb72>
 800e2a0:	3201      	adds	r2, #1
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	e745      	b.n	800e132 <_dtoa_r+0x962>
 800e2a6:	2a00      	cmp	r2, #0
 800e2a8:	dd03      	ble.n	800e2b2 <_dtoa_r+0xae2>
 800e2aa:	2b39      	cmp	r3, #57	; 0x39
 800e2ac:	d0ee      	beq.n	800e28c <_dtoa_r+0xabc>
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	e7c7      	b.n	800e242 <_dtoa_r+0xa72>
 800e2b2:	9a01      	ldr	r2, [sp, #4]
 800e2b4:	9907      	ldr	r1, [sp, #28]
 800e2b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e2ba:	428a      	cmp	r2, r1
 800e2bc:	d02a      	beq.n	800e314 <_dtoa_r+0xb44>
 800e2be:	4659      	mov	r1, fp
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	220a      	movs	r2, #10
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 fb01 	bl	800e8cc <__multadd>
 800e2ca:	45b8      	cmp	r8, r7
 800e2cc:	4683      	mov	fp, r0
 800e2ce:	f04f 0300 	mov.w	r3, #0
 800e2d2:	f04f 020a 	mov.w	r2, #10
 800e2d6:	4641      	mov	r1, r8
 800e2d8:	4620      	mov	r0, r4
 800e2da:	d107      	bne.n	800e2ec <_dtoa_r+0xb1c>
 800e2dc:	f000 faf6 	bl	800e8cc <__multadd>
 800e2e0:	4680      	mov	r8, r0
 800e2e2:	4607      	mov	r7, r0
 800e2e4:	9b01      	ldr	r3, [sp, #4]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	9301      	str	r3, [sp, #4]
 800e2ea:	e775      	b.n	800e1d8 <_dtoa_r+0xa08>
 800e2ec:	f000 faee 	bl	800e8cc <__multadd>
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	4680      	mov	r8, r0
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	220a      	movs	r2, #10
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f000 fae7 	bl	800e8cc <__multadd>
 800e2fe:	4607      	mov	r7, r0
 800e300:	e7f0      	b.n	800e2e4 <_dtoa_r+0xb14>
 800e302:	f1b9 0f00 	cmp.w	r9, #0
 800e306:	9a00      	ldr	r2, [sp, #0]
 800e308:	bfcc      	ite	gt
 800e30a:	464d      	movgt	r5, r9
 800e30c:	2501      	movle	r5, #1
 800e30e:	4415      	add	r5, r2
 800e310:	f04f 0800 	mov.w	r8, #0
 800e314:	4659      	mov	r1, fp
 800e316:	2201      	movs	r2, #1
 800e318:	4620      	mov	r0, r4
 800e31a:	9301      	str	r3, [sp, #4]
 800e31c:	f000 fc86 	bl	800ec2c <__lshift>
 800e320:	4631      	mov	r1, r6
 800e322:	4683      	mov	fp, r0
 800e324:	f000 fcee 	bl	800ed04 <__mcmp>
 800e328:	2800      	cmp	r0, #0
 800e32a:	dcb2      	bgt.n	800e292 <_dtoa_r+0xac2>
 800e32c:	d102      	bne.n	800e334 <_dtoa_r+0xb64>
 800e32e:	9b01      	ldr	r3, [sp, #4]
 800e330:	07db      	lsls	r3, r3, #31
 800e332:	d4ae      	bmi.n	800e292 <_dtoa_r+0xac2>
 800e334:	462b      	mov	r3, r5
 800e336:	461d      	mov	r5, r3
 800e338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e33c:	2a30      	cmp	r2, #48	; 0x30
 800e33e:	d0fa      	beq.n	800e336 <_dtoa_r+0xb66>
 800e340:	e6f7      	b.n	800e132 <_dtoa_r+0x962>
 800e342:	9a00      	ldr	r2, [sp, #0]
 800e344:	429a      	cmp	r2, r3
 800e346:	d1a5      	bne.n	800e294 <_dtoa_r+0xac4>
 800e348:	f10a 0a01 	add.w	sl, sl, #1
 800e34c:	2331      	movs	r3, #49	; 0x31
 800e34e:	e779      	b.n	800e244 <_dtoa_r+0xa74>
 800e350:	4b13      	ldr	r3, [pc, #76]	; (800e3a0 <_dtoa_r+0xbd0>)
 800e352:	f7ff baaf 	b.w	800d8b4 <_dtoa_r+0xe4>
 800e356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f47f aa86 	bne.w	800d86a <_dtoa_r+0x9a>
 800e35e:	4b11      	ldr	r3, [pc, #68]	; (800e3a4 <_dtoa_r+0xbd4>)
 800e360:	f7ff baa8 	b.w	800d8b4 <_dtoa_r+0xe4>
 800e364:	f1b9 0f00 	cmp.w	r9, #0
 800e368:	dc03      	bgt.n	800e372 <_dtoa_r+0xba2>
 800e36a:	9b05      	ldr	r3, [sp, #20]
 800e36c:	2b02      	cmp	r3, #2
 800e36e:	f73f aec9 	bgt.w	800e104 <_dtoa_r+0x934>
 800e372:	9d00      	ldr	r5, [sp, #0]
 800e374:	4631      	mov	r1, r6
 800e376:	4658      	mov	r0, fp
 800e378:	f7ff f99e 	bl	800d6b8 <quorem>
 800e37c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e380:	f805 3b01 	strb.w	r3, [r5], #1
 800e384:	9a00      	ldr	r2, [sp, #0]
 800e386:	1aaa      	subs	r2, r5, r2
 800e388:	4591      	cmp	r9, r2
 800e38a:	ddba      	ble.n	800e302 <_dtoa_r+0xb32>
 800e38c:	4659      	mov	r1, fp
 800e38e:	2300      	movs	r3, #0
 800e390:	220a      	movs	r2, #10
 800e392:	4620      	mov	r0, r4
 800e394:	f000 fa9a 	bl	800e8cc <__multadd>
 800e398:	4683      	mov	fp, r0
 800e39a:	e7eb      	b.n	800e374 <_dtoa_r+0xba4>
 800e39c:	080101cb 	.word	0x080101cb
 800e3a0:	08010124 	.word	0x08010124
 800e3a4:	08010148 	.word	0x08010148

0800e3a8 <__sflush_r>:
 800e3a8:	898a      	ldrh	r2, [r1, #12]
 800e3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ae:	4605      	mov	r5, r0
 800e3b0:	0710      	lsls	r0, r2, #28
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	d458      	bmi.n	800e468 <__sflush_r+0xc0>
 800e3b6:	684b      	ldr	r3, [r1, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	dc05      	bgt.n	800e3c8 <__sflush_r+0x20>
 800e3bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	dc02      	bgt.n	800e3c8 <__sflush_r+0x20>
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3ca:	2e00      	cmp	r6, #0
 800e3cc:	d0f9      	beq.n	800e3c2 <__sflush_r+0x1a>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3d4:	682f      	ldr	r7, [r5, #0]
 800e3d6:	602b      	str	r3, [r5, #0]
 800e3d8:	d032      	beq.n	800e440 <__sflush_r+0x98>
 800e3da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3dc:	89a3      	ldrh	r3, [r4, #12]
 800e3de:	075a      	lsls	r2, r3, #29
 800e3e0:	d505      	bpl.n	800e3ee <__sflush_r+0x46>
 800e3e2:	6863      	ldr	r3, [r4, #4]
 800e3e4:	1ac0      	subs	r0, r0, r3
 800e3e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3e8:	b10b      	cbz	r3, 800e3ee <__sflush_r+0x46>
 800e3ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3ec:	1ac0      	subs	r0, r0, r3
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3f4:	6a21      	ldr	r1, [r4, #32]
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	47b0      	blx	r6
 800e3fa:	1c43      	adds	r3, r0, #1
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	d106      	bne.n	800e40e <__sflush_r+0x66>
 800e400:	6829      	ldr	r1, [r5, #0]
 800e402:	291d      	cmp	r1, #29
 800e404:	d82c      	bhi.n	800e460 <__sflush_r+0xb8>
 800e406:	4a2a      	ldr	r2, [pc, #168]	; (800e4b0 <__sflush_r+0x108>)
 800e408:	40ca      	lsrs	r2, r1
 800e40a:	07d6      	lsls	r6, r2, #31
 800e40c:	d528      	bpl.n	800e460 <__sflush_r+0xb8>
 800e40e:	2200      	movs	r2, #0
 800e410:	6062      	str	r2, [r4, #4]
 800e412:	04d9      	lsls	r1, r3, #19
 800e414:	6922      	ldr	r2, [r4, #16]
 800e416:	6022      	str	r2, [r4, #0]
 800e418:	d504      	bpl.n	800e424 <__sflush_r+0x7c>
 800e41a:	1c42      	adds	r2, r0, #1
 800e41c:	d101      	bne.n	800e422 <__sflush_r+0x7a>
 800e41e:	682b      	ldr	r3, [r5, #0]
 800e420:	b903      	cbnz	r3, 800e424 <__sflush_r+0x7c>
 800e422:	6560      	str	r0, [r4, #84]	; 0x54
 800e424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e426:	602f      	str	r7, [r5, #0]
 800e428:	2900      	cmp	r1, #0
 800e42a:	d0ca      	beq.n	800e3c2 <__sflush_r+0x1a>
 800e42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e430:	4299      	cmp	r1, r3
 800e432:	d002      	beq.n	800e43a <__sflush_r+0x92>
 800e434:	4628      	mov	r0, r5
 800e436:	f7fe fa97 	bl	800c968 <_free_r>
 800e43a:	2000      	movs	r0, #0
 800e43c:	6360      	str	r0, [r4, #52]	; 0x34
 800e43e:	e7c1      	b.n	800e3c4 <__sflush_r+0x1c>
 800e440:	6a21      	ldr	r1, [r4, #32]
 800e442:	2301      	movs	r3, #1
 800e444:	4628      	mov	r0, r5
 800e446:	47b0      	blx	r6
 800e448:	1c41      	adds	r1, r0, #1
 800e44a:	d1c7      	bne.n	800e3dc <__sflush_r+0x34>
 800e44c:	682b      	ldr	r3, [r5, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d0c4      	beq.n	800e3dc <__sflush_r+0x34>
 800e452:	2b1d      	cmp	r3, #29
 800e454:	d001      	beq.n	800e45a <__sflush_r+0xb2>
 800e456:	2b16      	cmp	r3, #22
 800e458:	d101      	bne.n	800e45e <__sflush_r+0xb6>
 800e45a:	602f      	str	r7, [r5, #0]
 800e45c:	e7b1      	b.n	800e3c2 <__sflush_r+0x1a>
 800e45e:	89a3      	ldrh	r3, [r4, #12]
 800e460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e464:	81a3      	strh	r3, [r4, #12]
 800e466:	e7ad      	b.n	800e3c4 <__sflush_r+0x1c>
 800e468:	690f      	ldr	r7, [r1, #16]
 800e46a:	2f00      	cmp	r7, #0
 800e46c:	d0a9      	beq.n	800e3c2 <__sflush_r+0x1a>
 800e46e:	0793      	lsls	r3, r2, #30
 800e470:	680e      	ldr	r6, [r1, #0]
 800e472:	bf08      	it	eq
 800e474:	694b      	ldreq	r3, [r1, #20]
 800e476:	600f      	str	r7, [r1, #0]
 800e478:	bf18      	it	ne
 800e47a:	2300      	movne	r3, #0
 800e47c:	eba6 0807 	sub.w	r8, r6, r7
 800e480:	608b      	str	r3, [r1, #8]
 800e482:	f1b8 0f00 	cmp.w	r8, #0
 800e486:	dd9c      	ble.n	800e3c2 <__sflush_r+0x1a>
 800e488:	6a21      	ldr	r1, [r4, #32]
 800e48a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e48c:	4643      	mov	r3, r8
 800e48e:	463a      	mov	r2, r7
 800e490:	4628      	mov	r0, r5
 800e492:	47b0      	blx	r6
 800e494:	2800      	cmp	r0, #0
 800e496:	dc06      	bgt.n	800e4a6 <__sflush_r+0xfe>
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e49e:	81a3      	strh	r3, [r4, #12]
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a4:	e78e      	b.n	800e3c4 <__sflush_r+0x1c>
 800e4a6:	4407      	add	r7, r0
 800e4a8:	eba8 0800 	sub.w	r8, r8, r0
 800e4ac:	e7e9      	b.n	800e482 <__sflush_r+0xda>
 800e4ae:	bf00      	nop
 800e4b0:	20400001 	.word	0x20400001

0800e4b4 <_fflush_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	690b      	ldr	r3, [r1, #16]
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	460c      	mov	r4, r1
 800e4bc:	b913      	cbnz	r3, 800e4c4 <_fflush_r+0x10>
 800e4be:	2500      	movs	r5, #0
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	bd38      	pop	{r3, r4, r5, pc}
 800e4c4:	b118      	cbz	r0, 800e4ce <_fflush_r+0x1a>
 800e4c6:	6983      	ldr	r3, [r0, #24]
 800e4c8:	b90b      	cbnz	r3, 800e4ce <_fflush_r+0x1a>
 800e4ca:	f000 f887 	bl	800e5dc <__sinit>
 800e4ce:	4b14      	ldr	r3, [pc, #80]	; (800e520 <_fflush_r+0x6c>)
 800e4d0:	429c      	cmp	r4, r3
 800e4d2:	d11b      	bne.n	800e50c <_fflush_r+0x58>
 800e4d4:	686c      	ldr	r4, [r5, #4]
 800e4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d0ef      	beq.n	800e4be <_fflush_r+0xa>
 800e4de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4e0:	07d0      	lsls	r0, r2, #31
 800e4e2:	d404      	bmi.n	800e4ee <_fflush_r+0x3a>
 800e4e4:	0599      	lsls	r1, r3, #22
 800e4e6:	d402      	bmi.n	800e4ee <_fflush_r+0x3a>
 800e4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4ea:	f000 f91a 	bl	800e722 <__retarget_lock_acquire_recursive>
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	f7ff ff59 	bl	800e3a8 <__sflush_r>
 800e4f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4f8:	07da      	lsls	r2, r3, #31
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	d4e0      	bmi.n	800e4c0 <_fflush_r+0xc>
 800e4fe:	89a3      	ldrh	r3, [r4, #12]
 800e500:	059b      	lsls	r3, r3, #22
 800e502:	d4dd      	bmi.n	800e4c0 <_fflush_r+0xc>
 800e504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e506:	f000 f90d 	bl	800e724 <__retarget_lock_release_recursive>
 800e50a:	e7d9      	b.n	800e4c0 <_fflush_r+0xc>
 800e50c:	4b05      	ldr	r3, [pc, #20]	; (800e524 <_fflush_r+0x70>)
 800e50e:	429c      	cmp	r4, r3
 800e510:	d101      	bne.n	800e516 <_fflush_r+0x62>
 800e512:	68ac      	ldr	r4, [r5, #8]
 800e514:	e7df      	b.n	800e4d6 <_fflush_r+0x22>
 800e516:	4b04      	ldr	r3, [pc, #16]	; (800e528 <_fflush_r+0x74>)
 800e518:	429c      	cmp	r4, r3
 800e51a:	bf08      	it	eq
 800e51c:	68ec      	ldreq	r4, [r5, #12]
 800e51e:	e7da      	b.n	800e4d6 <_fflush_r+0x22>
 800e520:	080101fc 	.word	0x080101fc
 800e524:	0801021c 	.word	0x0801021c
 800e528:	080101dc 	.word	0x080101dc

0800e52c <std>:
 800e52c:	2300      	movs	r3, #0
 800e52e:	b510      	push	{r4, lr}
 800e530:	4604      	mov	r4, r0
 800e532:	e9c0 3300 	strd	r3, r3, [r0]
 800e536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e53a:	6083      	str	r3, [r0, #8]
 800e53c:	8181      	strh	r1, [r0, #12]
 800e53e:	6643      	str	r3, [r0, #100]	; 0x64
 800e540:	81c2      	strh	r2, [r0, #14]
 800e542:	6183      	str	r3, [r0, #24]
 800e544:	4619      	mov	r1, r3
 800e546:	2208      	movs	r2, #8
 800e548:	305c      	adds	r0, #92	; 0x5c
 800e54a:	f7fe f9f5 	bl	800c938 <memset>
 800e54e:	4b05      	ldr	r3, [pc, #20]	; (800e564 <std+0x38>)
 800e550:	6263      	str	r3, [r4, #36]	; 0x24
 800e552:	4b05      	ldr	r3, [pc, #20]	; (800e568 <std+0x3c>)
 800e554:	62a3      	str	r3, [r4, #40]	; 0x28
 800e556:	4b05      	ldr	r3, [pc, #20]	; (800e56c <std+0x40>)
 800e558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e55a:	4b05      	ldr	r3, [pc, #20]	; (800e570 <std+0x44>)
 800e55c:	6224      	str	r4, [r4, #32]
 800e55e:	6323      	str	r3, [r4, #48]	; 0x30
 800e560:	bd10      	pop	{r4, pc}
 800e562:	bf00      	nop
 800e564:	0800f54d 	.word	0x0800f54d
 800e568:	0800f56f 	.word	0x0800f56f
 800e56c:	0800f5a7 	.word	0x0800f5a7
 800e570:	0800f5cb 	.word	0x0800f5cb

0800e574 <_cleanup_r>:
 800e574:	4901      	ldr	r1, [pc, #4]	; (800e57c <_cleanup_r+0x8>)
 800e576:	f000 b8af 	b.w	800e6d8 <_fwalk_reent>
 800e57a:	bf00      	nop
 800e57c:	0800e4b5 	.word	0x0800e4b5

0800e580 <__sfmoreglue>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	1e4a      	subs	r2, r1, #1
 800e584:	2568      	movs	r5, #104	; 0x68
 800e586:	4355      	muls	r5, r2
 800e588:	460e      	mov	r6, r1
 800e58a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e58e:	f7fe fa3b 	bl	800ca08 <_malloc_r>
 800e592:	4604      	mov	r4, r0
 800e594:	b140      	cbz	r0, 800e5a8 <__sfmoreglue+0x28>
 800e596:	2100      	movs	r1, #0
 800e598:	e9c0 1600 	strd	r1, r6, [r0]
 800e59c:	300c      	adds	r0, #12
 800e59e:	60a0      	str	r0, [r4, #8]
 800e5a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5a4:	f7fe f9c8 	bl	800c938 <memset>
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	bd70      	pop	{r4, r5, r6, pc}

0800e5ac <__sfp_lock_acquire>:
 800e5ac:	4801      	ldr	r0, [pc, #4]	; (800e5b4 <__sfp_lock_acquire+0x8>)
 800e5ae:	f000 b8b8 	b.w	800e722 <__retarget_lock_acquire_recursive>
 800e5b2:	bf00      	nop
 800e5b4:	200006b0 	.word	0x200006b0

0800e5b8 <__sfp_lock_release>:
 800e5b8:	4801      	ldr	r0, [pc, #4]	; (800e5c0 <__sfp_lock_release+0x8>)
 800e5ba:	f000 b8b3 	b.w	800e724 <__retarget_lock_release_recursive>
 800e5be:	bf00      	nop
 800e5c0:	200006b0 	.word	0x200006b0

0800e5c4 <__sinit_lock_acquire>:
 800e5c4:	4801      	ldr	r0, [pc, #4]	; (800e5cc <__sinit_lock_acquire+0x8>)
 800e5c6:	f000 b8ac 	b.w	800e722 <__retarget_lock_acquire_recursive>
 800e5ca:	bf00      	nop
 800e5cc:	200006ab 	.word	0x200006ab

0800e5d0 <__sinit_lock_release>:
 800e5d0:	4801      	ldr	r0, [pc, #4]	; (800e5d8 <__sinit_lock_release+0x8>)
 800e5d2:	f000 b8a7 	b.w	800e724 <__retarget_lock_release_recursive>
 800e5d6:	bf00      	nop
 800e5d8:	200006ab 	.word	0x200006ab

0800e5dc <__sinit>:
 800e5dc:	b510      	push	{r4, lr}
 800e5de:	4604      	mov	r4, r0
 800e5e0:	f7ff fff0 	bl	800e5c4 <__sinit_lock_acquire>
 800e5e4:	69a3      	ldr	r3, [r4, #24]
 800e5e6:	b11b      	cbz	r3, 800e5f0 <__sinit+0x14>
 800e5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5ec:	f7ff bff0 	b.w	800e5d0 <__sinit_lock_release>
 800e5f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e5f4:	6523      	str	r3, [r4, #80]	; 0x50
 800e5f6:	4b13      	ldr	r3, [pc, #76]	; (800e644 <__sinit+0x68>)
 800e5f8:	4a13      	ldr	r2, [pc, #76]	; (800e648 <__sinit+0x6c>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e5fe:	42a3      	cmp	r3, r4
 800e600:	bf04      	itt	eq
 800e602:	2301      	moveq	r3, #1
 800e604:	61a3      	streq	r3, [r4, #24]
 800e606:	4620      	mov	r0, r4
 800e608:	f000 f820 	bl	800e64c <__sfp>
 800e60c:	6060      	str	r0, [r4, #4]
 800e60e:	4620      	mov	r0, r4
 800e610:	f000 f81c 	bl	800e64c <__sfp>
 800e614:	60a0      	str	r0, [r4, #8]
 800e616:	4620      	mov	r0, r4
 800e618:	f000 f818 	bl	800e64c <__sfp>
 800e61c:	2200      	movs	r2, #0
 800e61e:	60e0      	str	r0, [r4, #12]
 800e620:	2104      	movs	r1, #4
 800e622:	6860      	ldr	r0, [r4, #4]
 800e624:	f7ff ff82 	bl	800e52c <std>
 800e628:	68a0      	ldr	r0, [r4, #8]
 800e62a:	2201      	movs	r2, #1
 800e62c:	2109      	movs	r1, #9
 800e62e:	f7ff ff7d 	bl	800e52c <std>
 800e632:	68e0      	ldr	r0, [r4, #12]
 800e634:	2202      	movs	r2, #2
 800e636:	2112      	movs	r1, #18
 800e638:	f7ff ff78 	bl	800e52c <std>
 800e63c:	2301      	movs	r3, #1
 800e63e:	61a3      	str	r3, [r4, #24]
 800e640:	e7d2      	b.n	800e5e8 <__sinit+0xc>
 800e642:	bf00      	nop
 800e644:	08010110 	.word	0x08010110
 800e648:	0800e575 	.word	0x0800e575

0800e64c <__sfp>:
 800e64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64e:	4607      	mov	r7, r0
 800e650:	f7ff ffac 	bl	800e5ac <__sfp_lock_acquire>
 800e654:	4b1e      	ldr	r3, [pc, #120]	; (800e6d0 <__sfp+0x84>)
 800e656:	681e      	ldr	r6, [r3, #0]
 800e658:	69b3      	ldr	r3, [r6, #24]
 800e65a:	b913      	cbnz	r3, 800e662 <__sfp+0x16>
 800e65c:	4630      	mov	r0, r6
 800e65e:	f7ff ffbd 	bl	800e5dc <__sinit>
 800e662:	3648      	adds	r6, #72	; 0x48
 800e664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e668:	3b01      	subs	r3, #1
 800e66a:	d503      	bpl.n	800e674 <__sfp+0x28>
 800e66c:	6833      	ldr	r3, [r6, #0]
 800e66e:	b30b      	cbz	r3, 800e6b4 <__sfp+0x68>
 800e670:	6836      	ldr	r6, [r6, #0]
 800e672:	e7f7      	b.n	800e664 <__sfp+0x18>
 800e674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e678:	b9d5      	cbnz	r5, 800e6b0 <__sfp+0x64>
 800e67a:	4b16      	ldr	r3, [pc, #88]	; (800e6d4 <__sfp+0x88>)
 800e67c:	60e3      	str	r3, [r4, #12]
 800e67e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e682:	6665      	str	r5, [r4, #100]	; 0x64
 800e684:	f000 f84c 	bl	800e720 <__retarget_lock_init_recursive>
 800e688:	f7ff ff96 	bl	800e5b8 <__sfp_lock_release>
 800e68c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e694:	6025      	str	r5, [r4, #0]
 800e696:	61a5      	str	r5, [r4, #24]
 800e698:	2208      	movs	r2, #8
 800e69a:	4629      	mov	r1, r5
 800e69c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6a0:	f7fe f94a 	bl	800c938 <memset>
 800e6a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6b0:	3468      	adds	r4, #104	; 0x68
 800e6b2:	e7d9      	b.n	800e668 <__sfp+0x1c>
 800e6b4:	2104      	movs	r1, #4
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	f7ff ff62 	bl	800e580 <__sfmoreglue>
 800e6bc:	4604      	mov	r4, r0
 800e6be:	6030      	str	r0, [r6, #0]
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d1d5      	bne.n	800e670 <__sfp+0x24>
 800e6c4:	f7ff ff78 	bl	800e5b8 <__sfp_lock_release>
 800e6c8:	230c      	movs	r3, #12
 800e6ca:	603b      	str	r3, [r7, #0]
 800e6cc:	e7ee      	b.n	800e6ac <__sfp+0x60>
 800e6ce:	bf00      	nop
 800e6d0:	08010110 	.word	0x08010110
 800e6d4:	ffff0001 	.word	0xffff0001

0800e6d8 <_fwalk_reent>:
 800e6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6dc:	4606      	mov	r6, r0
 800e6de:	4688      	mov	r8, r1
 800e6e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6e4:	2700      	movs	r7, #0
 800e6e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6ea:	f1b9 0901 	subs.w	r9, r9, #1
 800e6ee:	d505      	bpl.n	800e6fc <_fwalk_reent+0x24>
 800e6f0:	6824      	ldr	r4, [r4, #0]
 800e6f2:	2c00      	cmp	r4, #0
 800e6f4:	d1f7      	bne.n	800e6e6 <_fwalk_reent+0xe>
 800e6f6:	4638      	mov	r0, r7
 800e6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6fc:	89ab      	ldrh	r3, [r5, #12]
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d907      	bls.n	800e712 <_fwalk_reent+0x3a>
 800e702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e706:	3301      	adds	r3, #1
 800e708:	d003      	beq.n	800e712 <_fwalk_reent+0x3a>
 800e70a:	4629      	mov	r1, r5
 800e70c:	4630      	mov	r0, r6
 800e70e:	47c0      	blx	r8
 800e710:	4307      	orrs	r7, r0
 800e712:	3568      	adds	r5, #104	; 0x68
 800e714:	e7e9      	b.n	800e6ea <_fwalk_reent+0x12>
	...

0800e718 <_localeconv_r>:
 800e718:	4800      	ldr	r0, [pc, #0]	; (800e71c <_localeconv_r+0x4>)
 800e71a:	4770      	bx	lr
 800e71c:	200004e0 	.word	0x200004e0

0800e720 <__retarget_lock_init_recursive>:
 800e720:	4770      	bx	lr

0800e722 <__retarget_lock_acquire_recursive>:
 800e722:	4770      	bx	lr

0800e724 <__retarget_lock_release_recursive>:
 800e724:	4770      	bx	lr

0800e726 <__swhatbuf_r>:
 800e726:	b570      	push	{r4, r5, r6, lr}
 800e728:	460e      	mov	r6, r1
 800e72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72e:	2900      	cmp	r1, #0
 800e730:	b096      	sub	sp, #88	; 0x58
 800e732:	4614      	mov	r4, r2
 800e734:	461d      	mov	r5, r3
 800e736:	da07      	bge.n	800e748 <__swhatbuf_r+0x22>
 800e738:	2300      	movs	r3, #0
 800e73a:	602b      	str	r3, [r5, #0]
 800e73c:	89b3      	ldrh	r3, [r6, #12]
 800e73e:	061a      	lsls	r2, r3, #24
 800e740:	d410      	bmi.n	800e764 <__swhatbuf_r+0x3e>
 800e742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e746:	e00e      	b.n	800e766 <__swhatbuf_r+0x40>
 800e748:	466a      	mov	r2, sp
 800e74a:	f000 ff95 	bl	800f678 <_fstat_r>
 800e74e:	2800      	cmp	r0, #0
 800e750:	dbf2      	blt.n	800e738 <__swhatbuf_r+0x12>
 800e752:	9a01      	ldr	r2, [sp, #4]
 800e754:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e758:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e75c:	425a      	negs	r2, r3
 800e75e:	415a      	adcs	r2, r3
 800e760:	602a      	str	r2, [r5, #0]
 800e762:	e7ee      	b.n	800e742 <__swhatbuf_r+0x1c>
 800e764:	2340      	movs	r3, #64	; 0x40
 800e766:	2000      	movs	r0, #0
 800e768:	6023      	str	r3, [r4, #0]
 800e76a:	b016      	add	sp, #88	; 0x58
 800e76c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e770 <__smakebuf_r>:
 800e770:	898b      	ldrh	r3, [r1, #12]
 800e772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e774:	079d      	lsls	r5, r3, #30
 800e776:	4606      	mov	r6, r0
 800e778:	460c      	mov	r4, r1
 800e77a:	d507      	bpl.n	800e78c <__smakebuf_r+0x1c>
 800e77c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	6123      	str	r3, [r4, #16]
 800e784:	2301      	movs	r3, #1
 800e786:	6163      	str	r3, [r4, #20]
 800e788:	b002      	add	sp, #8
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	ab01      	add	r3, sp, #4
 800e78e:	466a      	mov	r2, sp
 800e790:	f7ff ffc9 	bl	800e726 <__swhatbuf_r>
 800e794:	9900      	ldr	r1, [sp, #0]
 800e796:	4605      	mov	r5, r0
 800e798:	4630      	mov	r0, r6
 800e79a:	f7fe f935 	bl	800ca08 <_malloc_r>
 800e79e:	b948      	cbnz	r0, 800e7b4 <__smakebuf_r+0x44>
 800e7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7a4:	059a      	lsls	r2, r3, #22
 800e7a6:	d4ef      	bmi.n	800e788 <__smakebuf_r+0x18>
 800e7a8:	f023 0303 	bic.w	r3, r3, #3
 800e7ac:	f043 0302 	orr.w	r3, r3, #2
 800e7b0:	81a3      	strh	r3, [r4, #12]
 800e7b2:	e7e3      	b.n	800e77c <__smakebuf_r+0xc>
 800e7b4:	4b0d      	ldr	r3, [pc, #52]	; (800e7ec <__smakebuf_r+0x7c>)
 800e7b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	6020      	str	r0, [r4, #0]
 800e7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c0:	81a3      	strh	r3, [r4, #12]
 800e7c2:	9b00      	ldr	r3, [sp, #0]
 800e7c4:	6163      	str	r3, [r4, #20]
 800e7c6:	9b01      	ldr	r3, [sp, #4]
 800e7c8:	6120      	str	r0, [r4, #16]
 800e7ca:	b15b      	cbz	r3, 800e7e4 <__smakebuf_r+0x74>
 800e7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f000 ff63 	bl	800f69c <_isatty_r>
 800e7d6:	b128      	cbz	r0, 800e7e4 <__smakebuf_r+0x74>
 800e7d8:	89a3      	ldrh	r3, [r4, #12]
 800e7da:	f023 0303 	bic.w	r3, r3, #3
 800e7de:	f043 0301 	orr.w	r3, r3, #1
 800e7e2:	81a3      	strh	r3, [r4, #12]
 800e7e4:	89a0      	ldrh	r0, [r4, #12]
 800e7e6:	4305      	orrs	r5, r0
 800e7e8:	81a5      	strh	r5, [r4, #12]
 800e7ea:	e7cd      	b.n	800e788 <__smakebuf_r+0x18>
 800e7ec:	0800e575 	.word	0x0800e575

0800e7f0 <__malloc_lock>:
 800e7f0:	4801      	ldr	r0, [pc, #4]	; (800e7f8 <__malloc_lock+0x8>)
 800e7f2:	f7ff bf96 	b.w	800e722 <__retarget_lock_acquire_recursive>
 800e7f6:	bf00      	nop
 800e7f8:	200006ac 	.word	0x200006ac

0800e7fc <__malloc_unlock>:
 800e7fc:	4801      	ldr	r0, [pc, #4]	; (800e804 <__malloc_unlock+0x8>)
 800e7fe:	f7ff bf91 	b.w	800e724 <__retarget_lock_release_recursive>
 800e802:	bf00      	nop
 800e804:	200006ac 	.word	0x200006ac

0800e808 <_Balloc>:
 800e808:	b570      	push	{r4, r5, r6, lr}
 800e80a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e80c:	4604      	mov	r4, r0
 800e80e:	460d      	mov	r5, r1
 800e810:	b976      	cbnz	r6, 800e830 <_Balloc+0x28>
 800e812:	2010      	movs	r0, #16
 800e814:	f7fe f872 	bl	800c8fc <malloc>
 800e818:	4602      	mov	r2, r0
 800e81a:	6260      	str	r0, [r4, #36]	; 0x24
 800e81c:	b920      	cbnz	r0, 800e828 <_Balloc+0x20>
 800e81e:	4b18      	ldr	r3, [pc, #96]	; (800e880 <_Balloc+0x78>)
 800e820:	4818      	ldr	r0, [pc, #96]	; (800e884 <_Balloc+0x7c>)
 800e822:	2166      	movs	r1, #102	; 0x66
 800e824:	f000 fee8 	bl	800f5f8 <__assert_func>
 800e828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e82c:	6006      	str	r6, [r0, #0]
 800e82e:	60c6      	str	r6, [r0, #12]
 800e830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e832:	68f3      	ldr	r3, [r6, #12]
 800e834:	b183      	cbz	r3, 800e858 <_Balloc+0x50>
 800e836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e83e:	b9b8      	cbnz	r0, 800e870 <_Balloc+0x68>
 800e840:	2101      	movs	r1, #1
 800e842:	fa01 f605 	lsl.w	r6, r1, r5
 800e846:	1d72      	adds	r2, r6, #5
 800e848:	0092      	lsls	r2, r2, #2
 800e84a:	4620      	mov	r0, r4
 800e84c:	f7fe f87c 	bl	800c948 <_calloc_r>
 800e850:	b160      	cbz	r0, 800e86c <_Balloc+0x64>
 800e852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e856:	e00e      	b.n	800e876 <_Balloc+0x6e>
 800e858:	2221      	movs	r2, #33	; 0x21
 800e85a:	2104      	movs	r1, #4
 800e85c:	4620      	mov	r0, r4
 800e85e:	f7fe f873 	bl	800c948 <_calloc_r>
 800e862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e864:	60f0      	str	r0, [r6, #12]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1e4      	bne.n	800e836 <_Balloc+0x2e>
 800e86c:	2000      	movs	r0, #0
 800e86e:	bd70      	pop	{r4, r5, r6, pc}
 800e870:	6802      	ldr	r2, [r0, #0]
 800e872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e876:	2300      	movs	r3, #0
 800e878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e87c:	e7f7      	b.n	800e86e <_Balloc+0x66>
 800e87e:	bf00      	nop
 800e880:	08010155 	.word	0x08010155
 800e884:	0801023c 	.word	0x0801023c

0800e888 <_Bfree>:
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e88c:	4605      	mov	r5, r0
 800e88e:	460c      	mov	r4, r1
 800e890:	b976      	cbnz	r6, 800e8b0 <_Bfree+0x28>
 800e892:	2010      	movs	r0, #16
 800e894:	f7fe f832 	bl	800c8fc <malloc>
 800e898:	4602      	mov	r2, r0
 800e89a:	6268      	str	r0, [r5, #36]	; 0x24
 800e89c:	b920      	cbnz	r0, 800e8a8 <_Bfree+0x20>
 800e89e:	4b09      	ldr	r3, [pc, #36]	; (800e8c4 <_Bfree+0x3c>)
 800e8a0:	4809      	ldr	r0, [pc, #36]	; (800e8c8 <_Bfree+0x40>)
 800e8a2:	218a      	movs	r1, #138	; 0x8a
 800e8a4:	f000 fea8 	bl	800f5f8 <__assert_func>
 800e8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8ac:	6006      	str	r6, [r0, #0]
 800e8ae:	60c6      	str	r6, [r0, #12]
 800e8b0:	b13c      	cbz	r4, 800e8c2 <_Bfree+0x3a>
 800e8b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e8b4:	6862      	ldr	r2, [r4, #4]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8bc:	6021      	str	r1, [r4, #0]
 800e8be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8c2:	bd70      	pop	{r4, r5, r6, pc}
 800e8c4:	08010155 	.word	0x08010155
 800e8c8:	0801023c 	.word	0x0801023c

0800e8cc <__multadd>:
 800e8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d0:	690e      	ldr	r6, [r1, #16]
 800e8d2:	4607      	mov	r7, r0
 800e8d4:	4698      	mov	r8, r3
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	f101 0014 	add.w	r0, r1, #20
 800e8dc:	2300      	movs	r3, #0
 800e8de:	6805      	ldr	r5, [r0, #0]
 800e8e0:	b2a9      	uxth	r1, r5
 800e8e2:	fb02 8101 	mla	r1, r2, r1, r8
 800e8e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e8ea:	0c2d      	lsrs	r5, r5, #16
 800e8ec:	fb02 c505 	mla	r5, r2, r5, ip
 800e8f0:	b289      	uxth	r1, r1
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e8f8:	429e      	cmp	r6, r3
 800e8fa:	f840 1b04 	str.w	r1, [r0], #4
 800e8fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e902:	dcec      	bgt.n	800e8de <__multadd+0x12>
 800e904:	f1b8 0f00 	cmp.w	r8, #0
 800e908:	d022      	beq.n	800e950 <__multadd+0x84>
 800e90a:	68a3      	ldr	r3, [r4, #8]
 800e90c:	42b3      	cmp	r3, r6
 800e90e:	dc19      	bgt.n	800e944 <__multadd+0x78>
 800e910:	6861      	ldr	r1, [r4, #4]
 800e912:	4638      	mov	r0, r7
 800e914:	3101      	adds	r1, #1
 800e916:	f7ff ff77 	bl	800e808 <_Balloc>
 800e91a:	4605      	mov	r5, r0
 800e91c:	b928      	cbnz	r0, 800e92a <__multadd+0x5e>
 800e91e:	4602      	mov	r2, r0
 800e920:	4b0d      	ldr	r3, [pc, #52]	; (800e958 <__multadd+0x8c>)
 800e922:	480e      	ldr	r0, [pc, #56]	; (800e95c <__multadd+0x90>)
 800e924:	21b5      	movs	r1, #181	; 0xb5
 800e926:	f000 fe67 	bl	800f5f8 <__assert_func>
 800e92a:	6922      	ldr	r2, [r4, #16]
 800e92c:	3202      	adds	r2, #2
 800e92e:	f104 010c 	add.w	r1, r4, #12
 800e932:	0092      	lsls	r2, r2, #2
 800e934:	300c      	adds	r0, #12
 800e936:	f7fd fff1 	bl	800c91c <memcpy>
 800e93a:	4621      	mov	r1, r4
 800e93c:	4638      	mov	r0, r7
 800e93e:	f7ff ffa3 	bl	800e888 <_Bfree>
 800e942:	462c      	mov	r4, r5
 800e944:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e948:	3601      	adds	r6, #1
 800e94a:	f8c3 8014 	str.w	r8, [r3, #20]
 800e94e:	6126      	str	r6, [r4, #16]
 800e950:	4620      	mov	r0, r4
 800e952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e956:	bf00      	nop
 800e958:	080101cb 	.word	0x080101cb
 800e95c:	0801023c 	.word	0x0801023c

0800e960 <__hi0bits>:
 800e960:	0c03      	lsrs	r3, r0, #16
 800e962:	041b      	lsls	r3, r3, #16
 800e964:	b9d3      	cbnz	r3, 800e99c <__hi0bits+0x3c>
 800e966:	0400      	lsls	r0, r0, #16
 800e968:	2310      	movs	r3, #16
 800e96a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e96e:	bf04      	itt	eq
 800e970:	0200      	lsleq	r0, r0, #8
 800e972:	3308      	addeq	r3, #8
 800e974:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e978:	bf04      	itt	eq
 800e97a:	0100      	lsleq	r0, r0, #4
 800e97c:	3304      	addeq	r3, #4
 800e97e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e982:	bf04      	itt	eq
 800e984:	0080      	lsleq	r0, r0, #2
 800e986:	3302      	addeq	r3, #2
 800e988:	2800      	cmp	r0, #0
 800e98a:	db05      	blt.n	800e998 <__hi0bits+0x38>
 800e98c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e990:	f103 0301 	add.w	r3, r3, #1
 800e994:	bf08      	it	eq
 800e996:	2320      	moveq	r3, #32
 800e998:	4618      	mov	r0, r3
 800e99a:	4770      	bx	lr
 800e99c:	2300      	movs	r3, #0
 800e99e:	e7e4      	b.n	800e96a <__hi0bits+0xa>

0800e9a0 <__lo0bits>:
 800e9a0:	6803      	ldr	r3, [r0, #0]
 800e9a2:	f013 0207 	ands.w	r2, r3, #7
 800e9a6:	4601      	mov	r1, r0
 800e9a8:	d00b      	beq.n	800e9c2 <__lo0bits+0x22>
 800e9aa:	07da      	lsls	r2, r3, #31
 800e9ac:	d424      	bmi.n	800e9f8 <__lo0bits+0x58>
 800e9ae:	0798      	lsls	r0, r3, #30
 800e9b0:	bf49      	itett	mi
 800e9b2:	085b      	lsrmi	r3, r3, #1
 800e9b4:	089b      	lsrpl	r3, r3, #2
 800e9b6:	2001      	movmi	r0, #1
 800e9b8:	600b      	strmi	r3, [r1, #0]
 800e9ba:	bf5c      	itt	pl
 800e9bc:	600b      	strpl	r3, [r1, #0]
 800e9be:	2002      	movpl	r0, #2
 800e9c0:	4770      	bx	lr
 800e9c2:	b298      	uxth	r0, r3
 800e9c4:	b9b0      	cbnz	r0, 800e9f4 <__lo0bits+0x54>
 800e9c6:	0c1b      	lsrs	r3, r3, #16
 800e9c8:	2010      	movs	r0, #16
 800e9ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e9ce:	bf04      	itt	eq
 800e9d0:	0a1b      	lsreq	r3, r3, #8
 800e9d2:	3008      	addeq	r0, #8
 800e9d4:	071a      	lsls	r2, r3, #28
 800e9d6:	bf04      	itt	eq
 800e9d8:	091b      	lsreq	r3, r3, #4
 800e9da:	3004      	addeq	r0, #4
 800e9dc:	079a      	lsls	r2, r3, #30
 800e9de:	bf04      	itt	eq
 800e9e0:	089b      	lsreq	r3, r3, #2
 800e9e2:	3002      	addeq	r0, #2
 800e9e4:	07da      	lsls	r2, r3, #31
 800e9e6:	d403      	bmi.n	800e9f0 <__lo0bits+0x50>
 800e9e8:	085b      	lsrs	r3, r3, #1
 800e9ea:	f100 0001 	add.w	r0, r0, #1
 800e9ee:	d005      	beq.n	800e9fc <__lo0bits+0x5c>
 800e9f0:	600b      	str	r3, [r1, #0]
 800e9f2:	4770      	bx	lr
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	e7e8      	b.n	800e9ca <__lo0bits+0x2a>
 800e9f8:	2000      	movs	r0, #0
 800e9fa:	4770      	bx	lr
 800e9fc:	2020      	movs	r0, #32
 800e9fe:	4770      	bx	lr

0800ea00 <__i2b>:
 800ea00:	b510      	push	{r4, lr}
 800ea02:	460c      	mov	r4, r1
 800ea04:	2101      	movs	r1, #1
 800ea06:	f7ff feff 	bl	800e808 <_Balloc>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	b928      	cbnz	r0, 800ea1a <__i2b+0x1a>
 800ea0e:	4b05      	ldr	r3, [pc, #20]	; (800ea24 <__i2b+0x24>)
 800ea10:	4805      	ldr	r0, [pc, #20]	; (800ea28 <__i2b+0x28>)
 800ea12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ea16:	f000 fdef 	bl	800f5f8 <__assert_func>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	6144      	str	r4, [r0, #20]
 800ea1e:	6103      	str	r3, [r0, #16]
 800ea20:	bd10      	pop	{r4, pc}
 800ea22:	bf00      	nop
 800ea24:	080101cb 	.word	0x080101cb
 800ea28:	0801023c 	.word	0x0801023c

0800ea2c <__multiply>:
 800ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea30:	4614      	mov	r4, r2
 800ea32:	690a      	ldr	r2, [r1, #16]
 800ea34:	6923      	ldr	r3, [r4, #16]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	bfb8      	it	lt
 800ea3a:	460b      	movlt	r3, r1
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	bfbc      	itt	lt
 800ea40:	4625      	movlt	r5, r4
 800ea42:	461c      	movlt	r4, r3
 800ea44:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ea48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ea4c:	68ab      	ldr	r3, [r5, #8]
 800ea4e:	6869      	ldr	r1, [r5, #4]
 800ea50:	eb0a 0709 	add.w	r7, sl, r9
 800ea54:	42bb      	cmp	r3, r7
 800ea56:	b085      	sub	sp, #20
 800ea58:	bfb8      	it	lt
 800ea5a:	3101      	addlt	r1, #1
 800ea5c:	f7ff fed4 	bl	800e808 <_Balloc>
 800ea60:	b930      	cbnz	r0, 800ea70 <__multiply+0x44>
 800ea62:	4602      	mov	r2, r0
 800ea64:	4b42      	ldr	r3, [pc, #264]	; (800eb70 <__multiply+0x144>)
 800ea66:	4843      	ldr	r0, [pc, #268]	; (800eb74 <__multiply+0x148>)
 800ea68:	f240 115d 	movw	r1, #349	; 0x15d
 800ea6c:	f000 fdc4 	bl	800f5f8 <__assert_func>
 800ea70:	f100 0614 	add.w	r6, r0, #20
 800ea74:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ea78:	4633      	mov	r3, r6
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	4543      	cmp	r3, r8
 800ea7e:	d31e      	bcc.n	800eabe <__multiply+0x92>
 800ea80:	f105 0c14 	add.w	ip, r5, #20
 800ea84:	f104 0314 	add.w	r3, r4, #20
 800ea88:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ea8c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ea90:	9202      	str	r2, [sp, #8]
 800ea92:	ebac 0205 	sub.w	r2, ip, r5
 800ea96:	3a15      	subs	r2, #21
 800ea98:	f022 0203 	bic.w	r2, r2, #3
 800ea9c:	3204      	adds	r2, #4
 800ea9e:	f105 0115 	add.w	r1, r5, #21
 800eaa2:	458c      	cmp	ip, r1
 800eaa4:	bf38      	it	cc
 800eaa6:	2204      	movcc	r2, #4
 800eaa8:	9201      	str	r2, [sp, #4]
 800eaaa:	9a02      	ldr	r2, [sp, #8]
 800eaac:	9303      	str	r3, [sp, #12]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d808      	bhi.n	800eac4 <__multiply+0x98>
 800eab2:	2f00      	cmp	r7, #0
 800eab4:	dc55      	bgt.n	800eb62 <__multiply+0x136>
 800eab6:	6107      	str	r7, [r0, #16]
 800eab8:	b005      	add	sp, #20
 800eaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eabe:	f843 2b04 	str.w	r2, [r3], #4
 800eac2:	e7db      	b.n	800ea7c <__multiply+0x50>
 800eac4:	f8b3 a000 	ldrh.w	sl, [r3]
 800eac8:	f1ba 0f00 	cmp.w	sl, #0
 800eacc:	d020      	beq.n	800eb10 <__multiply+0xe4>
 800eace:	f105 0e14 	add.w	lr, r5, #20
 800ead2:	46b1      	mov	r9, r6
 800ead4:	2200      	movs	r2, #0
 800ead6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800eada:	f8d9 b000 	ldr.w	fp, [r9]
 800eade:	b2a1      	uxth	r1, r4
 800eae0:	fa1f fb8b 	uxth.w	fp, fp
 800eae4:	fb0a b101 	mla	r1, sl, r1, fp
 800eae8:	4411      	add	r1, r2
 800eaea:	f8d9 2000 	ldr.w	r2, [r9]
 800eaee:	0c24      	lsrs	r4, r4, #16
 800eaf0:	0c12      	lsrs	r2, r2, #16
 800eaf2:	fb0a 2404 	mla	r4, sl, r4, r2
 800eaf6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800eafa:	b289      	uxth	r1, r1
 800eafc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800eb00:	45f4      	cmp	ip, lr
 800eb02:	f849 1b04 	str.w	r1, [r9], #4
 800eb06:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800eb0a:	d8e4      	bhi.n	800ead6 <__multiply+0xaa>
 800eb0c:	9901      	ldr	r1, [sp, #4]
 800eb0e:	5072      	str	r2, [r6, r1]
 800eb10:	9a03      	ldr	r2, [sp, #12]
 800eb12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb16:	3304      	adds	r3, #4
 800eb18:	f1b9 0f00 	cmp.w	r9, #0
 800eb1c:	d01f      	beq.n	800eb5e <__multiply+0x132>
 800eb1e:	6834      	ldr	r4, [r6, #0]
 800eb20:	f105 0114 	add.w	r1, r5, #20
 800eb24:	46b6      	mov	lr, r6
 800eb26:	f04f 0a00 	mov.w	sl, #0
 800eb2a:	880a      	ldrh	r2, [r1, #0]
 800eb2c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800eb30:	fb09 b202 	mla	r2, r9, r2, fp
 800eb34:	4492      	add	sl, r2
 800eb36:	b2a4      	uxth	r4, r4
 800eb38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800eb3c:	f84e 4b04 	str.w	r4, [lr], #4
 800eb40:	f851 4b04 	ldr.w	r4, [r1], #4
 800eb44:	f8be 2000 	ldrh.w	r2, [lr]
 800eb48:	0c24      	lsrs	r4, r4, #16
 800eb4a:	fb09 2404 	mla	r4, r9, r4, r2
 800eb4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800eb52:	458c      	cmp	ip, r1
 800eb54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eb58:	d8e7      	bhi.n	800eb2a <__multiply+0xfe>
 800eb5a:	9a01      	ldr	r2, [sp, #4]
 800eb5c:	50b4      	str	r4, [r6, r2]
 800eb5e:	3604      	adds	r6, #4
 800eb60:	e7a3      	b.n	800eaaa <__multiply+0x7e>
 800eb62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1a5      	bne.n	800eab6 <__multiply+0x8a>
 800eb6a:	3f01      	subs	r7, #1
 800eb6c:	e7a1      	b.n	800eab2 <__multiply+0x86>
 800eb6e:	bf00      	nop
 800eb70:	080101cb 	.word	0x080101cb
 800eb74:	0801023c 	.word	0x0801023c

0800eb78 <__pow5mult>:
 800eb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb7c:	4615      	mov	r5, r2
 800eb7e:	f012 0203 	ands.w	r2, r2, #3
 800eb82:	4606      	mov	r6, r0
 800eb84:	460f      	mov	r7, r1
 800eb86:	d007      	beq.n	800eb98 <__pow5mult+0x20>
 800eb88:	4c25      	ldr	r4, [pc, #148]	; (800ec20 <__pow5mult+0xa8>)
 800eb8a:	3a01      	subs	r2, #1
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb92:	f7ff fe9b 	bl	800e8cc <__multadd>
 800eb96:	4607      	mov	r7, r0
 800eb98:	10ad      	asrs	r5, r5, #2
 800eb9a:	d03d      	beq.n	800ec18 <__pow5mult+0xa0>
 800eb9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb9e:	b97c      	cbnz	r4, 800ebc0 <__pow5mult+0x48>
 800eba0:	2010      	movs	r0, #16
 800eba2:	f7fd feab 	bl	800c8fc <malloc>
 800eba6:	4602      	mov	r2, r0
 800eba8:	6270      	str	r0, [r6, #36]	; 0x24
 800ebaa:	b928      	cbnz	r0, 800ebb8 <__pow5mult+0x40>
 800ebac:	4b1d      	ldr	r3, [pc, #116]	; (800ec24 <__pow5mult+0xac>)
 800ebae:	481e      	ldr	r0, [pc, #120]	; (800ec28 <__pow5mult+0xb0>)
 800ebb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ebb4:	f000 fd20 	bl	800f5f8 <__assert_func>
 800ebb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebbc:	6004      	str	r4, [r0, #0]
 800ebbe:	60c4      	str	r4, [r0, #12]
 800ebc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ebc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebc8:	b94c      	cbnz	r4, 800ebde <__pow5mult+0x66>
 800ebca:	f240 2171 	movw	r1, #625	; 0x271
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f7ff ff16 	bl	800ea00 <__i2b>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebda:	4604      	mov	r4, r0
 800ebdc:	6003      	str	r3, [r0, #0]
 800ebde:	f04f 0900 	mov.w	r9, #0
 800ebe2:	07eb      	lsls	r3, r5, #31
 800ebe4:	d50a      	bpl.n	800ebfc <__pow5mult+0x84>
 800ebe6:	4639      	mov	r1, r7
 800ebe8:	4622      	mov	r2, r4
 800ebea:	4630      	mov	r0, r6
 800ebec:	f7ff ff1e 	bl	800ea2c <__multiply>
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	4680      	mov	r8, r0
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	f7ff fe47 	bl	800e888 <_Bfree>
 800ebfa:	4647      	mov	r7, r8
 800ebfc:	106d      	asrs	r5, r5, #1
 800ebfe:	d00b      	beq.n	800ec18 <__pow5mult+0xa0>
 800ec00:	6820      	ldr	r0, [r4, #0]
 800ec02:	b938      	cbnz	r0, 800ec14 <__pow5mult+0x9c>
 800ec04:	4622      	mov	r2, r4
 800ec06:	4621      	mov	r1, r4
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f7ff ff0f 	bl	800ea2c <__multiply>
 800ec0e:	6020      	str	r0, [r4, #0]
 800ec10:	f8c0 9000 	str.w	r9, [r0]
 800ec14:	4604      	mov	r4, r0
 800ec16:	e7e4      	b.n	800ebe2 <__pow5mult+0x6a>
 800ec18:	4638      	mov	r0, r7
 800ec1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec1e:	bf00      	nop
 800ec20:	08010390 	.word	0x08010390
 800ec24:	08010155 	.word	0x08010155
 800ec28:	0801023c 	.word	0x0801023c

0800ec2c <__lshift>:
 800ec2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec30:	460c      	mov	r4, r1
 800ec32:	6849      	ldr	r1, [r1, #4]
 800ec34:	6923      	ldr	r3, [r4, #16]
 800ec36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec3a:	68a3      	ldr	r3, [r4, #8]
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	4691      	mov	r9, r2
 800ec40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec44:	f108 0601 	add.w	r6, r8, #1
 800ec48:	42b3      	cmp	r3, r6
 800ec4a:	db0b      	blt.n	800ec64 <__lshift+0x38>
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	f7ff fddb 	bl	800e808 <_Balloc>
 800ec52:	4605      	mov	r5, r0
 800ec54:	b948      	cbnz	r0, 800ec6a <__lshift+0x3e>
 800ec56:	4602      	mov	r2, r0
 800ec58:	4b28      	ldr	r3, [pc, #160]	; (800ecfc <__lshift+0xd0>)
 800ec5a:	4829      	ldr	r0, [pc, #164]	; (800ed00 <__lshift+0xd4>)
 800ec5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec60:	f000 fcca 	bl	800f5f8 <__assert_func>
 800ec64:	3101      	adds	r1, #1
 800ec66:	005b      	lsls	r3, r3, #1
 800ec68:	e7ee      	b.n	800ec48 <__lshift+0x1c>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	f100 0114 	add.w	r1, r0, #20
 800ec70:	f100 0210 	add.w	r2, r0, #16
 800ec74:	4618      	mov	r0, r3
 800ec76:	4553      	cmp	r3, sl
 800ec78:	db33      	blt.n	800ece2 <__lshift+0xb6>
 800ec7a:	6920      	ldr	r0, [r4, #16]
 800ec7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec80:	f104 0314 	add.w	r3, r4, #20
 800ec84:	f019 091f 	ands.w	r9, r9, #31
 800ec88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec90:	d02b      	beq.n	800ecea <__lshift+0xbe>
 800ec92:	f1c9 0e20 	rsb	lr, r9, #32
 800ec96:	468a      	mov	sl, r1
 800ec98:	2200      	movs	r2, #0
 800ec9a:	6818      	ldr	r0, [r3, #0]
 800ec9c:	fa00 f009 	lsl.w	r0, r0, r9
 800eca0:	4302      	orrs	r2, r0
 800eca2:	f84a 2b04 	str.w	r2, [sl], #4
 800eca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecaa:	459c      	cmp	ip, r3
 800ecac:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecb0:	d8f3      	bhi.n	800ec9a <__lshift+0x6e>
 800ecb2:	ebac 0304 	sub.w	r3, ip, r4
 800ecb6:	3b15      	subs	r3, #21
 800ecb8:	f023 0303 	bic.w	r3, r3, #3
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	f104 0015 	add.w	r0, r4, #21
 800ecc2:	4584      	cmp	ip, r0
 800ecc4:	bf38      	it	cc
 800ecc6:	2304      	movcc	r3, #4
 800ecc8:	50ca      	str	r2, [r1, r3]
 800ecca:	b10a      	cbz	r2, 800ecd0 <__lshift+0xa4>
 800eccc:	f108 0602 	add.w	r6, r8, #2
 800ecd0:	3e01      	subs	r6, #1
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	612e      	str	r6, [r5, #16]
 800ecd6:	4621      	mov	r1, r4
 800ecd8:	f7ff fdd6 	bl	800e888 <_Bfree>
 800ecdc:	4628      	mov	r0, r5
 800ecde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ece6:	3301      	adds	r3, #1
 800ece8:	e7c5      	b.n	800ec76 <__lshift+0x4a>
 800ecea:	3904      	subs	r1, #4
 800ecec:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecf4:	459c      	cmp	ip, r3
 800ecf6:	d8f9      	bhi.n	800ecec <__lshift+0xc0>
 800ecf8:	e7ea      	b.n	800ecd0 <__lshift+0xa4>
 800ecfa:	bf00      	nop
 800ecfc:	080101cb 	.word	0x080101cb
 800ed00:	0801023c 	.word	0x0801023c

0800ed04 <__mcmp>:
 800ed04:	b530      	push	{r4, r5, lr}
 800ed06:	6902      	ldr	r2, [r0, #16]
 800ed08:	690c      	ldr	r4, [r1, #16]
 800ed0a:	1b12      	subs	r2, r2, r4
 800ed0c:	d10e      	bne.n	800ed2c <__mcmp+0x28>
 800ed0e:	f100 0314 	add.w	r3, r0, #20
 800ed12:	3114      	adds	r1, #20
 800ed14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed24:	42a5      	cmp	r5, r4
 800ed26:	d003      	beq.n	800ed30 <__mcmp+0x2c>
 800ed28:	d305      	bcc.n	800ed36 <__mcmp+0x32>
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	4610      	mov	r0, r2
 800ed2e:	bd30      	pop	{r4, r5, pc}
 800ed30:	4283      	cmp	r3, r0
 800ed32:	d3f3      	bcc.n	800ed1c <__mcmp+0x18>
 800ed34:	e7fa      	b.n	800ed2c <__mcmp+0x28>
 800ed36:	f04f 32ff 	mov.w	r2, #4294967295
 800ed3a:	e7f7      	b.n	800ed2c <__mcmp+0x28>

0800ed3c <__mdiff>:
 800ed3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed40:	460c      	mov	r4, r1
 800ed42:	4606      	mov	r6, r0
 800ed44:	4611      	mov	r1, r2
 800ed46:	4620      	mov	r0, r4
 800ed48:	4617      	mov	r7, r2
 800ed4a:	f7ff ffdb 	bl	800ed04 <__mcmp>
 800ed4e:	1e05      	subs	r5, r0, #0
 800ed50:	d110      	bne.n	800ed74 <__mdiff+0x38>
 800ed52:	4629      	mov	r1, r5
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7ff fd57 	bl	800e808 <_Balloc>
 800ed5a:	b930      	cbnz	r0, 800ed6a <__mdiff+0x2e>
 800ed5c:	4b39      	ldr	r3, [pc, #228]	; (800ee44 <__mdiff+0x108>)
 800ed5e:	4602      	mov	r2, r0
 800ed60:	f240 2132 	movw	r1, #562	; 0x232
 800ed64:	4838      	ldr	r0, [pc, #224]	; (800ee48 <__mdiff+0x10c>)
 800ed66:	f000 fc47 	bl	800f5f8 <__assert_func>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed74:	bfa4      	itt	ge
 800ed76:	463b      	movge	r3, r7
 800ed78:	4627      	movge	r7, r4
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	bfa6      	itte	ge
 800ed80:	461c      	movge	r4, r3
 800ed82:	2500      	movge	r5, #0
 800ed84:	2501      	movlt	r5, #1
 800ed86:	f7ff fd3f 	bl	800e808 <_Balloc>
 800ed8a:	b920      	cbnz	r0, 800ed96 <__mdiff+0x5a>
 800ed8c:	4b2d      	ldr	r3, [pc, #180]	; (800ee44 <__mdiff+0x108>)
 800ed8e:	4602      	mov	r2, r0
 800ed90:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ed94:	e7e6      	b.n	800ed64 <__mdiff+0x28>
 800ed96:	693e      	ldr	r6, [r7, #16]
 800ed98:	60c5      	str	r5, [r0, #12]
 800ed9a:	6925      	ldr	r5, [r4, #16]
 800ed9c:	f107 0114 	add.w	r1, r7, #20
 800eda0:	f104 0914 	add.w	r9, r4, #20
 800eda4:	f100 0e14 	add.w	lr, r0, #20
 800eda8:	f107 0210 	add.w	r2, r7, #16
 800edac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800edb0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800edb4:	46f2      	mov	sl, lr
 800edb6:	2700      	movs	r7, #0
 800edb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800edbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800edc0:	fa1f f883 	uxth.w	r8, r3
 800edc4:	fa17 f78b 	uxtah	r7, r7, fp
 800edc8:	0c1b      	lsrs	r3, r3, #16
 800edca:	eba7 0808 	sub.w	r8, r7, r8
 800edce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800edd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800edd6:	fa1f f888 	uxth.w	r8, r8
 800edda:	141f      	asrs	r7, r3, #16
 800eddc:	454d      	cmp	r5, r9
 800edde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ede2:	f84a 3b04 	str.w	r3, [sl], #4
 800ede6:	d8e7      	bhi.n	800edb8 <__mdiff+0x7c>
 800ede8:	1b2b      	subs	r3, r5, r4
 800edea:	3b15      	subs	r3, #21
 800edec:	f023 0303 	bic.w	r3, r3, #3
 800edf0:	3304      	adds	r3, #4
 800edf2:	3415      	adds	r4, #21
 800edf4:	42a5      	cmp	r5, r4
 800edf6:	bf38      	it	cc
 800edf8:	2304      	movcc	r3, #4
 800edfa:	4419      	add	r1, r3
 800edfc:	4473      	add	r3, lr
 800edfe:	469e      	mov	lr, r3
 800ee00:	460d      	mov	r5, r1
 800ee02:	4565      	cmp	r5, ip
 800ee04:	d30e      	bcc.n	800ee24 <__mdiff+0xe8>
 800ee06:	f10c 0203 	add.w	r2, ip, #3
 800ee0a:	1a52      	subs	r2, r2, r1
 800ee0c:	f022 0203 	bic.w	r2, r2, #3
 800ee10:	3903      	subs	r1, #3
 800ee12:	458c      	cmp	ip, r1
 800ee14:	bf38      	it	cc
 800ee16:	2200      	movcc	r2, #0
 800ee18:	441a      	add	r2, r3
 800ee1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee1e:	b17b      	cbz	r3, 800ee40 <__mdiff+0x104>
 800ee20:	6106      	str	r6, [r0, #16]
 800ee22:	e7a5      	b.n	800ed70 <__mdiff+0x34>
 800ee24:	f855 8b04 	ldr.w	r8, [r5], #4
 800ee28:	fa17 f488 	uxtah	r4, r7, r8
 800ee2c:	1422      	asrs	r2, r4, #16
 800ee2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ee32:	b2a4      	uxth	r4, r4
 800ee34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ee38:	f84e 4b04 	str.w	r4, [lr], #4
 800ee3c:	1417      	asrs	r7, r2, #16
 800ee3e:	e7e0      	b.n	800ee02 <__mdiff+0xc6>
 800ee40:	3e01      	subs	r6, #1
 800ee42:	e7ea      	b.n	800ee1a <__mdiff+0xde>
 800ee44:	080101cb 	.word	0x080101cb
 800ee48:	0801023c 	.word	0x0801023c

0800ee4c <__d2b>:
 800ee4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee50:	4689      	mov	r9, r1
 800ee52:	2101      	movs	r1, #1
 800ee54:	ec57 6b10 	vmov	r6, r7, d0
 800ee58:	4690      	mov	r8, r2
 800ee5a:	f7ff fcd5 	bl	800e808 <_Balloc>
 800ee5e:	4604      	mov	r4, r0
 800ee60:	b930      	cbnz	r0, 800ee70 <__d2b+0x24>
 800ee62:	4602      	mov	r2, r0
 800ee64:	4b25      	ldr	r3, [pc, #148]	; (800eefc <__d2b+0xb0>)
 800ee66:	4826      	ldr	r0, [pc, #152]	; (800ef00 <__d2b+0xb4>)
 800ee68:	f240 310a 	movw	r1, #778	; 0x30a
 800ee6c:	f000 fbc4 	bl	800f5f8 <__assert_func>
 800ee70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ee74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee78:	bb35      	cbnz	r5, 800eec8 <__d2b+0x7c>
 800ee7a:	2e00      	cmp	r6, #0
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	d028      	beq.n	800eed2 <__d2b+0x86>
 800ee80:	4668      	mov	r0, sp
 800ee82:	9600      	str	r6, [sp, #0]
 800ee84:	f7ff fd8c 	bl	800e9a0 <__lo0bits>
 800ee88:	9900      	ldr	r1, [sp, #0]
 800ee8a:	b300      	cbz	r0, 800eece <__d2b+0x82>
 800ee8c:	9a01      	ldr	r2, [sp, #4]
 800ee8e:	f1c0 0320 	rsb	r3, r0, #32
 800ee92:	fa02 f303 	lsl.w	r3, r2, r3
 800ee96:	430b      	orrs	r3, r1
 800ee98:	40c2      	lsrs	r2, r0
 800ee9a:	6163      	str	r3, [r4, #20]
 800ee9c:	9201      	str	r2, [sp, #4]
 800ee9e:	9b01      	ldr	r3, [sp, #4]
 800eea0:	61a3      	str	r3, [r4, #24]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	bf14      	ite	ne
 800eea6:	2202      	movne	r2, #2
 800eea8:	2201      	moveq	r2, #1
 800eeaa:	6122      	str	r2, [r4, #16]
 800eeac:	b1d5      	cbz	r5, 800eee4 <__d2b+0x98>
 800eeae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eeb2:	4405      	add	r5, r0
 800eeb4:	f8c9 5000 	str.w	r5, [r9]
 800eeb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eebc:	f8c8 0000 	str.w	r0, [r8]
 800eec0:	4620      	mov	r0, r4
 800eec2:	b003      	add	sp, #12
 800eec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eecc:	e7d5      	b.n	800ee7a <__d2b+0x2e>
 800eece:	6161      	str	r1, [r4, #20]
 800eed0:	e7e5      	b.n	800ee9e <__d2b+0x52>
 800eed2:	a801      	add	r0, sp, #4
 800eed4:	f7ff fd64 	bl	800e9a0 <__lo0bits>
 800eed8:	9b01      	ldr	r3, [sp, #4]
 800eeda:	6163      	str	r3, [r4, #20]
 800eedc:	2201      	movs	r2, #1
 800eede:	6122      	str	r2, [r4, #16]
 800eee0:	3020      	adds	r0, #32
 800eee2:	e7e3      	b.n	800eeac <__d2b+0x60>
 800eee4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eeec:	f8c9 0000 	str.w	r0, [r9]
 800eef0:	6918      	ldr	r0, [r3, #16]
 800eef2:	f7ff fd35 	bl	800e960 <__hi0bits>
 800eef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eefa:	e7df      	b.n	800eebc <__d2b+0x70>
 800eefc:	080101cb 	.word	0x080101cb
 800ef00:	0801023c 	.word	0x0801023c

0800ef04 <_realloc_r>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	4607      	mov	r7, r0
 800ef08:	4614      	mov	r4, r2
 800ef0a:	460e      	mov	r6, r1
 800ef0c:	b921      	cbnz	r1, 800ef18 <_realloc_r+0x14>
 800ef0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef12:	4611      	mov	r1, r2
 800ef14:	f7fd bd78 	b.w	800ca08 <_malloc_r>
 800ef18:	b922      	cbnz	r2, 800ef24 <_realloc_r+0x20>
 800ef1a:	f7fd fd25 	bl	800c968 <_free_r>
 800ef1e:	4625      	mov	r5, r4
 800ef20:	4628      	mov	r0, r5
 800ef22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef24:	f000 fc08 	bl	800f738 <_malloc_usable_size_r>
 800ef28:	42a0      	cmp	r0, r4
 800ef2a:	d20f      	bcs.n	800ef4c <_realloc_r+0x48>
 800ef2c:	4621      	mov	r1, r4
 800ef2e:	4638      	mov	r0, r7
 800ef30:	f7fd fd6a 	bl	800ca08 <_malloc_r>
 800ef34:	4605      	mov	r5, r0
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d0f2      	beq.n	800ef20 <_realloc_r+0x1c>
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	4622      	mov	r2, r4
 800ef3e:	f7fd fced 	bl	800c91c <memcpy>
 800ef42:	4631      	mov	r1, r6
 800ef44:	4638      	mov	r0, r7
 800ef46:	f7fd fd0f 	bl	800c968 <_free_r>
 800ef4a:	e7e9      	b.n	800ef20 <_realloc_r+0x1c>
 800ef4c:	4635      	mov	r5, r6
 800ef4e:	e7e7      	b.n	800ef20 <_realloc_r+0x1c>

0800ef50 <__ssputs_r>:
 800ef50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef54:	688e      	ldr	r6, [r1, #8]
 800ef56:	429e      	cmp	r6, r3
 800ef58:	4682      	mov	sl, r0
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	4690      	mov	r8, r2
 800ef5e:	461f      	mov	r7, r3
 800ef60:	d838      	bhi.n	800efd4 <__ssputs_r+0x84>
 800ef62:	898a      	ldrh	r2, [r1, #12]
 800ef64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef68:	d032      	beq.n	800efd0 <__ssputs_r+0x80>
 800ef6a:	6825      	ldr	r5, [r4, #0]
 800ef6c:	6909      	ldr	r1, [r1, #16]
 800ef6e:	eba5 0901 	sub.w	r9, r5, r1
 800ef72:	6965      	ldr	r5, [r4, #20]
 800ef74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	444b      	add	r3, r9
 800ef80:	106d      	asrs	r5, r5, #1
 800ef82:	429d      	cmp	r5, r3
 800ef84:	bf38      	it	cc
 800ef86:	461d      	movcc	r5, r3
 800ef88:	0553      	lsls	r3, r2, #21
 800ef8a:	d531      	bpl.n	800eff0 <__ssputs_r+0xa0>
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	f7fd fd3b 	bl	800ca08 <_malloc_r>
 800ef92:	4606      	mov	r6, r0
 800ef94:	b950      	cbnz	r0, 800efac <__ssputs_r+0x5c>
 800ef96:	230c      	movs	r3, #12
 800ef98:	f8ca 3000 	str.w	r3, [sl]
 800ef9c:	89a3      	ldrh	r3, [r4, #12]
 800ef9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efa2:	81a3      	strh	r3, [r4, #12]
 800efa4:	f04f 30ff 	mov.w	r0, #4294967295
 800efa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efac:	6921      	ldr	r1, [r4, #16]
 800efae:	464a      	mov	r2, r9
 800efb0:	f7fd fcb4 	bl	800c91c <memcpy>
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efbe:	81a3      	strh	r3, [r4, #12]
 800efc0:	6126      	str	r6, [r4, #16]
 800efc2:	6165      	str	r5, [r4, #20]
 800efc4:	444e      	add	r6, r9
 800efc6:	eba5 0509 	sub.w	r5, r5, r9
 800efca:	6026      	str	r6, [r4, #0]
 800efcc:	60a5      	str	r5, [r4, #8]
 800efce:	463e      	mov	r6, r7
 800efd0:	42be      	cmp	r6, r7
 800efd2:	d900      	bls.n	800efd6 <__ssputs_r+0x86>
 800efd4:	463e      	mov	r6, r7
 800efd6:	4632      	mov	r2, r6
 800efd8:	6820      	ldr	r0, [r4, #0]
 800efda:	4641      	mov	r1, r8
 800efdc:	f000 fb92 	bl	800f704 <memmove>
 800efe0:	68a3      	ldr	r3, [r4, #8]
 800efe2:	6822      	ldr	r2, [r4, #0]
 800efe4:	1b9b      	subs	r3, r3, r6
 800efe6:	4432      	add	r2, r6
 800efe8:	60a3      	str	r3, [r4, #8]
 800efea:	6022      	str	r2, [r4, #0]
 800efec:	2000      	movs	r0, #0
 800efee:	e7db      	b.n	800efa8 <__ssputs_r+0x58>
 800eff0:	462a      	mov	r2, r5
 800eff2:	f7ff ff87 	bl	800ef04 <_realloc_r>
 800eff6:	4606      	mov	r6, r0
 800eff8:	2800      	cmp	r0, #0
 800effa:	d1e1      	bne.n	800efc0 <__ssputs_r+0x70>
 800effc:	6921      	ldr	r1, [r4, #16]
 800effe:	4650      	mov	r0, sl
 800f000:	f7fd fcb2 	bl	800c968 <_free_r>
 800f004:	e7c7      	b.n	800ef96 <__ssputs_r+0x46>
	...

0800f008 <_svfiprintf_r>:
 800f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	4698      	mov	r8, r3
 800f00e:	898b      	ldrh	r3, [r1, #12]
 800f010:	061b      	lsls	r3, r3, #24
 800f012:	b09d      	sub	sp, #116	; 0x74
 800f014:	4607      	mov	r7, r0
 800f016:	460d      	mov	r5, r1
 800f018:	4614      	mov	r4, r2
 800f01a:	d50e      	bpl.n	800f03a <_svfiprintf_r+0x32>
 800f01c:	690b      	ldr	r3, [r1, #16]
 800f01e:	b963      	cbnz	r3, 800f03a <_svfiprintf_r+0x32>
 800f020:	2140      	movs	r1, #64	; 0x40
 800f022:	f7fd fcf1 	bl	800ca08 <_malloc_r>
 800f026:	6028      	str	r0, [r5, #0]
 800f028:	6128      	str	r0, [r5, #16]
 800f02a:	b920      	cbnz	r0, 800f036 <_svfiprintf_r+0x2e>
 800f02c:	230c      	movs	r3, #12
 800f02e:	603b      	str	r3, [r7, #0]
 800f030:	f04f 30ff 	mov.w	r0, #4294967295
 800f034:	e0d1      	b.n	800f1da <_svfiprintf_r+0x1d2>
 800f036:	2340      	movs	r3, #64	; 0x40
 800f038:	616b      	str	r3, [r5, #20]
 800f03a:	2300      	movs	r3, #0
 800f03c:	9309      	str	r3, [sp, #36]	; 0x24
 800f03e:	2320      	movs	r3, #32
 800f040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f044:	f8cd 800c 	str.w	r8, [sp, #12]
 800f048:	2330      	movs	r3, #48	; 0x30
 800f04a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f1f4 <_svfiprintf_r+0x1ec>
 800f04e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f052:	f04f 0901 	mov.w	r9, #1
 800f056:	4623      	mov	r3, r4
 800f058:	469a      	mov	sl, r3
 800f05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f05e:	b10a      	cbz	r2, 800f064 <_svfiprintf_r+0x5c>
 800f060:	2a25      	cmp	r2, #37	; 0x25
 800f062:	d1f9      	bne.n	800f058 <_svfiprintf_r+0x50>
 800f064:	ebba 0b04 	subs.w	fp, sl, r4
 800f068:	d00b      	beq.n	800f082 <_svfiprintf_r+0x7a>
 800f06a:	465b      	mov	r3, fp
 800f06c:	4622      	mov	r2, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	4638      	mov	r0, r7
 800f072:	f7ff ff6d 	bl	800ef50 <__ssputs_r>
 800f076:	3001      	adds	r0, #1
 800f078:	f000 80aa 	beq.w	800f1d0 <_svfiprintf_r+0x1c8>
 800f07c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f07e:	445a      	add	r2, fp
 800f080:	9209      	str	r2, [sp, #36]	; 0x24
 800f082:	f89a 3000 	ldrb.w	r3, [sl]
 800f086:	2b00      	cmp	r3, #0
 800f088:	f000 80a2 	beq.w	800f1d0 <_svfiprintf_r+0x1c8>
 800f08c:	2300      	movs	r3, #0
 800f08e:	f04f 32ff 	mov.w	r2, #4294967295
 800f092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f096:	f10a 0a01 	add.w	sl, sl, #1
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	9307      	str	r3, [sp, #28]
 800f09e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0a2:	931a      	str	r3, [sp, #104]	; 0x68
 800f0a4:	4654      	mov	r4, sl
 800f0a6:	2205      	movs	r2, #5
 800f0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ac:	4851      	ldr	r0, [pc, #324]	; (800f1f4 <_svfiprintf_r+0x1ec>)
 800f0ae:	f7f1 f89f 	bl	80001f0 <memchr>
 800f0b2:	9a04      	ldr	r2, [sp, #16]
 800f0b4:	b9d8      	cbnz	r0, 800f0ee <_svfiprintf_r+0xe6>
 800f0b6:	06d0      	lsls	r0, r2, #27
 800f0b8:	bf44      	itt	mi
 800f0ba:	2320      	movmi	r3, #32
 800f0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0c0:	0711      	lsls	r1, r2, #28
 800f0c2:	bf44      	itt	mi
 800f0c4:	232b      	movmi	r3, #43	; 0x2b
 800f0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f0d0:	d015      	beq.n	800f0fe <_svfiprintf_r+0xf6>
 800f0d2:	9a07      	ldr	r2, [sp, #28]
 800f0d4:	4654      	mov	r4, sl
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	f04f 0c0a 	mov.w	ip, #10
 800f0dc:	4621      	mov	r1, r4
 800f0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0e2:	3b30      	subs	r3, #48	; 0x30
 800f0e4:	2b09      	cmp	r3, #9
 800f0e6:	d94e      	bls.n	800f186 <_svfiprintf_r+0x17e>
 800f0e8:	b1b0      	cbz	r0, 800f118 <_svfiprintf_r+0x110>
 800f0ea:	9207      	str	r2, [sp, #28]
 800f0ec:	e014      	b.n	800f118 <_svfiprintf_r+0x110>
 800f0ee:	eba0 0308 	sub.w	r3, r0, r8
 800f0f2:	fa09 f303 	lsl.w	r3, r9, r3
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	9304      	str	r3, [sp, #16]
 800f0fa:	46a2      	mov	sl, r4
 800f0fc:	e7d2      	b.n	800f0a4 <_svfiprintf_r+0x9c>
 800f0fe:	9b03      	ldr	r3, [sp, #12]
 800f100:	1d19      	adds	r1, r3, #4
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	9103      	str	r1, [sp, #12]
 800f106:	2b00      	cmp	r3, #0
 800f108:	bfbb      	ittet	lt
 800f10a:	425b      	neglt	r3, r3
 800f10c:	f042 0202 	orrlt.w	r2, r2, #2
 800f110:	9307      	strge	r3, [sp, #28]
 800f112:	9307      	strlt	r3, [sp, #28]
 800f114:	bfb8      	it	lt
 800f116:	9204      	strlt	r2, [sp, #16]
 800f118:	7823      	ldrb	r3, [r4, #0]
 800f11a:	2b2e      	cmp	r3, #46	; 0x2e
 800f11c:	d10c      	bne.n	800f138 <_svfiprintf_r+0x130>
 800f11e:	7863      	ldrb	r3, [r4, #1]
 800f120:	2b2a      	cmp	r3, #42	; 0x2a
 800f122:	d135      	bne.n	800f190 <_svfiprintf_r+0x188>
 800f124:	9b03      	ldr	r3, [sp, #12]
 800f126:	1d1a      	adds	r2, r3, #4
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	9203      	str	r2, [sp, #12]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	bfb8      	it	lt
 800f130:	f04f 33ff 	movlt.w	r3, #4294967295
 800f134:	3402      	adds	r4, #2
 800f136:	9305      	str	r3, [sp, #20]
 800f138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f204 <_svfiprintf_r+0x1fc>
 800f13c:	7821      	ldrb	r1, [r4, #0]
 800f13e:	2203      	movs	r2, #3
 800f140:	4650      	mov	r0, sl
 800f142:	f7f1 f855 	bl	80001f0 <memchr>
 800f146:	b140      	cbz	r0, 800f15a <_svfiprintf_r+0x152>
 800f148:	2340      	movs	r3, #64	; 0x40
 800f14a:	eba0 000a 	sub.w	r0, r0, sl
 800f14e:	fa03 f000 	lsl.w	r0, r3, r0
 800f152:	9b04      	ldr	r3, [sp, #16]
 800f154:	4303      	orrs	r3, r0
 800f156:	3401      	adds	r4, #1
 800f158:	9304      	str	r3, [sp, #16]
 800f15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f15e:	4826      	ldr	r0, [pc, #152]	; (800f1f8 <_svfiprintf_r+0x1f0>)
 800f160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f164:	2206      	movs	r2, #6
 800f166:	f7f1 f843 	bl	80001f0 <memchr>
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d038      	beq.n	800f1e0 <_svfiprintf_r+0x1d8>
 800f16e:	4b23      	ldr	r3, [pc, #140]	; (800f1fc <_svfiprintf_r+0x1f4>)
 800f170:	bb1b      	cbnz	r3, 800f1ba <_svfiprintf_r+0x1b2>
 800f172:	9b03      	ldr	r3, [sp, #12]
 800f174:	3307      	adds	r3, #7
 800f176:	f023 0307 	bic.w	r3, r3, #7
 800f17a:	3308      	adds	r3, #8
 800f17c:	9303      	str	r3, [sp, #12]
 800f17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f180:	4433      	add	r3, r6
 800f182:	9309      	str	r3, [sp, #36]	; 0x24
 800f184:	e767      	b.n	800f056 <_svfiprintf_r+0x4e>
 800f186:	fb0c 3202 	mla	r2, ip, r2, r3
 800f18a:	460c      	mov	r4, r1
 800f18c:	2001      	movs	r0, #1
 800f18e:	e7a5      	b.n	800f0dc <_svfiprintf_r+0xd4>
 800f190:	2300      	movs	r3, #0
 800f192:	3401      	adds	r4, #1
 800f194:	9305      	str	r3, [sp, #20]
 800f196:	4619      	mov	r1, r3
 800f198:	f04f 0c0a 	mov.w	ip, #10
 800f19c:	4620      	mov	r0, r4
 800f19e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1a2:	3a30      	subs	r2, #48	; 0x30
 800f1a4:	2a09      	cmp	r2, #9
 800f1a6:	d903      	bls.n	800f1b0 <_svfiprintf_r+0x1a8>
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d0c5      	beq.n	800f138 <_svfiprintf_r+0x130>
 800f1ac:	9105      	str	r1, [sp, #20]
 800f1ae:	e7c3      	b.n	800f138 <_svfiprintf_r+0x130>
 800f1b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e7f0      	b.n	800f19c <_svfiprintf_r+0x194>
 800f1ba:	ab03      	add	r3, sp, #12
 800f1bc:	9300      	str	r3, [sp, #0]
 800f1be:	462a      	mov	r2, r5
 800f1c0:	4b0f      	ldr	r3, [pc, #60]	; (800f200 <_svfiprintf_r+0x1f8>)
 800f1c2:	a904      	add	r1, sp, #16
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7fd fd19 	bl	800cbfc <_printf_float>
 800f1ca:	1c42      	adds	r2, r0, #1
 800f1cc:	4606      	mov	r6, r0
 800f1ce:	d1d6      	bne.n	800f17e <_svfiprintf_r+0x176>
 800f1d0:	89ab      	ldrh	r3, [r5, #12]
 800f1d2:	065b      	lsls	r3, r3, #25
 800f1d4:	f53f af2c 	bmi.w	800f030 <_svfiprintf_r+0x28>
 800f1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1da:	b01d      	add	sp, #116	; 0x74
 800f1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e0:	ab03      	add	r3, sp, #12
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	462a      	mov	r2, r5
 800f1e6:	4b06      	ldr	r3, [pc, #24]	; (800f200 <_svfiprintf_r+0x1f8>)
 800f1e8:	a904      	add	r1, sp, #16
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	f7fd ffaa 	bl	800d144 <_printf_i>
 800f1f0:	e7eb      	b.n	800f1ca <_svfiprintf_r+0x1c2>
 800f1f2:	bf00      	nop
 800f1f4:	0801039c 	.word	0x0801039c
 800f1f8:	080103a6 	.word	0x080103a6
 800f1fc:	0800cbfd 	.word	0x0800cbfd
 800f200:	0800ef51 	.word	0x0800ef51
 800f204:	080103a2 	.word	0x080103a2

0800f208 <__sfputc_r>:
 800f208:	6893      	ldr	r3, [r2, #8]
 800f20a:	3b01      	subs	r3, #1
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	b410      	push	{r4}
 800f210:	6093      	str	r3, [r2, #8]
 800f212:	da08      	bge.n	800f226 <__sfputc_r+0x1e>
 800f214:	6994      	ldr	r4, [r2, #24]
 800f216:	42a3      	cmp	r3, r4
 800f218:	db01      	blt.n	800f21e <__sfputc_r+0x16>
 800f21a:	290a      	cmp	r1, #10
 800f21c:	d103      	bne.n	800f226 <__sfputc_r+0x1e>
 800f21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f222:	f7fe b989 	b.w	800d538 <__swbuf_r>
 800f226:	6813      	ldr	r3, [r2, #0]
 800f228:	1c58      	adds	r0, r3, #1
 800f22a:	6010      	str	r0, [r2, #0]
 800f22c:	7019      	strb	r1, [r3, #0]
 800f22e:	4608      	mov	r0, r1
 800f230:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f234:	4770      	bx	lr

0800f236 <__sfputs_r>:
 800f236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f238:	4606      	mov	r6, r0
 800f23a:	460f      	mov	r7, r1
 800f23c:	4614      	mov	r4, r2
 800f23e:	18d5      	adds	r5, r2, r3
 800f240:	42ac      	cmp	r4, r5
 800f242:	d101      	bne.n	800f248 <__sfputs_r+0x12>
 800f244:	2000      	movs	r0, #0
 800f246:	e007      	b.n	800f258 <__sfputs_r+0x22>
 800f248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f24c:	463a      	mov	r2, r7
 800f24e:	4630      	mov	r0, r6
 800f250:	f7ff ffda 	bl	800f208 <__sfputc_r>
 800f254:	1c43      	adds	r3, r0, #1
 800f256:	d1f3      	bne.n	800f240 <__sfputs_r+0xa>
 800f258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f25c <_vfiprintf_r>:
 800f25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f260:	460d      	mov	r5, r1
 800f262:	b09d      	sub	sp, #116	; 0x74
 800f264:	4614      	mov	r4, r2
 800f266:	4698      	mov	r8, r3
 800f268:	4606      	mov	r6, r0
 800f26a:	b118      	cbz	r0, 800f274 <_vfiprintf_r+0x18>
 800f26c:	6983      	ldr	r3, [r0, #24]
 800f26e:	b90b      	cbnz	r3, 800f274 <_vfiprintf_r+0x18>
 800f270:	f7ff f9b4 	bl	800e5dc <__sinit>
 800f274:	4b89      	ldr	r3, [pc, #548]	; (800f49c <_vfiprintf_r+0x240>)
 800f276:	429d      	cmp	r5, r3
 800f278:	d11b      	bne.n	800f2b2 <_vfiprintf_r+0x56>
 800f27a:	6875      	ldr	r5, [r6, #4]
 800f27c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f27e:	07d9      	lsls	r1, r3, #31
 800f280:	d405      	bmi.n	800f28e <_vfiprintf_r+0x32>
 800f282:	89ab      	ldrh	r3, [r5, #12]
 800f284:	059a      	lsls	r2, r3, #22
 800f286:	d402      	bmi.n	800f28e <_vfiprintf_r+0x32>
 800f288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f28a:	f7ff fa4a 	bl	800e722 <__retarget_lock_acquire_recursive>
 800f28e:	89ab      	ldrh	r3, [r5, #12]
 800f290:	071b      	lsls	r3, r3, #28
 800f292:	d501      	bpl.n	800f298 <_vfiprintf_r+0x3c>
 800f294:	692b      	ldr	r3, [r5, #16]
 800f296:	b9eb      	cbnz	r3, 800f2d4 <_vfiprintf_r+0x78>
 800f298:	4629      	mov	r1, r5
 800f29a:	4630      	mov	r0, r6
 800f29c:	f7fe f99e 	bl	800d5dc <__swsetup_r>
 800f2a0:	b1c0      	cbz	r0, 800f2d4 <_vfiprintf_r+0x78>
 800f2a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2a4:	07dc      	lsls	r4, r3, #31
 800f2a6:	d50e      	bpl.n	800f2c6 <_vfiprintf_r+0x6a>
 800f2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ac:	b01d      	add	sp, #116	; 0x74
 800f2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b2:	4b7b      	ldr	r3, [pc, #492]	; (800f4a0 <_vfiprintf_r+0x244>)
 800f2b4:	429d      	cmp	r5, r3
 800f2b6:	d101      	bne.n	800f2bc <_vfiprintf_r+0x60>
 800f2b8:	68b5      	ldr	r5, [r6, #8]
 800f2ba:	e7df      	b.n	800f27c <_vfiprintf_r+0x20>
 800f2bc:	4b79      	ldr	r3, [pc, #484]	; (800f4a4 <_vfiprintf_r+0x248>)
 800f2be:	429d      	cmp	r5, r3
 800f2c0:	bf08      	it	eq
 800f2c2:	68f5      	ldreq	r5, [r6, #12]
 800f2c4:	e7da      	b.n	800f27c <_vfiprintf_r+0x20>
 800f2c6:	89ab      	ldrh	r3, [r5, #12]
 800f2c8:	0598      	lsls	r0, r3, #22
 800f2ca:	d4ed      	bmi.n	800f2a8 <_vfiprintf_r+0x4c>
 800f2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2ce:	f7ff fa29 	bl	800e724 <__retarget_lock_release_recursive>
 800f2d2:	e7e9      	b.n	800f2a8 <_vfiprintf_r+0x4c>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2d8:	2320      	movs	r3, #32
 800f2da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2e2:	2330      	movs	r3, #48	; 0x30
 800f2e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f4a8 <_vfiprintf_r+0x24c>
 800f2e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2ec:	f04f 0901 	mov.w	r9, #1
 800f2f0:	4623      	mov	r3, r4
 800f2f2:	469a      	mov	sl, r3
 800f2f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2f8:	b10a      	cbz	r2, 800f2fe <_vfiprintf_r+0xa2>
 800f2fa:	2a25      	cmp	r2, #37	; 0x25
 800f2fc:	d1f9      	bne.n	800f2f2 <_vfiprintf_r+0x96>
 800f2fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f302:	d00b      	beq.n	800f31c <_vfiprintf_r+0xc0>
 800f304:	465b      	mov	r3, fp
 800f306:	4622      	mov	r2, r4
 800f308:	4629      	mov	r1, r5
 800f30a:	4630      	mov	r0, r6
 800f30c:	f7ff ff93 	bl	800f236 <__sfputs_r>
 800f310:	3001      	adds	r0, #1
 800f312:	f000 80aa 	beq.w	800f46a <_vfiprintf_r+0x20e>
 800f316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f318:	445a      	add	r2, fp
 800f31a:	9209      	str	r2, [sp, #36]	; 0x24
 800f31c:	f89a 3000 	ldrb.w	r3, [sl]
 800f320:	2b00      	cmp	r3, #0
 800f322:	f000 80a2 	beq.w	800f46a <_vfiprintf_r+0x20e>
 800f326:	2300      	movs	r3, #0
 800f328:	f04f 32ff 	mov.w	r2, #4294967295
 800f32c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f330:	f10a 0a01 	add.w	sl, sl, #1
 800f334:	9304      	str	r3, [sp, #16]
 800f336:	9307      	str	r3, [sp, #28]
 800f338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f33c:	931a      	str	r3, [sp, #104]	; 0x68
 800f33e:	4654      	mov	r4, sl
 800f340:	2205      	movs	r2, #5
 800f342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f346:	4858      	ldr	r0, [pc, #352]	; (800f4a8 <_vfiprintf_r+0x24c>)
 800f348:	f7f0 ff52 	bl	80001f0 <memchr>
 800f34c:	9a04      	ldr	r2, [sp, #16]
 800f34e:	b9d8      	cbnz	r0, 800f388 <_vfiprintf_r+0x12c>
 800f350:	06d1      	lsls	r1, r2, #27
 800f352:	bf44      	itt	mi
 800f354:	2320      	movmi	r3, #32
 800f356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f35a:	0713      	lsls	r3, r2, #28
 800f35c:	bf44      	itt	mi
 800f35e:	232b      	movmi	r3, #43	; 0x2b
 800f360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f364:	f89a 3000 	ldrb.w	r3, [sl]
 800f368:	2b2a      	cmp	r3, #42	; 0x2a
 800f36a:	d015      	beq.n	800f398 <_vfiprintf_r+0x13c>
 800f36c:	9a07      	ldr	r2, [sp, #28]
 800f36e:	4654      	mov	r4, sl
 800f370:	2000      	movs	r0, #0
 800f372:	f04f 0c0a 	mov.w	ip, #10
 800f376:	4621      	mov	r1, r4
 800f378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f37c:	3b30      	subs	r3, #48	; 0x30
 800f37e:	2b09      	cmp	r3, #9
 800f380:	d94e      	bls.n	800f420 <_vfiprintf_r+0x1c4>
 800f382:	b1b0      	cbz	r0, 800f3b2 <_vfiprintf_r+0x156>
 800f384:	9207      	str	r2, [sp, #28]
 800f386:	e014      	b.n	800f3b2 <_vfiprintf_r+0x156>
 800f388:	eba0 0308 	sub.w	r3, r0, r8
 800f38c:	fa09 f303 	lsl.w	r3, r9, r3
 800f390:	4313      	orrs	r3, r2
 800f392:	9304      	str	r3, [sp, #16]
 800f394:	46a2      	mov	sl, r4
 800f396:	e7d2      	b.n	800f33e <_vfiprintf_r+0xe2>
 800f398:	9b03      	ldr	r3, [sp, #12]
 800f39a:	1d19      	adds	r1, r3, #4
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	9103      	str	r1, [sp, #12]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	bfbb      	ittet	lt
 800f3a4:	425b      	neglt	r3, r3
 800f3a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f3aa:	9307      	strge	r3, [sp, #28]
 800f3ac:	9307      	strlt	r3, [sp, #28]
 800f3ae:	bfb8      	it	lt
 800f3b0:	9204      	strlt	r2, [sp, #16]
 800f3b2:	7823      	ldrb	r3, [r4, #0]
 800f3b4:	2b2e      	cmp	r3, #46	; 0x2e
 800f3b6:	d10c      	bne.n	800f3d2 <_vfiprintf_r+0x176>
 800f3b8:	7863      	ldrb	r3, [r4, #1]
 800f3ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f3bc:	d135      	bne.n	800f42a <_vfiprintf_r+0x1ce>
 800f3be:	9b03      	ldr	r3, [sp, #12]
 800f3c0:	1d1a      	adds	r2, r3, #4
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	9203      	str	r2, [sp, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	bfb8      	it	lt
 800f3ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3ce:	3402      	adds	r4, #2
 800f3d0:	9305      	str	r3, [sp, #20]
 800f3d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f4b8 <_vfiprintf_r+0x25c>
 800f3d6:	7821      	ldrb	r1, [r4, #0]
 800f3d8:	2203      	movs	r2, #3
 800f3da:	4650      	mov	r0, sl
 800f3dc:	f7f0 ff08 	bl	80001f0 <memchr>
 800f3e0:	b140      	cbz	r0, 800f3f4 <_vfiprintf_r+0x198>
 800f3e2:	2340      	movs	r3, #64	; 0x40
 800f3e4:	eba0 000a 	sub.w	r0, r0, sl
 800f3e8:	fa03 f000 	lsl.w	r0, r3, r0
 800f3ec:	9b04      	ldr	r3, [sp, #16]
 800f3ee:	4303      	orrs	r3, r0
 800f3f0:	3401      	adds	r4, #1
 800f3f2:	9304      	str	r3, [sp, #16]
 800f3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f8:	482c      	ldr	r0, [pc, #176]	; (800f4ac <_vfiprintf_r+0x250>)
 800f3fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3fe:	2206      	movs	r2, #6
 800f400:	f7f0 fef6 	bl	80001f0 <memchr>
 800f404:	2800      	cmp	r0, #0
 800f406:	d03f      	beq.n	800f488 <_vfiprintf_r+0x22c>
 800f408:	4b29      	ldr	r3, [pc, #164]	; (800f4b0 <_vfiprintf_r+0x254>)
 800f40a:	bb1b      	cbnz	r3, 800f454 <_vfiprintf_r+0x1f8>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	3307      	adds	r3, #7
 800f410:	f023 0307 	bic.w	r3, r3, #7
 800f414:	3308      	adds	r3, #8
 800f416:	9303      	str	r3, [sp, #12]
 800f418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f41a:	443b      	add	r3, r7
 800f41c:	9309      	str	r3, [sp, #36]	; 0x24
 800f41e:	e767      	b.n	800f2f0 <_vfiprintf_r+0x94>
 800f420:	fb0c 3202 	mla	r2, ip, r2, r3
 800f424:	460c      	mov	r4, r1
 800f426:	2001      	movs	r0, #1
 800f428:	e7a5      	b.n	800f376 <_vfiprintf_r+0x11a>
 800f42a:	2300      	movs	r3, #0
 800f42c:	3401      	adds	r4, #1
 800f42e:	9305      	str	r3, [sp, #20]
 800f430:	4619      	mov	r1, r3
 800f432:	f04f 0c0a 	mov.w	ip, #10
 800f436:	4620      	mov	r0, r4
 800f438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f43c:	3a30      	subs	r2, #48	; 0x30
 800f43e:	2a09      	cmp	r2, #9
 800f440:	d903      	bls.n	800f44a <_vfiprintf_r+0x1ee>
 800f442:	2b00      	cmp	r3, #0
 800f444:	d0c5      	beq.n	800f3d2 <_vfiprintf_r+0x176>
 800f446:	9105      	str	r1, [sp, #20]
 800f448:	e7c3      	b.n	800f3d2 <_vfiprintf_r+0x176>
 800f44a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f44e:	4604      	mov	r4, r0
 800f450:	2301      	movs	r3, #1
 800f452:	e7f0      	b.n	800f436 <_vfiprintf_r+0x1da>
 800f454:	ab03      	add	r3, sp, #12
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	462a      	mov	r2, r5
 800f45a:	4b16      	ldr	r3, [pc, #88]	; (800f4b4 <_vfiprintf_r+0x258>)
 800f45c:	a904      	add	r1, sp, #16
 800f45e:	4630      	mov	r0, r6
 800f460:	f7fd fbcc 	bl	800cbfc <_printf_float>
 800f464:	4607      	mov	r7, r0
 800f466:	1c78      	adds	r0, r7, #1
 800f468:	d1d6      	bne.n	800f418 <_vfiprintf_r+0x1bc>
 800f46a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f46c:	07d9      	lsls	r1, r3, #31
 800f46e:	d405      	bmi.n	800f47c <_vfiprintf_r+0x220>
 800f470:	89ab      	ldrh	r3, [r5, #12]
 800f472:	059a      	lsls	r2, r3, #22
 800f474:	d402      	bmi.n	800f47c <_vfiprintf_r+0x220>
 800f476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f478:	f7ff f954 	bl	800e724 <__retarget_lock_release_recursive>
 800f47c:	89ab      	ldrh	r3, [r5, #12]
 800f47e:	065b      	lsls	r3, r3, #25
 800f480:	f53f af12 	bmi.w	800f2a8 <_vfiprintf_r+0x4c>
 800f484:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f486:	e711      	b.n	800f2ac <_vfiprintf_r+0x50>
 800f488:	ab03      	add	r3, sp, #12
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	462a      	mov	r2, r5
 800f48e:	4b09      	ldr	r3, [pc, #36]	; (800f4b4 <_vfiprintf_r+0x258>)
 800f490:	a904      	add	r1, sp, #16
 800f492:	4630      	mov	r0, r6
 800f494:	f7fd fe56 	bl	800d144 <_printf_i>
 800f498:	e7e4      	b.n	800f464 <_vfiprintf_r+0x208>
 800f49a:	bf00      	nop
 800f49c:	080101fc 	.word	0x080101fc
 800f4a0:	0801021c 	.word	0x0801021c
 800f4a4:	080101dc 	.word	0x080101dc
 800f4a8:	0801039c 	.word	0x0801039c
 800f4ac:	080103a6 	.word	0x080103a6
 800f4b0:	0800cbfd 	.word	0x0800cbfd
 800f4b4:	0800f237 	.word	0x0800f237
 800f4b8:	080103a2 	.word	0x080103a2

0800f4bc <_putc_r>:
 800f4bc:	b570      	push	{r4, r5, r6, lr}
 800f4be:	460d      	mov	r5, r1
 800f4c0:	4614      	mov	r4, r2
 800f4c2:	4606      	mov	r6, r0
 800f4c4:	b118      	cbz	r0, 800f4ce <_putc_r+0x12>
 800f4c6:	6983      	ldr	r3, [r0, #24]
 800f4c8:	b90b      	cbnz	r3, 800f4ce <_putc_r+0x12>
 800f4ca:	f7ff f887 	bl	800e5dc <__sinit>
 800f4ce:	4b1c      	ldr	r3, [pc, #112]	; (800f540 <_putc_r+0x84>)
 800f4d0:	429c      	cmp	r4, r3
 800f4d2:	d124      	bne.n	800f51e <_putc_r+0x62>
 800f4d4:	6874      	ldr	r4, [r6, #4]
 800f4d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4d8:	07d8      	lsls	r0, r3, #31
 800f4da:	d405      	bmi.n	800f4e8 <_putc_r+0x2c>
 800f4dc:	89a3      	ldrh	r3, [r4, #12]
 800f4de:	0599      	lsls	r1, r3, #22
 800f4e0:	d402      	bmi.n	800f4e8 <_putc_r+0x2c>
 800f4e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4e4:	f7ff f91d 	bl	800e722 <__retarget_lock_acquire_recursive>
 800f4e8:	68a3      	ldr	r3, [r4, #8]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	60a3      	str	r3, [r4, #8]
 800f4f0:	da05      	bge.n	800f4fe <_putc_r+0x42>
 800f4f2:	69a2      	ldr	r2, [r4, #24]
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	db1c      	blt.n	800f532 <_putc_r+0x76>
 800f4f8:	b2eb      	uxtb	r3, r5
 800f4fa:	2b0a      	cmp	r3, #10
 800f4fc:	d019      	beq.n	800f532 <_putc_r+0x76>
 800f4fe:	6823      	ldr	r3, [r4, #0]
 800f500:	1c5a      	adds	r2, r3, #1
 800f502:	6022      	str	r2, [r4, #0]
 800f504:	701d      	strb	r5, [r3, #0]
 800f506:	b2ed      	uxtb	r5, r5
 800f508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f50a:	07da      	lsls	r2, r3, #31
 800f50c:	d405      	bmi.n	800f51a <_putc_r+0x5e>
 800f50e:	89a3      	ldrh	r3, [r4, #12]
 800f510:	059b      	lsls	r3, r3, #22
 800f512:	d402      	bmi.n	800f51a <_putc_r+0x5e>
 800f514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f516:	f7ff f905 	bl	800e724 <__retarget_lock_release_recursive>
 800f51a:	4628      	mov	r0, r5
 800f51c:	bd70      	pop	{r4, r5, r6, pc}
 800f51e:	4b09      	ldr	r3, [pc, #36]	; (800f544 <_putc_r+0x88>)
 800f520:	429c      	cmp	r4, r3
 800f522:	d101      	bne.n	800f528 <_putc_r+0x6c>
 800f524:	68b4      	ldr	r4, [r6, #8]
 800f526:	e7d6      	b.n	800f4d6 <_putc_r+0x1a>
 800f528:	4b07      	ldr	r3, [pc, #28]	; (800f548 <_putc_r+0x8c>)
 800f52a:	429c      	cmp	r4, r3
 800f52c:	bf08      	it	eq
 800f52e:	68f4      	ldreq	r4, [r6, #12]
 800f530:	e7d1      	b.n	800f4d6 <_putc_r+0x1a>
 800f532:	4629      	mov	r1, r5
 800f534:	4622      	mov	r2, r4
 800f536:	4630      	mov	r0, r6
 800f538:	f7fd fffe 	bl	800d538 <__swbuf_r>
 800f53c:	4605      	mov	r5, r0
 800f53e:	e7e3      	b.n	800f508 <_putc_r+0x4c>
 800f540:	080101fc 	.word	0x080101fc
 800f544:	0801021c 	.word	0x0801021c
 800f548:	080101dc 	.word	0x080101dc

0800f54c <__sread>:
 800f54c:	b510      	push	{r4, lr}
 800f54e:	460c      	mov	r4, r1
 800f550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f554:	f000 f8f8 	bl	800f748 <_read_r>
 800f558:	2800      	cmp	r0, #0
 800f55a:	bfab      	itete	ge
 800f55c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f55e:	89a3      	ldrhlt	r3, [r4, #12]
 800f560:	181b      	addge	r3, r3, r0
 800f562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f566:	bfac      	ite	ge
 800f568:	6563      	strge	r3, [r4, #84]	; 0x54
 800f56a:	81a3      	strhlt	r3, [r4, #12]
 800f56c:	bd10      	pop	{r4, pc}

0800f56e <__swrite>:
 800f56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f572:	461f      	mov	r7, r3
 800f574:	898b      	ldrh	r3, [r1, #12]
 800f576:	05db      	lsls	r3, r3, #23
 800f578:	4605      	mov	r5, r0
 800f57a:	460c      	mov	r4, r1
 800f57c:	4616      	mov	r6, r2
 800f57e:	d505      	bpl.n	800f58c <__swrite+0x1e>
 800f580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f584:	2302      	movs	r3, #2
 800f586:	2200      	movs	r2, #0
 800f588:	f000 f898 	bl	800f6bc <_lseek_r>
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f596:	81a3      	strh	r3, [r4, #12]
 800f598:	4632      	mov	r2, r6
 800f59a:	463b      	mov	r3, r7
 800f59c:	4628      	mov	r0, r5
 800f59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a2:	f000 b817 	b.w	800f5d4 <_write_r>

0800f5a6 <__sseek>:
 800f5a6:	b510      	push	{r4, lr}
 800f5a8:	460c      	mov	r4, r1
 800f5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5ae:	f000 f885 	bl	800f6bc <_lseek_r>
 800f5b2:	1c43      	adds	r3, r0, #1
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	bf15      	itete	ne
 800f5b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f5ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f5be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f5c2:	81a3      	strheq	r3, [r4, #12]
 800f5c4:	bf18      	it	ne
 800f5c6:	81a3      	strhne	r3, [r4, #12]
 800f5c8:	bd10      	pop	{r4, pc}

0800f5ca <__sclose>:
 800f5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5ce:	f000 b831 	b.w	800f634 <_close_r>
	...

0800f5d4 <_write_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d07      	ldr	r5, [pc, #28]	; (800f5f4 <_write_r+0x20>)
 800f5d8:	4604      	mov	r4, r0
 800f5da:	4608      	mov	r0, r1
 800f5dc:	4611      	mov	r1, r2
 800f5de:	2200      	movs	r2, #0
 800f5e0:	602a      	str	r2, [r5, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	f7f2 fa4c 	bl	8001a80 <_write>
 800f5e8:	1c43      	adds	r3, r0, #1
 800f5ea:	d102      	bne.n	800f5f2 <_write_r+0x1e>
 800f5ec:	682b      	ldr	r3, [r5, #0]
 800f5ee:	b103      	cbz	r3, 800f5f2 <_write_r+0x1e>
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	bd38      	pop	{r3, r4, r5, pc}
 800f5f4:	200006b4 	.word	0x200006b4

0800f5f8 <__assert_func>:
 800f5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5fa:	4614      	mov	r4, r2
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	4b09      	ldr	r3, [pc, #36]	; (800f624 <__assert_func+0x2c>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4605      	mov	r5, r0
 800f604:	68d8      	ldr	r0, [r3, #12]
 800f606:	b14c      	cbz	r4, 800f61c <__assert_func+0x24>
 800f608:	4b07      	ldr	r3, [pc, #28]	; (800f628 <__assert_func+0x30>)
 800f60a:	9100      	str	r1, [sp, #0]
 800f60c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f610:	4906      	ldr	r1, [pc, #24]	; (800f62c <__assert_func+0x34>)
 800f612:	462b      	mov	r3, r5
 800f614:	f000 f81e 	bl	800f654 <fiprintf>
 800f618:	f000 f8b5 	bl	800f786 <abort>
 800f61c:	4b04      	ldr	r3, [pc, #16]	; (800f630 <__assert_func+0x38>)
 800f61e:	461c      	mov	r4, r3
 800f620:	e7f3      	b.n	800f60a <__assert_func+0x12>
 800f622:	bf00      	nop
 800f624:	2000038c 	.word	0x2000038c
 800f628:	080103ad 	.word	0x080103ad
 800f62c:	080103ba 	.word	0x080103ba
 800f630:	080103e8 	.word	0x080103e8

0800f634 <_close_r>:
 800f634:	b538      	push	{r3, r4, r5, lr}
 800f636:	4d06      	ldr	r5, [pc, #24]	; (800f650 <_close_r+0x1c>)
 800f638:	2300      	movs	r3, #0
 800f63a:	4604      	mov	r4, r0
 800f63c:	4608      	mov	r0, r1
 800f63e:	602b      	str	r3, [r5, #0]
 800f640:	f7f2 fa3a 	bl	8001ab8 <_close>
 800f644:	1c43      	adds	r3, r0, #1
 800f646:	d102      	bne.n	800f64e <_close_r+0x1a>
 800f648:	682b      	ldr	r3, [r5, #0]
 800f64a:	b103      	cbz	r3, 800f64e <_close_r+0x1a>
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	bd38      	pop	{r3, r4, r5, pc}
 800f650:	200006b4 	.word	0x200006b4

0800f654 <fiprintf>:
 800f654:	b40e      	push	{r1, r2, r3}
 800f656:	b503      	push	{r0, r1, lr}
 800f658:	4601      	mov	r1, r0
 800f65a:	ab03      	add	r3, sp, #12
 800f65c:	4805      	ldr	r0, [pc, #20]	; (800f674 <fiprintf+0x20>)
 800f65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f662:	6800      	ldr	r0, [r0, #0]
 800f664:	9301      	str	r3, [sp, #4]
 800f666:	f7ff fdf9 	bl	800f25c <_vfiprintf_r>
 800f66a:	b002      	add	sp, #8
 800f66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f670:	b003      	add	sp, #12
 800f672:	4770      	bx	lr
 800f674:	2000038c 	.word	0x2000038c

0800f678 <_fstat_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	4d07      	ldr	r5, [pc, #28]	; (800f698 <_fstat_r+0x20>)
 800f67c:	2300      	movs	r3, #0
 800f67e:	4604      	mov	r4, r0
 800f680:	4608      	mov	r0, r1
 800f682:	4611      	mov	r1, r2
 800f684:	602b      	str	r3, [r5, #0]
 800f686:	f7f2 fa23 	bl	8001ad0 <_fstat>
 800f68a:	1c43      	adds	r3, r0, #1
 800f68c:	d102      	bne.n	800f694 <_fstat_r+0x1c>
 800f68e:	682b      	ldr	r3, [r5, #0]
 800f690:	b103      	cbz	r3, 800f694 <_fstat_r+0x1c>
 800f692:	6023      	str	r3, [r4, #0]
 800f694:	bd38      	pop	{r3, r4, r5, pc}
 800f696:	bf00      	nop
 800f698:	200006b4 	.word	0x200006b4

0800f69c <_isatty_r>:
 800f69c:	b538      	push	{r3, r4, r5, lr}
 800f69e:	4d06      	ldr	r5, [pc, #24]	; (800f6b8 <_isatty_r+0x1c>)
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	4604      	mov	r4, r0
 800f6a4:	4608      	mov	r0, r1
 800f6a6:	602b      	str	r3, [r5, #0]
 800f6a8:	f7f2 fa22 	bl	8001af0 <_isatty>
 800f6ac:	1c43      	adds	r3, r0, #1
 800f6ae:	d102      	bne.n	800f6b6 <_isatty_r+0x1a>
 800f6b0:	682b      	ldr	r3, [r5, #0]
 800f6b2:	b103      	cbz	r3, 800f6b6 <_isatty_r+0x1a>
 800f6b4:	6023      	str	r3, [r4, #0]
 800f6b6:	bd38      	pop	{r3, r4, r5, pc}
 800f6b8:	200006b4 	.word	0x200006b4

0800f6bc <_lseek_r>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	4d07      	ldr	r5, [pc, #28]	; (800f6dc <_lseek_r+0x20>)
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	4608      	mov	r0, r1
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	602a      	str	r2, [r5, #0]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	f7f2 fa1b 	bl	8001b06 <_lseek>
 800f6d0:	1c43      	adds	r3, r0, #1
 800f6d2:	d102      	bne.n	800f6da <_lseek_r+0x1e>
 800f6d4:	682b      	ldr	r3, [r5, #0]
 800f6d6:	b103      	cbz	r3, 800f6da <_lseek_r+0x1e>
 800f6d8:	6023      	str	r3, [r4, #0]
 800f6da:	bd38      	pop	{r3, r4, r5, pc}
 800f6dc:	200006b4 	.word	0x200006b4

0800f6e0 <__ascii_mbtowc>:
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	b901      	cbnz	r1, 800f6e6 <__ascii_mbtowc+0x6>
 800f6e4:	a901      	add	r1, sp, #4
 800f6e6:	b142      	cbz	r2, 800f6fa <__ascii_mbtowc+0x1a>
 800f6e8:	b14b      	cbz	r3, 800f6fe <__ascii_mbtowc+0x1e>
 800f6ea:	7813      	ldrb	r3, [r2, #0]
 800f6ec:	600b      	str	r3, [r1, #0]
 800f6ee:	7812      	ldrb	r2, [r2, #0]
 800f6f0:	1e10      	subs	r0, r2, #0
 800f6f2:	bf18      	it	ne
 800f6f4:	2001      	movne	r0, #1
 800f6f6:	b002      	add	sp, #8
 800f6f8:	4770      	bx	lr
 800f6fa:	4610      	mov	r0, r2
 800f6fc:	e7fb      	b.n	800f6f6 <__ascii_mbtowc+0x16>
 800f6fe:	f06f 0001 	mvn.w	r0, #1
 800f702:	e7f8      	b.n	800f6f6 <__ascii_mbtowc+0x16>

0800f704 <memmove>:
 800f704:	4288      	cmp	r0, r1
 800f706:	b510      	push	{r4, lr}
 800f708:	eb01 0402 	add.w	r4, r1, r2
 800f70c:	d902      	bls.n	800f714 <memmove+0x10>
 800f70e:	4284      	cmp	r4, r0
 800f710:	4623      	mov	r3, r4
 800f712:	d807      	bhi.n	800f724 <memmove+0x20>
 800f714:	1e43      	subs	r3, r0, #1
 800f716:	42a1      	cmp	r1, r4
 800f718:	d008      	beq.n	800f72c <memmove+0x28>
 800f71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f722:	e7f8      	b.n	800f716 <memmove+0x12>
 800f724:	4402      	add	r2, r0
 800f726:	4601      	mov	r1, r0
 800f728:	428a      	cmp	r2, r1
 800f72a:	d100      	bne.n	800f72e <memmove+0x2a>
 800f72c:	bd10      	pop	{r4, pc}
 800f72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f736:	e7f7      	b.n	800f728 <memmove+0x24>

0800f738 <_malloc_usable_size_r>:
 800f738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f73c:	1f18      	subs	r0, r3, #4
 800f73e:	2b00      	cmp	r3, #0
 800f740:	bfbc      	itt	lt
 800f742:	580b      	ldrlt	r3, [r1, r0]
 800f744:	18c0      	addlt	r0, r0, r3
 800f746:	4770      	bx	lr

0800f748 <_read_r>:
 800f748:	b538      	push	{r3, r4, r5, lr}
 800f74a:	4d07      	ldr	r5, [pc, #28]	; (800f768 <_read_r+0x20>)
 800f74c:	4604      	mov	r4, r0
 800f74e:	4608      	mov	r0, r1
 800f750:	4611      	mov	r1, r2
 800f752:	2200      	movs	r2, #0
 800f754:	602a      	str	r2, [r5, #0]
 800f756:	461a      	mov	r2, r3
 800f758:	f7f2 f975 	bl	8001a46 <_read>
 800f75c:	1c43      	adds	r3, r0, #1
 800f75e:	d102      	bne.n	800f766 <_read_r+0x1e>
 800f760:	682b      	ldr	r3, [r5, #0]
 800f762:	b103      	cbz	r3, 800f766 <_read_r+0x1e>
 800f764:	6023      	str	r3, [r4, #0]
 800f766:	bd38      	pop	{r3, r4, r5, pc}
 800f768:	200006b4 	.word	0x200006b4

0800f76c <__ascii_wctomb>:
 800f76c:	b149      	cbz	r1, 800f782 <__ascii_wctomb+0x16>
 800f76e:	2aff      	cmp	r2, #255	; 0xff
 800f770:	bf85      	ittet	hi
 800f772:	238a      	movhi	r3, #138	; 0x8a
 800f774:	6003      	strhi	r3, [r0, #0]
 800f776:	700a      	strbls	r2, [r1, #0]
 800f778:	f04f 30ff 	movhi.w	r0, #4294967295
 800f77c:	bf98      	it	ls
 800f77e:	2001      	movls	r0, #1
 800f780:	4770      	bx	lr
 800f782:	4608      	mov	r0, r1
 800f784:	4770      	bx	lr

0800f786 <abort>:
 800f786:	b508      	push	{r3, lr}
 800f788:	2006      	movs	r0, #6
 800f78a:	f000 f82b 	bl	800f7e4 <raise>
 800f78e:	2001      	movs	r0, #1
 800f790:	f7f2 f94f 	bl	8001a32 <_exit>

0800f794 <_raise_r>:
 800f794:	291f      	cmp	r1, #31
 800f796:	b538      	push	{r3, r4, r5, lr}
 800f798:	4604      	mov	r4, r0
 800f79a:	460d      	mov	r5, r1
 800f79c:	d904      	bls.n	800f7a8 <_raise_r+0x14>
 800f79e:	2316      	movs	r3, #22
 800f7a0:	6003      	str	r3, [r0, #0]
 800f7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a6:	bd38      	pop	{r3, r4, r5, pc}
 800f7a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f7aa:	b112      	cbz	r2, 800f7b2 <_raise_r+0x1e>
 800f7ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7b0:	b94b      	cbnz	r3, 800f7c6 <_raise_r+0x32>
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f000 f830 	bl	800f818 <_getpid_r>
 800f7b8:	462a      	mov	r2, r5
 800f7ba:	4601      	mov	r1, r0
 800f7bc:	4620      	mov	r0, r4
 800f7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7c2:	f000 b817 	b.w	800f7f4 <_kill_r>
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d00a      	beq.n	800f7e0 <_raise_r+0x4c>
 800f7ca:	1c59      	adds	r1, r3, #1
 800f7cc:	d103      	bne.n	800f7d6 <_raise_r+0x42>
 800f7ce:	2316      	movs	r3, #22
 800f7d0:	6003      	str	r3, [r0, #0]
 800f7d2:	2001      	movs	r0, #1
 800f7d4:	e7e7      	b.n	800f7a6 <_raise_r+0x12>
 800f7d6:	2400      	movs	r4, #0
 800f7d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7dc:	4628      	mov	r0, r5
 800f7de:	4798      	blx	r3
 800f7e0:	2000      	movs	r0, #0
 800f7e2:	e7e0      	b.n	800f7a6 <_raise_r+0x12>

0800f7e4 <raise>:
 800f7e4:	4b02      	ldr	r3, [pc, #8]	; (800f7f0 <raise+0xc>)
 800f7e6:	4601      	mov	r1, r0
 800f7e8:	6818      	ldr	r0, [r3, #0]
 800f7ea:	f7ff bfd3 	b.w	800f794 <_raise_r>
 800f7ee:	bf00      	nop
 800f7f0:	2000038c 	.word	0x2000038c

0800f7f4 <_kill_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4d07      	ldr	r5, [pc, #28]	; (800f814 <_kill_r+0x20>)
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	4608      	mov	r0, r1
 800f7fe:	4611      	mov	r1, r2
 800f800:	602b      	str	r3, [r5, #0]
 800f802:	f7f2 f906 	bl	8001a12 <_kill>
 800f806:	1c43      	adds	r3, r0, #1
 800f808:	d102      	bne.n	800f810 <_kill_r+0x1c>
 800f80a:	682b      	ldr	r3, [r5, #0]
 800f80c:	b103      	cbz	r3, 800f810 <_kill_r+0x1c>
 800f80e:	6023      	str	r3, [r4, #0]
 800f810:	bd38      	pop	{r3, r4, r5, pc}
 800f812:	bf00      	nop
 800f814:	200006b4 	.word	0x200006b4

0800f818 <_getpid_r>:
 800f818:	f7f2 b8f3 	b.w	8001a02 <_getpid>

0800f81c <_init>:
 800f81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81e:	bf00      	nop
 800f820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f822:	bc08      	pop	{r3}
 800f824:	469e      	mov	lr, r3
 800f826:	4770      	bx	lr

0800f828 <_fini>:
 800f828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82a:	bf00      	nop
 800f82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f82e:	bc08      	pop	{r3}
 800f830:	469e      	mov	lr, r3
 800f832:	4770      	bx	lr
